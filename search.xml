<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>前端的面试题</title>
      <link href="/2023/01/06/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
      <url>/2023/01/06/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="vue阶段会问到的"><a href="#vue阶段会问到的" class="headerlink" title="vue阶段会问到的"></a>vue阶段会问到的</h1><h2 id="1-vue的生命周期相关的问题？"><a href="#1-vue的生命周期相关的问题？" class="headerlink" title="1.vue的生命周期相关的问题？"></a>1.vue的生命周期相关的问题？</h2><p>1.vue的生命周期分别都做了什么？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先系统自带了八个生命周期</span><br><span class="line">(<span class="number">1</span>) <span class="title function_">beforeCreate</span>(): 在实例初始化之后调用, data和methods都还没有初始化完成, 通过<span class="variable language_">this</span>不能访问</span><br><span class="line"></span><br><span class="line">初始化data与methods/computed</span><br><span class="line"></span><br><span class="line">(<span class="number">2</span>) <span class="title function_">created</span>(): 此时data和methods都已初始化完成, 可以通过<span class="variable language_">this</span>去操作, 可以在此发ajax请求</span><br><span class="line"></span><br><span class="line">编译模板</span><br><span class="line"></span><br><span class="line">(<span class="number">3</span>) <span class="title function_">beforeMount</span>(): 模板已经在内存中编译, 但还没有挂载到页面上, 不能通过ref找到对应的标签对象</span><br><span class="line"></span><br><span class="line">插入到界面上显示</span><br><span class="line"></span><br><span class="line">(<span class="number">4</span>) <span class="title function_">mounted</span>(): 页面已经初始显示, 可以通过ref找到对应的标签, 也可以选择此时发ajax请求</span><br><span class="line"></span><br><span class="line">n次更新数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">5</span>) <span class="title function_">beforeUpdate</span>(): 在数据更新之后, 界面更新前调用, 只能访问到原有的界面</span><br><span class="line"></span><br><span class="line">更新界面</span><br><span class="line"></span><br><span class="line">(<span class="number">6</span>) <span class="title function_">updated</span>(): 在界面更新之后调用, 此时可以访问最新的界面</span><br><span class="line"></span><br><span class="line">销毁组件/ v-<span class="keyword">if</span>隐藏/离开不缓存的路由组件</span><br><span class="line"></span><br><span class="line">(<span class="number">7</span>) <span class="title function_">beforeDestroy</span>(): 实例销毁之前调用, 此时实例仍然可以正常工作</span><br><span class="line"></span><br><span class="line">(<span class="number">8</span>) <span class="title function_">destroyed</span>(): <span class="title class_">Vue</span> 实例销毁后调用, 实例已经无法正常工作了</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>一旦进入组件或者页面的时候会执行前面四个<span class="title function_">beforeCreate</span>()， <span class="title function_">created</span>()，<span class="title function_">beforeMount</span>()，<span class="title function_">mounted</span>()</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>当加入了keep-active会多了两个生命周期<span class="title function_">activated</span>(),<span class="title function_">deactivated</span>()<span class="comment">//进入和销毁，</span></span><br><span class="line">这个时候在进入组件就会五个生命周期最后进入到<span class="title function_">activated</span>(),第二次或者第n次在进入就只执行一个生命周期<span class="title function_">activated</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">9</span>) <span class="title function_">deactivated</span>():组件失活, 但没有死亡</span><br><span class="line"></span><br><span class="line">(<span class="number">10</span>) <span class="title function_">activated</span>(): 组件激活, 被复用</span><br><span class="line"></span><br><span class="line">(<span class="number">11</span>) <span class="title function_">errorCaptured</span>(): 用于捕获子组件的错误,<span class="keyword">return</span> <span class="literal">false</span>可以阻止错误向上冒泡(传递)</span><br></pre></td></tr></table></figure><p>2.vue那个生命周期可以执行异步请求？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>在created 钩子函数触发时，组件的 data 数据、通过路由注入的数据已经具备，此时可以使用这些数据发送 ajax 请求。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>在 mounted 钩子函数中发起也可以，但是相对比 created 稍微迟了一些。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>如果不需要依赖任何数据发起 ajax 请求，那么在 beforeCreate 发起也可以。</span><br></pre></td></tr></table></figure><p>3.在那个阶段有$el,那个阶段有$data</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>只有在mounted中才会有$el,而$data除了刚开始的 beforeCreate，其他都有</span><br></pre></td></tr></table></figure><p>4.keep-alive的参数是怎么用的怎么理解的？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>-keep-alive是vue提供的一个缓存组件，用来对组件进行缓存，从而节省性能，当组件在keep-alive内被切换时，组件的activated、deactivated这两个生命周期钩子函数会被执行,被包裹在keep-alive中的组件的状态将会被保留</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>-例如我们将某个列表组件内容滑动到<span class="number">100</span>条位置时，那我们再次切换到一个组件后再次切换回到该组件，位置状态依旧会保持再第<span class="number">100</span>条列表处</span><br></pre></td></tr></table></figure><h2 id="2-v-if和v-show的相关问题"><a href="#2-v-if和v-show的相关问题" class="headerlink" title="2.v-if和v-show的相关问题"></a>2.v-if和v-show的相关问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>v-<span class="keyword">if</span>和v-show的区别？</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>展示的形式不同</span><br><span class="line">首先v-<span class="keyword">if</span>是通过创建或者删除一个dom节点，v-show是通过样式去隐藏dom元素，但是本身还是存在的</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>使用场景的不同</span><br><span class="line">如果是初次加载v-<span class="keyword">if</span>要比v-show好一点，页面不用在加载dom元素，性能会快一点</span><br><span class="line"></span><br><span class="line">如果是频繁的切换，v-show要比v-<span class="keyword">if</span>要好一点，创建和删除的开销太大，显示隐藏的开销要小一点</span><br></pre></td></tr></table></figure><h2 id="3-v-model的相关问题"><a href="#3-v-model的相关问题" class="headerlink" title="3.v-model的相关问题"></a>3.v-model的相关问题</h2><p>1.谈一谈什么是v-model?</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先v-modul本质就是动态的value属性和自定义inpit事件的监听，在父组件当中通过value去绑定msg数据，然后通过props去传递给子组件，在子组件中接受到父组件的数据，父组件给子组件的绑定自定义事件，在子组件中绑定input事件，当触发input事件后，在去触发自定义事件将子组件中的最新的inuput数据传给父组件，然后父组件拿到子组件的数据，如果父组件将msg数据改变，那么第一步给子组件传递的value就会重新传递渲染，子里面的value也会发生改变</span><br></pre></td></tr></table></figure><h2 id="4-vue的组件通信？"><a href="#4-vue的组件通信？" class="headerlink" title="4.vue的组件通信？"></a>4.vue的组件通信？</h2><p>1.props(父子通信)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>父组件在子组件上绑定方法以及传入的数据，在子组件中通过props中去接收数据</span><br></pre></td></tr></table></figure><p>2.自定义事件？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>基本用法</span><br><span class="line">vm.$emit(<span class="string">&#x27;名称&#x27;</span>，<span class="variable language_">this</span>.<span class="property">data</span>)</span><br><span class="line">vm.$on(<span class="string">&#x27;名称&#x27;</span>，<span class="keyword">function</span>(<span class="params">data</span>))</span><br><span class="line"><span class="number">2.</span>首先自定义事件是子父通信，在子组件当中写上一个点击事件，使用$emit将数据传给父组件，父组件中在子组件标签上要用v-on方法获取子组件传过来的数据。</span><br></pre></td></tr></table></figure><p>3.全局事件总线？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先全局事件总线，兄弟传值，在全局中创建vue的实例，然后在子组件中通过$emit去触发事件将数据传过去，父组件中要在mounted中去回调接受数据</span><br></pre></td></tr></table></figure><p>4.v-modul</p><p>5..sync</p><p>6.$attrs与$listeners与v-bind和v-on配合</p><p>7.$refs&amp;$children$parent</p><p>8.provide与inject</p><p>9.vuex</p><p>10.插槽==&gt;作用域插槽</p><p>4.说一下用到vue的父子通信的有哪些？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>props </span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>全局事件中线</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>vuex</span><br></pre></td></tr></table></figure><h2 id="5-计算属性computed和watch的区别？wacth都有什么属性？"><a href="#5-计算属性computed和watch的区别？wacth都有什么属性？" class="headerlink" title="5.计算属性computed和watch的区别？wacth都有什么属性？"></a>5.计算属性computed和watch的区别？wacth都有什么属性？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先computed它支持缓存，只有依赖的数据发生变化才会重新计算，并且不支持异步,当computed中有异步操作时没有办法监听数据的变化</span><br><span class="line"><span class="number">2.</span>watch是监听数据变化，执行对应的操作，并且是没有缓存的，只要监听值发生变化都会调用回调函数</span><br><span class="line"><span class="number">3.</span>computed必须要有<span class="keyword">return</span>，而watch是不用</span><br></pre></td></tr></table></figure><h2 id="6-谈谈对mvvm模式的理解？"><a href="#6-谈谈对mvvm模式的理解？" class="headerlink" title="6.谈谈对mvvm模式的理解？"></a>6.谈谈对mvvm模式的理解？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先mvvm是指modul-view-viewmodul</span><br><span class="line">modul是指前端去访问请求后端的数据做一个数据访问</span><br><span class="line">view是一个视图层面的，包括像html,css这种结构布局外观</span><br><span class="line">viewmodul是负责监听modul的请求回来的数据的改变并且控制试图的更新的</span><br><span class="line"><span class="number">2.</span>这种模式的优势：</span><br><span class="line"><span class="number">1.</span>可重用性高</span><br><span class="line"><span class="number">2.</span>分层开发，便于维护</span><br></pre></td></tr></table></figure><h2 id="7-说一下nextTick是什么？"><a href="#7-说一下nextTick是什么？" class="headerlink" title="7.说一下nextTick是什么？"></a>7.说一下nextTick是什么？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先nextTick是一个等待下次<span class="title class_">Dom</span>刷新的一个方法</span><br><span class="line"><span class="number">2.</span>主要用在vue在异步更新的时候，如果数据发生变化，vue是不会立刻更新dom，而是开启一个队列，把组件更新函数保存在队列中，此时如果想要获取更新后的dom状态，就需要用到nextTick</span><br><span class="line"><span class="number">3.</span>在开发时，一般在created中想要获取dom时；或者是在响应式数据变化后想要获取<span class="variable constant_">DOM</span>更新后的状态，比如希望获取列表更新后的高度</span><br><span class="line"><span class="number">4</span>。其实nextTick的原理就是会返回一个promise，当开启队列后会先执行同步再去执行异步通过.<span class="property">then</span>的方法去执行回调，就是在dom更新完后在调用nextTick的回调函数</span><br></pre></td></tr></table></figure><h2 id="8-谈谈对Vue项目中进行那些优化？怎么实现的？"><a href="#8-谈谈对Vue项目中进行那些优化？怎么实现的？" class="headerlink" title="8.谈谈对Vue项目中进行那些优化？怎么实现的？"></a>8.谈谈对Vue项目中进行那些优化？怎么实现的？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先是路由懒加载，借助weback的<span class="keyword">import</span>()实现异步组件,实现分包打包，程序会变得更小，更快</span><br><span class="line"><span class="number">2.</span>组件缓存keep-alive通过缓存页面来避免重复创建组件实例，且能保留缓存组件得状态</span><br><span class="line"><span class="number">3.</span>使用v-show复用<span class="variable constant_">DOM</span>，避免重复创建组件</span><br><span class="line"><span class="number">4.</span>v-once和v-memo：v-once是页面只渲染一次，v-memo是选中状态变化项</span><br><span class="line"><span class="number">5.</span>组件销毁：会自动解绑全部指令及事件监听器，但是仅限于组件本身得事件</span><br><span class="line"><span class="number">6.</span>图片懒加载lazyload：在很多时候需要将页面没有出现得图片先不做加载，等滚动到了可视区域在做加载</span><br><span class="line"><span class="number">7.</span>按需引入：比如第三方插件像element-plus按需引入避免体积太大</span><br></pre></td></tr></table></figure><h2 id="9-v-if和v-for那个优先级高？"><a href="#9-v-if和v-for那个优先级高？" class="headerlink" title="9.v-if和v-for那个优先级高？"></a>9.v-if和v-for那个优先级高？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先实践中是不能把两者放在一起的</span><br><span class="line"><span class="number">2.</span>在vue2中，v-<span class="keyword">for</span>的优先级是高于v-<span class="keyword">if</span>，而vue3是相反的</span><br><span class="line"><span class="number">3.</span>然后在开发过程中在一些需要过滤列表的项目，通过v-<span class="keyword">for</span>去不断的遍历，v-<span class="keyword">if</span>去判断真的就留下来，在vue2中是可行的，但是vue3是相反的，v-<span class="keyword">if</span>的优先级高于v-<span class="keyword">for</span>，就会报错。</span><br><span class="line"><span class="number">4</span>。解决方案就是把这个v-<span class="keyword">if</span>提高到上一个容器templete</span><br></pre></td></tr></table></figure><h2 id="10-子组件可以改变父组件数据么？"><a href="#10-子组件可以改变父组件数据么？" class="headerlink" title="10.子组件可以改变父组件数据么？"></a>10.子组件可以改变父组件数据么？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>vue的官方文档显示是不能这么做的，因为根据单项数据流原则会使数据变得数据复杂不好维护，不好找错</span><br></pre></td></tr></table></figure><h2 id="11-vue项目的权限管理是怎么做的？"><a href="#11-vue项目的权限管理是怎么做的？" class="headerlink" title="11.vue项目的权限管理是怎么做的？"></a>11.vue项目的权限管理是怎么做的？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>权限管理一般的需求分为：页面权限和按钮权限</span><br><span class="line"><span class="number">2.</span>具体实现时候分为前端和后端的两种方案：</span><br><span class="line"><span class="number">3.</span>前端方案会把所有的路由信息在前端配置，通过路由守卫需要用户登录，用户登录过后根据角色过滤出角色能访问路由，比如说我会配置一个asyncRoutes的一个数组，将需要认证的页面在路由的meta中添加一个roles字段，当获取用户角色后通过两者的交集判断是不是为空，不为空说明可以访问，过滤后的就是角色能够访问的，最后通过router.<span class="title function_">addRoutes</span>(accessRoutes)方式动态添加路由。</span><br><span class="line"><span class="number">4.</span>按钮权限的控制通常会实现一个指令，例如v-permission，将按钮要求通过值传给v-permission指令，在指令的mouted钩子中可以判断当前用户角色和按钮是否存在交集，有则保留按钮</span><br><span class="line"><span class="number">5.</span>纯前端的优点是实现简单，不需要额外的权限管理页面，但是维护起来问题较大，有新的页面和角色需求就要修改前端代码重新打包部署，服务端方案就不存在这个问题，通过专门的角色和权限管理，配置页面和按钮权限信息到数据库，应用每次登陆时获取都是最新的路由信息</span><br></pre></td></tr></table></figure><h2 id="12-说一说对vue响应式的理解？"><a href="#12-说一说对vue响应式的理解？" class="headerlink" title="12.说一说对vue响应式的理解？"></a>12.说一说对vue响应式的理解？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先响应式指定是组件的data发生变化时，会立刻触发视图的更新。</span><br><span class="line"><span class="number">2.</span>其次会先遍历data，在vue2中是通过object.<span class="property">defineProperty</span>来拦截数据中的setter和gettter，当用户修改视图时会触发set拦截器，然后改变当前的数据，然后通知watcher,让watcher去通知视图更新，再次从get中获取相应的数据。</span><br><span class="line"><span class="number">3.</span>在vue3中它重写了响应式原理，首先会使用proxy进行代理，拦截data中属性的所有操作，包括属性的读写。属性的添加和属性的删除等，其次会使用reflect进行反射，动态对被代理的对象的相应属性进行特定的操作，代理对象和反射对象必须相互配合，才能实现响应式</span><br></pre></td></tr></table></figure><h2 id="13-说一说你对虚拟dom的理解？"><a href="#13-说一说你对虚拟dom的理解？" class="headerlink" title="13.说一说你对虚拟dom的理解？"></a>13.说一说你对虚拟dom的理解？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>虚拟dom本身就是一个js对象，只不过是它是通过不同的属性去描述一个视图结构.</span><br><span class="line"><span class="number">2.</span>通过引入虚拟dom我们可以将真实的元素节点抽象成vnode，有效的减少直接dom次数，从而提高程序性能，直接操作dom是有限制的，比如diff操作，频繁的操作的dom也会容易引起页面的重绘和回流，但是通过抽象vnode进行中间处理可以有效的减少dom次数，从而减少页面的重绘和回流</span><br></pre></td></tr></table></figure><h2 id="14-知道那些vue3的新特性？"><a href="#14-知道那些vue3的新特性？" class="headerlink" title="14.知道那些vue3的新特性？"></a>14.知道那些vue3的新特性？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>第一个是<span class="title class_">Composition</span> <span class="variable constant_">API</span>，有一个语法糖setup，然后是基于proxy的响应式系统，更容易维护和扩展</span><br></pre></td></tr></table></figure><h2 id="15-vue-router动态路由有什么用"><a href="#15-vue-router动态路由有什么用" class="headerlink" title="15.vue-router动态路由有什么用?"></a>15.vue-router动态路由有什么用?</h2><p>1.怎么定义动态路由？怎么获取传过来的动态参数？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>很多时候我们需要将给定匹配模式的路由映射在同一个组件，这种情况就需要定义动态路由</span><br><span class="line"><span class="number">2.</span>例如我们可能有一个user组件，他应该对所有的用户进行渲染，但是用户的id不同。在vueRouter中，我们可以在路径中使用一个动态字段来实现，例如：&#123;<span class="attr">path</span>:<span class="string">&#x27;/users/:id&#x27;</span>,<span class="attr">compoent</span>:user&#125;,其中:id就是路径参数</span><br><span class="line"><span class="number">3.</span>路径参数用冒号：表示，当一个路由被匹配时，它的params的值将在每一个组件中以<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">params</span>的形式暴露出来</span><br></pre></td></tr></table></figure><h2 id="16-能说一下key的作用么？"><a href="#16-能说一下key的作用么？" class="headerlink" title="16.能说一下key的作用么？"></a>16.能说一下key的作用么？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先key的作用主要是为了更高效的更新虚拟dom,在实际应用中，渲染页面时key是必须设置的，而且是唯一的标识，尽量避免使用索引去作为key，因为一旦数组的排序有问题则会出现bug</span><br><span class="line"><span class="number">2.</span>vue判断两个节点是否相同时主要判断两者的key和元素类型，因此如果不设置key，它的值就是undefiend，就可能永远觉得这是相同的节点，只能去更新操作，就会造成大量的dom操作</span><br></pre></td></tr></table></figure><h2 id="17-从0创建一个项目会做什么事情？"><a href="#17-从0创建一个项目会做什么事情？" class="headerlink" title="17.从0创建一个项目会做什么事情？"></a>17.从0创建一个项目会做什么事情？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先会通过vite或者clie构建项目，然后引入插件，比如路由插件v-router，状态管理vuex，ui库element-plus，http请求axios</span><br><span class="line"><span class="number">2.</span>其他的库常见的有nprogress进度条，图标可以用vite-svg-loader</span><br></pre></td></tr></table></figure><h2 id="18-关于vuex的理解？"><a href="#18-关于vuex的理解？" class="headerlink" title="18.关于vuex的理解？"></a>18.关于vuex的理解？</h2><p>1.vuex有那些属性，是干嘛的？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先vuex是专门为vue开发的状态管理模式或者是数据管理，方便组件中的数据共享</span><br><span class="line"><span class="number">2.</span>vuex中有state,getters，mutations,actions,modules</span><br><span class="line"><span class="number">3.</span>state 类似于组件中的data用于存储数据，</span><br><span class="line">getters类似于组件中computed计算属性，</span><br><span class="line">mutations类似于组件中methords方法，</span><br><span class="line">modules将以上四个属性在细分，让数据更好管理</span><br><span class="line"><span class="number">4.</span></span><br></pre></td></tr></table></figure><p>2.vuex中的mutations和actions的区别？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先mutations都是同步事务，两者都是提交方法</span><br><span class="line"><span class="number">2.</span>两者不同是actions提交的是mutation，而不是直接变更状态，action可以包含任意异步操作，而mutations是同步操作</span><br></pre></td></tr></table></figure><p>3.vuex是单向数据流还是双向数据流？</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>vuex是单项数据流</span><br></pre></td></tr></table></figure><h2 id="17-什么是ref？ref和reactive有什么区别？"><a href="#17-什么是ref？ref和reactive有什么区别？" class="headerlink" title="17.什么是ref？ref和reactive有什么区别？"></a>17.什么是ref？ref和reactive有什么区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>能够更方便获取dom元素</span><br><span class="line"><span class="number">2.</span>ref返回响应式ref对象，reactive返回的响应式代理对象</span><br><span class="line"><span class="number">3.</span>ref返回的响应式数据在js使用需要加上.<span class="property">value</span>才能访问值，在视图中使用不需要。而reactive需要结合<span class="title function_">torefs</span>()将值转换为ref对象之后展开</span><br></pre></td></tr></table></figure><h2 id="18-怎么实路由懒加载？"><a href="#18-怎么实路由懒加载？" class="headerlink" title="18.怎么实路由懒加载？"></a>18.怎么实路由懒加载？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>一般来说对所有的路由都是用动态导入，给component选项配置一个返回promise组件的函数就可以定义懒加载路由，但是路由中不能使用异步组件</span><br></pre></td></tr></table></figure><h2 id="19-spa和ssr的区别？"><a href="#19-spa和ssr的区别？" class="headerlink" title="19.spa和ssr的区别？"></a>19.spa和ssr的区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>spa指的是单页面应用，ssr指的是多页面应用</span><br><span class="line"><span class="number">2.</span>spa应用只会首次请求html文件，后续只需要请求json数据，因此用户体验更好节约流量，服务端压力小，但是首屏加载时间的时间会变长，而且seo不友好，为了解决以上缺点就有ssr方案，由于html内容在服务器一次性生成出来，首屏加载快，搜索引擎也可以很方便的抓取页面信息，但是ssr方案也会有方案，开发受限等问题。</span><br><span class="line"><span class="number">3.</span>在选择上，如果我们应用存在首屏加载优化需求，seo需求时就考虑ssr</span><br></pre></td></tr></table></figure><h2 id="20-说一说vue渲染大量数据应该怎么优化？"><a href="#20-说一说vue渲染大量数据应该怎么优化？" class="headerlink" title="20.说一说vue渲染大量数据应该怎么优化？"></a>20.说一说vue渲染大量数据应该怎么优化？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>。首先避免大数据量可以采取分页的方式的获取</span><br><span class="line"><span class="number">2.</span>避免大量的渲染数据，可以用vue-virtual-scoller等虚拟滚动方案，只渲染视口范围内的数据</span><br><span class="line"><span class="number">3.</span>避免更新：可以只用v-once只渲染一次</span><br><span class="line"><span class="number">4.</span>优化更新：通过v-memo缓存子树，有条件更新，提高复用，避免不必要的更新</span><br><span class="line"><span class="number">5.</span>按需加载数据：可以采用懒加载的方式，在用户需要的时候在加载数据</span><br></pre></td></tr></table></figure><h2 id="21-跨域是怎么做得？"><a href="#21-跨域是怎么做得？" class="headerlink" title="21.跨域是怎么做得？"></a>21.跨域是怎么做得？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">-首先http请求分为普通请求和ajax请求，普通请求是没有跨域的，只有ajax请求才有跨域</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-当发送ajax请求后，浏览器为了自身的安全就会有同源策略会要求协议端口必须一致</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-这个时候我们可以通过jsonp 前台后台一起配合去进行跨域，但是只能是git请求</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-cors是后端去处理跨域</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-配置代理proxy，是必须有配置代理才能够跨域，它是将服务器向浏览器发送的请求转为了服务器向服务器发送的请求，绕开了浏览器实现跨域</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br></pre></td></tr></table></figure><h2 id="22-哈希和history的区别"><a href="#22-哈希和history的区别" class="headerlink" title="22.哈希和history的区别?"></a>22.哈希和history的区别?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">hash 虽然出现在 URL 中，但不会被包括在 HTTP 请求中，对后端完全没有影响，因此改变 hash 不会重新加载页面。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">hash 模式下，仅 hash 符号之前的内容会被包含在请求中，如 http://www.npc.com，因此对于后端来说，即使没有做到对路由的全覆盖，也不会返回 404 错误。</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">history 模式下，前端的 URL 必须和实际向后端发起请求的 URL 一致，如 http://www.abc.com/book/id。如果后端缺少对 /book/id 的路由处理，将返回 404 错误。Vue-Router 官网里如此描述：“不过这种模式要玩好，还需要后台配置支持……所以呢，你要在服务端增加一个覆盖所有情况的候选资源：如果 URL 匹配不到任何静态资源，则应该返回同一个 index.html 页面，这个页面就是你 app 依赖的页面。”</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br></pre></td></tr></table></figure><h2 id="23-vue样式模块化"><a href="#23-vue样式模块化" class="headerlink" title="23.vue样式模块化"></a>23.vue样式模块化</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">scoped的作用和原理</span><br><span class="line">       作用: scoped样式只能影响当前组件和子组件的根标签</span><br><span class="line">       原理: 加了scoped后产生了哪些变化</span><br><span class="line">           标签: 当前组件的所有原生标签和子组件的根标签都添加了同一个且唯一的data自定义属性</span><br><span class="line">               &lt;div data-v-6777eaa2&gt;</span><br><span class="line">           选择器: 在选择器的最右边加上了当前data自定义属性的选择器 </span><br><span class="line">               ==&gt; 只有可能匹配上当前组件和子组件的根标签(子组件的子标签没有这个属性)</span><br><span class="line">               .<span class="property">box</span> .<span class="property">title</span>[data-v-6777eaa2] &#123;</span><br><span class="line">                  <span class="attr">color</span>: red;</span><br><span class="line">                &#125;</span><br></pre></td></tr></table></figure><h1 id="js阶段会问到的"><a href="#js阶段会问到的" class="headerlink" title="js阶段会问到的"></a>js阶段会问到的</h1><h2 id="1-var-let-const的区别？"><a href="#1-var-let-const的区别？" class="headerlink" title="1.var let const的区别？"></a>1.var let const的区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>声明提升：</span><br><span class="line"><span class="keyword">var</span>声明的变量存在变量提升，<span class="keyword">let</span>和<span class="keyword">const</span>不存在变量提升</span><br><span class="line"><span class="number">2.</span>块级作用域：</span><br><span class="line"><span class="keyword">var</span>不存在块级作用域，<span class="keyword">let</span>和<span class="keyword">const</span>存在块级作用域，只有所在的代码块生效</span><br><span class="line"><span class="number">3.</span>重复声明：</span><br><span class="line"><span class="keyword">var</span>允许重复声明，<span class="keyword">let</span>和<span class="keyword">const</span>不允许在同一个作用域重复声明</span><br><span class="line"><span class="number">4.</span>修改声明的变量</span><br><span class="line"><span class="keyword">var</span>和<span class="keyword">let</span>可以修改声明的变量，<span class="keyword">const</span>不可以，一旦声明必须赋值，并且常量的值不能改变</span><br></pre></td></tr></table></figure><h2 id="2-什么是闭包？有啥优缺点？"><a href="#2-什么是闭包？有啥优缺点？" class="headerlink" title="2.什么是闭包？有啥优缺点？"></a>2.什么是闭包？有啥优缺点？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>闭包是一个函数加上到创建函数的作用域的一个链接，闭包关闭了函数的自由变量</span><br><span class="line">-什么时候产生闭包？     </span><br><span class="line">        <span class="number">1.</span> 函数嵌套</span><br><span class="line">        <span class="number">2.</span> 内部函数引用了外部函数的局部变量</span><br><span class="line">        <span class="number">3.</span> 调用外部函数（外部函数要调用，内部函数要定义）</span><br><span class="line">-怎么使用闭包？</span><br><span class="line">        返回内部函数, 在外部接收    最常用的手段</span><br><span class="line">        用其它不会立即释放的变量引用内部函数对象  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;&#125;)       </span><br><span class="line">-闭包的优缺点？</span><br><span class="line">优点：</span><br><span class="line">            延长局部变量的生命周期</span><br><span class="line">            内部函数可以访问外部函数的局部变量</span><br><span class="line">缺点：</span><br><span class="line">            变量会驻留在内存中，造成内存损耗问题</span><br><span class="line">            解决：把闭包的函数设置为<span class="literal">null</span></span><br><span class="line">            </span><br><span class="line">-闭包的应用？</span><br><span class="line">        具体功能说: 可以说根据id删除品牌(需要显示确定框)</span><br><span class="line">        大的说: 我们定义的很多模块在编译后的代码中都存在闭包</span><br></pre></td></tr></table></figure><h2 id="3-什么是防抖？什么节流？"><a href="#3-什么是防抖？什么节流？" class="headerlink" title="3.什么是防抖？什么节流？"></a>3.什么是防抖？什么节流？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="string">``</span>js</span><br><span class="line">-防抖是用户一直触发某个函数，触发的时间间隔如果小于设定时间间隔，则只执行一次</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> timer = <span class="literal">null</span> <span class="comment">//借助闭包</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(timer)&#123;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(timer) </span><br><span class="line">        &#125;</span><br><span class="line">        timer = <span class="built_in">setTimeout</span>(fn,delay) <span class="comment">// 简化写法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">-节流是在短时间内多次触发同一个事件，那么在函数执行一次后，该函数在指定时间期限内不在工作，直到过了这段时间才重新有效</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn,delay</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> valid = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">       <span class="keyword">if</span>(!valid)&#123;</span><br><span class="line">           <span class="comment">//休息时间 暂不接客</span></span><br><span class="line">           <span class="keyword">return</span> <span class="literal">false</span> </span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 工作时间，执行函数并且在间隔期内把状态位设为无效</span></span><br><span class="line">        valid = <span class="literal">false</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title function_">fn</span>()</span><br><span class="line">            valid = <span class="literal">true</span>;</span><br><span class="line">        &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="4-延迟js加载的方式？"><a href="#4-延迟js加载的方式？" class="headerlink" title="4.延迟js加载的方式？"></a>4.延迟js加载的方式？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>延迟加载的有：<span class="keyword">async</span>,defer</span><br><span class="line"><span class="number">2.</span>defer：是等html全部解析完成，才会执行js代码</span><br><span class="line"><span class="number">3.</span><span class="attr">async</span>:<span class="keyword">async</span>是和html一起解析同步的，不是依次执行js脚本(谁先加载完谁先执行)</span><br></pre></td></tr></table></figure><h2 id="5-数组去重？"><a href="#5-数组去重？" class="headerlink" title="5.数组去重？"></a>5.数组去重？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">数组去重：</span><br><span class="line"><span class="number">1</span>) js原生</span><br><span class="line">        <span class="keyword">var</span> arr = [<span class="number">8</span>,<span class="number">11</span>,<span class="number">20</span>,<span class="number">5</span>,<span class="number">20</span>,<span class="number">8</span>,<span class="number">0</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">0</span>,<span class="number">8</span>];</span><br><span class="line">        <span class="keyword">var</span>  t = [];</span><br><span class="line">        t[<span class="number">0</span>] = arr[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;arr.<span class="property">length</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">var</span> k = <span class="number">0</span>;k&lt;t.<span class="property">length</span>;k++)&#123;</span><br><span class="line">                <span class="comment">//当原数组中的值和新数组中的值相同的时候,就没有必要再继续比较了,跳出内循环</span></span><br><span class="line">                <span class="keyword">if</span>(t[k] == arr[i])&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//拿原数组中的某个元素比较到新数组中的最后一个元素还没有重复</span></span><br><span class="line">                <span class="keyword">if</span>(k == t.<span class="property">length</span>-<span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="comment">//将数据插入新数组</span></span><br><span class="line">                    t.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    <span class="number">1</span>)利用<span class="title function_">forEach</span>()和<span class="title function_">indexOf</span>()</span><br><span class="line">      说明: 本质是双重遍历, 效率差些</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">unique1</span> (array) &#123;</span><br><span class="line">      <span class="keyword">const</span> arr = []</span><br><span class="line">      array.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr.<span class="title function_">indexOf</span>(item)===-<span class="number">1</span>) &#123;</span><br><span class="line">          arr.<span class="title function_">push</span>(item)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="keyword">return</span> arr</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> <span class="number">3</span>) <span class="title class_">Set</span></span><br><span class="line">    <span class="keyword">let</span> a = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">2</span>]</span><br><span class="line">    <span class="keyword">let</span> s = <span class="keyword">new</span> <span class="title class_">Set</span>(a);</span><br><span class="line">    <span class="keyword">let</span> newArr = [...s];</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(s)</span><br><span class="line">    </span><br></pre></td></tr></table></figure><h2 id="6-null和undefined的区别？"><a href="#6-null和undefined的区别？" class="headerlink" title="6.null和undefined的区别？"></a>6.null和undefined的区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">它们的区别是<span class="literal">null</span>是定义为一个空对象，转换为数值为<span class="number">0</span>，<span class="literal">undefined</span>表示一个无的原始值，转化为nan与任何数字相加为nan</span><br><span class="line"></span><br><span class="line">-<span class="literal">undefined</span>出现原因：(口诀：一变量二函数一对象)</span><br><span class="line"></span><br><span class="line">           <span class="number">1.</span>变量被声明了但是没赋值时</span><br><span class="line"></span><br><span class="line">           <span class="number">2.</span>调用函数时，应该提供的参数没提供，则该参数为<span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">           <span class="number">3.</span>函数没有返回值时，默认返回<span class="literal">undefined</span></span><br><span class="line"></span><br><span class="line">           <span class="number">4.</span>对象没有赋值的属性</span><br><span class="line">           </span><br><span class="line">-<span class="literal">null</span>出现原因</span><br><span class="line"></span><br><span class="line">           <span class="number">1.</span>作为函数的参数，表示该函数的参数不是对象</span><br><span class="line"></span><br><span class="line">           <span class="number">2.</span>作为对象原型链的终点</span><br></pre></td></tr></table></figure><h2 id="7-js微任务和宏任务"><a href="#7-js微任务和宏任务" class="headerlink" title="7.js微任务和宏任务"></a>7.js微任务和宏任务</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">宏任务与微任务</span><br><span class="line">- 宏任务: <span class="built_in">setTimeout</span>, <span class="built_in">setInterval</span>, <span class="title class_">Ajax</span>, <span class="variable constant_">DOM</span>事件监听</span><br><span class="line">- 微任务: <span class="title class_">Promise</span>, <span class="keyword">async</span>/<span class="keyword">await</span>, <span class="title function_">mutationobserver</span>(<span class="variable constant_">H5</span>)</span><br><span class="line"></span><br><span class="line">宏队列与微队列</span><br><span class="line">- 宏队列: 用来保存n个宏任务的队列容器</span><br><span class="line">- 微队列: 用来保存n个微任务的队列容器</span><br><span class="line"></span><br><span class="line">event loop</span><br><span class="line">- js-web中的dom事件回调, 定时器回调与ajax回调异步执行, 都是基于event loop   ===&gt; 宏任务</span><br><span class="line">- <span class="variable constant_">H5</span>新的<span class="title class_">MutationObserver</span>也基于event loop   ==&gt; 微任务</span><br><span class="line">- promise成功和失败的回调也是异步执行的, 也是基于event loop  ==&gt; 微任务</span><br><span class="line">- 执行顺序:</span><br><span class="line">  - 第一步: 先执行script下的所有同步代码</span><br><span class="line">  - 第二步: 再依次取出微列中的所有微任务执行</span><br><span class="line">  - 第三步: 再取出宏队列中第一个宏任务执行</span><br><span class="line">  - 再循环第二步与第三步</span><br></pre></td></tr></table></figure><h2 id="8-作用域考题？"><a href="#8-作用域考题？" class="headerlink" title="8.作用域考题？"></a>8.作用域考题？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>除了函数外，js是没有块级作用域</span><br><span class="line"><span class="number">2.</span>作用域链：内部可以访问外部的变量，但是外部不能访问内部的变量</span><br><span class="line">注意：如果内部有，优先查找内部，如果内部没有就查找外部的</span><br><span class="line"><span class="number">3.</span>注意声明变量是用<span class="keyword">var</span>还是没有写(<span class="variable language_">window</span>)</span><br><span class="line"><span class="number">4.</span>注意:js有变量提升的机制(变量悬挂声明)</span><br><span class="line"><span class="number">5.</span>优先级：声明变量&gt;s声明普通函数&gt;参数&gt;变量提升</span><br><span class="line"></span><br><span class="line">面试的时候看：</span><br><span class="line"><span class="number">1.</span>本层的作用域有没有此变量</span><br><span class="line"><span class="number">2.</span>注意：js除了函数外没有块级作用域</span><br><span class="line"><span class="number">3.</span>普通声明函数是不看函数的时候顺序</span><br></pre></td></tr></table></figure><h2 id="9-对象的考题？"><a href="#9-对象的考题？" class="headerlink" title="9.对象的考题？"></a>9.对象的考题？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>对象是通过<span class="keyword">new</span>操作符构建出来的，所以对象之间不相等(除了引用外)</span><br><span class="line"><span class="number">2.</span>对象注意：引用类型(共同一个地址)；</span><br><span class="line"><span class="number">3.</span>对象的key都是字符串类型</span><br><span class="line"><span class="number">4.</span>对象如何找属性和方法</span><br><span class="line">查找规则：先在对象本身找===&gt;构造函数中找===&gt;对象原型上找===&gt;对象上一层原型查找</span><br></pre></td></tr></table></figure><h2 id="10-判断数组的几种方法？"><a href="#10-判断数组的几种方法？" class="headerlink" title="10.判断数组的几种方法？"></a>10.判断数组的几种方法？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">方式一：isArray</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">consloe.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr));</span><br><span class="line">方式二：<span class="keyword">instanceof</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>)</span><br><span class="line">方式三：原型prototype</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(object.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">tostring</span>.<span class="title function_">call</span>(arr).<span class="title function_">indexof</span>(<span class="string">&#x27;Array&#x27;</span>) &gt; -<span class="number">1</span>)</span><br><span class="line">方式四：<span class="title function_">isPrototypeOf</span>()</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPrototypeOf</span>(arr))</span><br><span class="line">方式<span class="number">5</span>：</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="property">constructor</span>.<span class="title function_">tostring</span>().<span class="title function_">indexof</span>(<span class="string">&#x27;Array&#x27;</span>)&gt;-<span class="number">1</span>)</span><br></pre></td></tr></table></figure><h2 id="11-slice是干什么的的？splice是否会改变原数组"><a href="#11-slice是干什么的的？splice是否会改变原数组" class="headerlink" title="11.slice是干什么的的？splice是否会改变原数组"></a>11.slice是干什么的的？splice是否会改变原数组</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>slice是来截取的</span><br><span class="line">参数是可以写<span class="title function_">slice</span>(<span class="number">3</span>)</span><br><span class="line">返回的是一个新的数组</span><br><span class="line"><span class="number">2.</span>splice功能：插入，删除，替换</span><br><span class="line">返回的是删除的元素</span><br><span class="line">该方法会改变原数组</span><br></pre></td></tr></table></figure><h2 id="12-new操作符具体做了什么？"><a href="#12-new操作符具体做了什么？" class="headerlink" title="12.new操作符具体做了什么？"></a>12.new操作符具体做了什么？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建了一个空的对象</span><br><span class="line"><span class="number">2.</span>讲空对象的原型指向构造函数的原型</span><br><span class="line"><span class="number">3.</span>讲空对象作为构造函数的上下文(改变<span class="variable language_">this</span>指向)</span><br><span class="line"><span class="number">4.</span>对构造函数有返回值的处理判断</span><br></pre></td></tr></table></figure><h2 id="13-原型链问题？"><a href="#13-原型链问题？" class="headerlink" title="13.原型链问题？"></a>13.原型链问题？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>原型可以解决什么问题？</span><br><span class="line">原型可以使对象共享属性和方法</span><br><span class="line"><span class="number">2</span>。谁有原型？</span><br><span class="line">函数拥有prototype</span><br><span class="line">对象拥有：——proto——</span><br><span class="line"><span class="number">3.</span>对象查找属性或者方法的顺序</span><br><span class="line">先在对象本身查找--&gt;构造函数中查找--&gt;对象的原型--&gt;构造函数的原型中--&gt;当前原型</span><br><span class="line"><span class="number">4.</span>原型链？</span><br><span class="line"><span class="number">4.1</span> 是什么?就是将原型串联起来</span><br><span class="line"><span class="number">4.2</span>原型链的最顶端是<span class="literal">null</span></span><br></pre></td></tr></table></figure><h2 id="14-js继承有哪些方式？"><a href="#14-js继承有哪些方式？" class="headerlink" title="14.js继承有哪些方式？"></a>14.js继承有哪些方式？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>通过es6得继承方式，在要继承得对象上加上<span class="keyword">extends</span>。并且用<span class="variable language_">super</span>方法</span><br><span class="line"><span class="number">2.</span>通过原型链得继承方式：新得构造函数得原型等于构造函数的原型对象</span><br><span class="line"><span class="number">3.</span>借用构造函数的继承：通过call改变<span class="variable language_">this</span>指向</span><br><span class="line"><span class="number">4.</span>组合式继承：在其构造函数改变<span class="variable language_">this</span>指向，并且将原型对象等于构造函数的实例</span><br></pre></td></tr></table></figure><h2 id="15-说一下call，apply，bind的区别？"><a href="#15-说一下call，apply，bind的区别？" class="headerlink" title="15.说一下call，apply，bind的区别？"></a>15.说一下call，apply，bind的区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>三者的共同点都是在函数内部可以改变<span class="variable language_">this</span>的指向</span><br><span class="line"><span class="number">2</span>。call和apply可以立即执行。bind不会立即执行，因为bind返回的是一个函数需要加入()执行</span><br><span class="line"><span class="number">3.</span>参数不同：apply第二个参数是数组。call和bind有多个参数需要挨个写</span><br></pre></td></tr></table></figure><h2 id="16-localstorage，sessionstorage，cookie的区别？"><a href="#16-localstorage，sessionstorage，cookie的区别？" class="headerlink" title="16.localstorage，sessionstorage，cookie的区别？"></a>16.localstorage，sessionstorage，cookie的区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>公共点：在客户端存放着数据</span><br><span class="line">区别：</span><br><span class="line"><span class="number">1.</span>数据存放有效期</span><br><span class="line">sessionStorage：仅在当前浏览器窗口关闭之前有效。</span><br><span class="line">localStorge：始终有效，窗口或者浏览器关闭也一直保存，所以叫持久化存储</span><br><span class="line">cookie：只在设置的cookie过期时间之前有效，即使窗口或者浏览器关闭也有效</span><br><span class="line"><span class="number">2.</span>存储大小的限制</span><br><span class="line">cookie存储量不能超过4k</span><br><span class="line"><span class="variable language_">localStorage</span>，sessionStorage不能超过5m</span><br><span class="line"></span><br><span class="line">***根据浏览器存储的大小是不同的</span><br></pre></td></tr></table></figure><h2 id="17-对promise得理解？"><a href="#17-对promise得理解？" class="headerlink" title="17.对promise得理解？"></a>17.对promise得理解？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">1。首先Promise是一个构造函数，可以通过 new Promise()得到一个 Promise 的实例；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">2.然后在 Promise 上，有两个函数，分别叫做 resolve（成功之后的回调函数） 和 reject（失败之后的回调函数）</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">3.在 Promise 构造函数的 Prototype原型对象上，有一个 .then() 方法，也就是说，只要是 Promise 构造函数创建的实例，都可以访问到这个  .then() 方法 ；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">4.由于 Promise 的实例，是一个异步操作，所以，内部在拿到结果后，无法使用 return 把结果返回给调用者； 这时候，只能使用回调函数的形式，来将成功 或 失败的结果，返回给调用者；</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5.这个时候我们就可以在 new 出来的 Promise 实例上，调用 .then() 方法，为这个 Promise的异步操作，指定成功（resolve） 和 失败（reject） 回调函数；</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br></pre></td></tr></table></figure><h2 id="18-如果请求不想发了，怎么中断promise？"><a href="#18-如果请求不想发了，怎么中断promise？" class="headerlink" title="18.如果请求不想发了，怎么中断promise？"></a>18.如果请求不想发了，怎么中断promise？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">可以通过抛出一个异常错误来终止</span><br><span class="line"></span><br><span class="line">-或者在then/<span class="keyword">catch</span>后面最后一行返回一个pending状态的promise</span><br><span class="line"></span><br><span class="line">-也可以通过reject来中断</span><br></pre></td></tr></table></figure><h2 id="19-parm参数和query参数的区别？"><a href="#19-parm参数和query参数的区别？" class="headerlink" title="19.parm参数和query参数的区别？"></a>19.parm参数和query参数的区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>query参数是直接拼接在url后面，当页面刷新时，query参数是不会消失的</span><br><span class="line"><span class="number">2.</span>parm参数是是通过id或者name传参，一般不会出现在url路径上，当页面刷新时会消失</span><br></pre></td></tr></table></figure><h1 id="前端协议方面"><a href="#前端协议方面" class="headerlink" title="前端协议方面"></a>前端协议方面</h1><h2 id="1-HTTP状态码及其含义"><a href="#1-HTTP状态码及其含义" class="headerlink" title="1.HTTP状态码及其含义"></a>1.HTTP状态码及其含义</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-<span class="number">200</span> 服务器成功了请求</span><br><span class="line"></span><br><span class="line">-<span class="number">301</span>/<span class="number">302</span> 请求的url地址已移走，response应该包含一个location url</span><br><span class="line"></span><br><span class="line">-<span class="number">304</span> 客服缓存资源是最新的，要客户端使用缓存</span><br><span class="line"></span><br><span class="line">-<span class="number">404</span> 未找到资源</span><br><span class="line"></span><br><span class="line">-<span class="number">501</span> 服务器遇到一个错误，使其无法请求</span><br></pre></td></tr></table></figure><h2 id="2-HTTP协议和HTTPS协议的区别？"><a href="#2-HTTP协议和HTTPS协议的区别？" class="headerlink" title="2.HTTP协议和HTTPS协议的区别？"></a>2.HTTP协议和HTTPS协议的区别？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">-<span class="variable constant_">HTTPS</span>协议需要申请证书</span><br><span class="line">-http是超文本传输协议，信息是a胶传输，http是具有安全性的加密传输协议</span><br><span class="line">-http是<span class="number">80</span>端口,https是<span class="number">443</span></span><br><span class="line">-http是无状态的，https是ssl+http</span><br></pre></td></tr></table></figure><h2 id="3-http缓存机制是什么？"><a href="#3-http缓存机制是什么？" class="headerlink" title="3.http缓存机制是什么？"></a>3.http缓存机制是什么？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http缓存机制分为强缓存和协商机制</span><br><span class="line"></span><br><span class="line">-强缓存是不会向服务器发送请求,直接从缓存中读取资源，在控制台中的network可以看到请求返回<span class="number">200</span>的状态码</span><br><span class="line"></span><br><span class="line">-协商缓存是向服务器发送请求，服务器会根据这个请求的request header的一些参数来判断是否协商缓存，如果命中，则返回<span class="number">304</span>状态码并带上新的response header通知浏览器从缓存中读取资源</span><br><span class="line"></span><br><span class="line">公共点：</span><br><span class="line"><span class="number">1.</span>都是从客户端缓存中读取资源</span><br><span class="line"><span class="number">2.</span>区别是强缓存不用发请求，协商缓存会发送请求</span><br></pre></td></tr></table></figure><h2 id="4-url到页面渲染发生了什么？"><a href="#4-url到页面渲染发生了什么？" class="headerlink" title="4.url到页面渲染发生了什么？"></a>4.url到页面渲染发生了什么？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">首先<span class="variable constant_">DNS</span>解析将域名解析为ip地址</span><br><span class="line"></span><br><span class="line">-然后是tcp三次连接，三次握手</span><br><span class="line"></span><br><span class="line">-然后向服务器发送请求</span><br><span class="line"></span><br><span class="line">-服务器接收响应，将数据传给前台</span><br><span class="line"></span><br><span class="line">-前台根据数据渲染页面</span><br><span class="line"></span><br><span class="line">-断开连接，<span class="variable constant_">TCP</span>四次挥手</span><br></pre></td></tr></table></figure><h1 id="适配会问到的？"><a href="#适配会问到的？" class="headerlink" title="适配会问到的？"></a>适配会问到的？</h1><h2 id="1-移动端适配？"><a href="#1-移动端适配？" class="headerlink" title="1.移动端适配？"></a>1.移动端适配？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">-主流的适配的方式有三种：viewport适配  rem适配  vw适配</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-viewport适配：在拿到设计稿后，设置布局视口宽度为设计稿宽度，然后直接按照设计稿给宽高进行布局，一般用于计算稿小于375，优点是不用复杂的计算，直接使用图稿上标注的px值，缺点是不能用完整的meta标签，会导致某些安卓手机有兼容性问题</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-rem适配：首先设置完美视口，根据设计稿宽度设计根字体的大小，在编写样式的时候，直接以rem为单位，值为设计的值/100</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-vw适配(百分比)</span></span><br><span class="line"><span class="string">  vw和vh是两个相对单位</span></span><br><span class="line"><span class="string">  -1vw = 等于布局视口宽度的1%</span></span><br><span class="line"><span class="string">  -1vh = 等于布局的视口</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br></pre></td></tr></table></figure><h2 id="2-pc端适配？"><a href="#2-pc端适配？" class="headerlink" title="2.pc端适配？"></a>2.pc端适配？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">``</span>js</span><br><span class="line">-使用媒体查询 ：<span class="number">1.</span>根据不同的分辨率，引入不同的css的样式表 <span class="number">2.</span>在用一个css样式表中，根据不同的分辨率写不同的css样式</span><br><span class="line"></span><br><span class="line">-前端框架bootstrap</span><br></pre></td></tr></table></figure><h1 id="项目会问到的问题"><a href="#项目会问到的问题" class="headerlink" title="项目会问到的问题"></a>项目会问到的问题</h1><h2 id="1-在项目中有什么难点？"><a href="#1-在项目中有什么难点？" class="headerlink" title="1.在项目中有什么难点？"></a>1.在项目中有什么难点？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">vue打包时找不到资源文件</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-在config/index.js文件中修改build:&#123;assetsPublicPath: ‘./’&#125;</span></span><br></pre></td></tr></table></figure><h2 id="2-说说在项目中用到了什么方法？"><a href="#2-说说在项目中用到了什么方法？" class="headerlink" title="2.说说在项目中用到了什么方法？"></a>2.说说在项目中用到了什么方法？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">两个重要的方法：</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">vm.$nextTick()与Vue.nextTick()</span></span><br><span class="line"><span class="string">vm.$set()与Vue.set()</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$set(): 给响应式对象添加一个响应属性, 直接通过.xxx的方式添加, 这个属性不是响应式的, 界面不会自动更新</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">$nextTick(callback): 一般是在数据更新之后, 界面更新前调用, 回调函数延迟到界面更新后执行 </span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br></pre></td></tr></table></figure><h2 id="3-平时是怎么二次封装axios？"><a href="#3-平时是怎么二次封装axios？" class="headerlink" title="3.平时是怎么二次封装axios？"></a>3.平时是怎么二次封装axios？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">axios二次封装</span></span><br><span class="line"><span class="string">    1). 配置通用的基础路径和超时</span></span><br><span class="line"><span class="string">    2). 显示请求进度条</span></span><br><span class="line"><span class="string">    3). 成功返回的数据不再是response, 而直接是响应体数据response.data</span></span><br><span class="line"><span class="string">    4). 统一处理请求错误, 具体请求也可以选择处理或不处理</span></span><br><span class="line"><span class="string">    5). 每次请求都携带一个userTempId请求头, 数据值在state中</span></span><br><span class="line"><span class="string">    6). 每次请求(已登陆)都携带一个token请求头, 数据值在state中</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">postman与测试接口</span></span><br><span class="line"><span class="string">定义接口请求函数模块</span></span><br><span class="line"><span class="string">在vuex的异步action中调用接口请求函数</span></span><br><span class="line"><span class="string">将API挂载到Vue的原型对象上, 在组件中调用接口请求函数与后台交互: Vue.prototype.$API = API</span></span><br><span class="line"><span class="string">当后台接口还未完成时, 先mock数据, 可以使用mockjs, 当然有的公司可能有自己的一套</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span></span><br></pre></td></tr></table></figure><h2 id="4-说一下导航栏分类页怎么做的？"><a href="#4-说一下导航栏分类页怎么做的？" class="headerlink" title="4.说一下导航栏分类页怎么做的？"></a>4.说一下导航栏分类页怎么做的？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">``</span><span class="string">``</span>js</span><br><span class="line">-首先使用编程式导航代替声明式导航，因为router-link太多 ==&gt; 创建很多组件对象 ==&gt; 占用内存大, 效率低</span><br><span class="line"></span><br><span class="line">-然后利用事件委托event.<span class="property">target</span>去得到每一个a标签data数据，利用自定义得a标签去保存分类得信息</span><br><span class="line"></span><br><span class="line">-对鼠标移入移出得高频事件做一个节流得处理，利用使用lodash的throttle进行节流处理，并且对lodash库实现按需引入</span><br><span class="line"><span class="string">``</span><span class="string">``</span></span><br></pre></td></tr></table></figure><h2 id="5-说一下登录的流程"><a href="#5-说一下登录的流程" class="headerlink" title="5.说一下登录的流程"></a>5.说一下登录的流程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">首先 输入登陆需要的相关信息(用户名/密码),  进行前台表单校验, 如果不通过, 提示错误</span><br><span class="line"></span><br><span class="line">-前台发送登陆的ajax请求(post), 携带登陆接口需要的相关数据(用户名/密码)</span><br><span class="line"></span><br><span class="line">-后台获取到登陆请求携带的参数, 去数据库中查询看是否存在</span><br><span class="line"></span><br><span class="line">- 如果不存在, 返回登陆失败的信息</span><br><span class="line">- 如果存在, 生成一个新的token字符串, 将token返回或者与用户信息一起返回</span><br><span class="line"></span><br><span class="line">-前台: 接收到响应</span><br><span class="line"></span><br><span class="line">- 如果是不成功的数据, 提示</span><br><span class="line">- 如果是成功的数据, </span><br><span class="line">  - 将用户信息和token都保存到vuex中</span><br><span class="line">  - 跳转到首页或redirect页面</span><br><span class="line"><span class="string">``</span><span class="string">`</span></span><br></pre></td></tr></table></figure><h2 id="6-说一下注册的流程"><a href="#6-说一下注册的流程" class="headerlink" title="6.说一下注册的流程"></a>6.说一下注册的流程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`js</span></span><br><span class="line"><span class="string">-首先前台输入注册需要的相关信息(用户名/密码/...), 进行前台表单校验, 如果不通过, 提示错误</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-然后发送注册的ajax请求(post), 携带注册接口需要的相关数据(用户名/密码/...)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">-后台获取到注册请求携带得参数后去数据库判断是否已经存在，如果存在返回提示此用户已经存在得信息，如果不存在，保存到数据库，返回成功得数据</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">-前台接受到后台得响应后，如果成功自动跳转到登录页面，不成功则提示 </span></span><br></pre></td></tr></table></figure><h2 id="7-说一下后台的一些技能点？"><a href="#7-说一下后台的一些技能点？" class="headerlink" title="7.说一下后台的一些技能点？"></a>7.说一下后台的一些技能点？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先用的模板项目: vue-admin-template，然后用element-ui快速搭建项目界面</span><br><span class="line"><span class="number">2.</span>使用深度修改器修改第三方ui组件的内部样式</span><br><span class="line">  结论: </span><br><span class="line">        不使用<span class="attr">scoped</span>: 可以修改外部/子组件(第三方组件)内部的任意标签样式 (全局)</span><br><span class="line">        scoped样式: </span><br><span class="line">          不准确: 让样式只能作用于当前组件, 不能作用于其它组件(子组件/外部组件) </span><br><span class="line">          准确: 只能作用于当前组件和子组件内的根标签</span><br><span class="line">        深度作用域选择器(::v-deep): 可以修改子组件(第三方组件)内部的样式</span><br><span class="line"><span class="number">3.</span>使用lodash库的cloneDeep在平台属性页面取消深拷贝</span><br></pre></td></tr></table></figure><h2 id="8-项目的权限管理？"><a href="#8-项目的权限管理？" class="headerlink" title="8.项目的权限管理？"></a>8.项目的权限管理？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>前端权限控制本质来说，就是控制前端，视图层的展示和前端所发送的请求，但是只有前端权限控制没有后端权限控制是万万不可得</span><br><span class="line"><span class="number">2.</span>前端权限的控制，主要有几方面好处</span><br><span class="line"><span class="number">1.</span>降低非法操作性</span><br><span class="line"><span class="number">2.</span>尽可能排除不必要的请求，减轻服务器的压力</span><br><span class="line"><span class="number">3.</span>提高用户体验</span><br></pre></td></tr></table></figure><h2 id="9-前端权限控制思路"><a href="#9-前端权限控制思路" class="headerlink" title="9.前端权限控制思路"></a>9.前端权限控制思路</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>菜单的控制</span><br><span class="line">在登录请求中，会得到后端返回的权限数据，前端根据权限数据，去展示对应的菜单，点击菜单才能查看相关的界面，权限数据需要多组件中共享，所以采用vuex，为了防止刷新界面，权限数据丢失，需要存储到sessiobStorage，并且保证两者同步</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>界面的控制</span><br><span class="line"><span class="number">1.</span>如果用户手动在地址栏输入管理层的地址，则需要跳转到登陆界面，利用路由的导航守卫可以防止跳过登陆界面，如果当前是在登录页面则获取token，判断用户是否登录过，如果没有token则返回登录页面，有token则放行</span><br><span class="line"><span class="number">2.</span>为了防止用户手动输入非权限的地址，这时候可以使用动态路由让用户不具备权限的路由不存在并且跳转到<span class="number">404</span>界面，根据用户的权限数据来决定动态添加的路由规则，先将权限路由定义为对象，然后根据二级权限对路由规则进行动态的添加，将方法在登录页进行按需导入并且调用这个方法，</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>按钮控制</span><br><span class="line"><span class="number">1.</span>通过自定义指令，v-permission实现按钮的控制，根据用户权限数据对 按钮进行绑定v-permission让他当前路由下用户是否具备要求，创建一个permission的js文件，然后通过vue.<span class="property">directive</span>来注册指令，判断当前路由所对应的组件中，通过meta增加路由的权限数据。用currentRoute获取，然后用indexof判断当前路由的权限数据有没有action权限，如果没有权限则将标签的父标签进行删除这个元素，也可以通过<span class="attr">effect</span>:disabled来禁用当前按钮，在permission文件中先去获取到，然后进行判断是否是禁用，否则就删除  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>请求和响应控制</span><br><span class="line">除了每次登录外都需要携带token，需要二次封装axios，添加请求拦截器和响应拦截器，在请求头上加上token,为了阻止用户通过调试接口来改变页面按钮并且发送无效的请求，在axios中判断非权限范围内的请求，通过currentRouter.<span class="property">meta</span>获取当前路由规则的权限数据，通过restfu风格的请求判断当前请求的行为，通过请求方式判断请求行为，通过req.<span class="property">method</span>得到当前请求方式和行为，然后得到当前路由得权限数据，判断当前权限数据有没有当前行为，没有则提示没有权限</span><br><span class="line"></span><br><span class="line">如果用户长期在页面没有操作token超时了，应该重新返回到登录页，通过响应拦截器中，判断返回得数据得状态吗如果返回得是<span class="number">401</span>则跳转到登录，然后将sessionage清空，以及将vuex得数据清空</span><br></pre></td></tr></table></figure><h1 id="项目优化问题"><a href="#项目优化问题" class="headerlink" title="项目优化问题"></a>项目优化问题</h1><h2 id="1-项目白屏问题"><a href="#1-项目白屏问题" class="headerlink" title="1.项目白屏问题"></a>1.项目白屏问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>、开启gzip压缩减小文件体积。</span><br><span class="line"><span class="number">2</span>、webpack设置<span class="attr">productionSourceMap</span>:<span class="literal">false</span>，不在线上环境打包.<span class="property">map</span>文件。</span><br><span class="line"><span class="number">3</span>、路由懒加载</span><br><span class="line"><span class="number">4</span>、异步组件的使用</span><br><span class="line"><span class="number">5</span>、静态资源使用cdn链接引入</span><br><span class="line"><span class="number">6</span>、采用ssr服务端渲染方案</span><br><span class="line"><span class="number">7</span>、骨架屏或者loading效果填充空白间隙</span><br><span class="line"><span class="number">8</span>、首次不渲染的隐藏采用v-<span class="keyword">if</span></span><br><span class="line"><span class="number">9</span>、注重代码规范：抽取公共组件，公共js，公共css样式，减小代码体积。删除无用代码，减少非必要注释。防止写出死循环等等</span><br><span class="line"><span class="number">10</span>、删除辅助开发的<span class="variable language_">console</span>.<span class="property">log</span></span><br><span class="line"><span class="number">11</span>、非<span class="title class_">Vue</span>角度思考：非重要文件采用异步加载方式、css样式采用媒体查询、采用域名分片技术、http1升级成http2、如果是<span class="variable constant_">SSR</span>项目考虑服务端渲染有没有可优化的点、请求头是否带了多余信息等思路</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2的相关问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>项目的基本需求</title>
      <link href="/2023/01/06/%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%9C%80%E6%B1%82/"/>
      <url>/2023/01/06/%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%9F%BA%E6%9C%AC%E9%9C%80%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="项目的一些基本操作"><a href="#项目的一些基本操作" class="headerlink" title="项目的一些基本操作"></a>项目的一些基本操作</h1><h1 id="后台管理项目的基本流程"><a href="#后台管理项目的基本流程" class="headerlink" title="后台管理项目的基本流程"></a>后台管理项目的基本流程</h1><h2 id="1-项目构建"><a href="#1-项目构建" class="headerlink" title="1.项目构建"></a>1.项目构建</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>vue create  xxx <span class="comment">//用vue create创建项目</span></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>&lt;!--css预处理器的安装sass,less--&gt;</span><br><span class="line">npm i sass-loader@<span class="number">7</span> node-sass@<span class="number">4</span> -S</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>&lt;!--less的安装--&gt;</span><br><span class="line">npm i less@<span class="number">3</span> less-loader@<span class="number">7</span> -S</span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>&lt;!--css的样式重置官网可以将页面初始化--&gt;</span><br><span class="line">官网:<span class="attr">https</span>:<span class="comment">//meyerweb.com/eric/tools/css/reset/</span></span><br><span class="line">在 assets 中新建一个 css 文件创建一个 reset.<span class="property">css</span> 将代码引入，在 app.<span class="property">vue</span> 中的样式中进行引入@<span class="keyword">import</span> <span class="title function_">url</span>(<span class="string">&quot;./assets/css/reset.css&quot;</span>);<span class="comment">//可以使页面初始化</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>&lt;!--引入字体图标安装命令 在main.<span class="property">js</span>中引入字体图标库，在网页中使用--&gt;</span><br><span class="line">npm i -D font-awesome</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;font-awesome/css/font-awesome.min.css&#x27;</span><span class="comment">//在main.js中引入</span></span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>!--引入axios请求命令的安装，在main.<span class="property">js</span>中全局引入axios，将axios挂载到原型上，后续可以将二次axios引入进来--&gt;</span><br><span class="line">npm i axios -S</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>新建一个server.<span class="property">js</span>的文件，里面写上二次封装axios，并且将其在main.<span class="property">js</span>中引入</span><br><span class="line"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">&quot;./service&quot;</span>; <span class="comment">//引入二次封装axios</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">service</span> = service;</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>引入element-ui可以全局也可以按需引入详细看官网</span><br><span class="line">npm i element-ui -S<span class="comment">//全局注册</span></span><br><span class="line">&lt;!--可以全局引入也可以按需引入，在main.<span class="property">js</span>中直接使用--&gt;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">ElementUI</span> <span class="keyword">from</span> <span class="string">&#x27;element-ui&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;element-ui/lib/theme-chalk/index.css&#x27;</span>;</span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">ElementUI</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>&lt;!--引入安装路由router，并且创建router文件,引入并创建相关的也能用，最后在main.<span class="property">js</span>中全局引入router，并且挂载在vue的原型上--&gt;</span><br><span class="line">npm i vue-router@<span class="number">3.5</span><span class="number">.3</span> -S</span><br><span class="line"><span class="comment">//全局引入router</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">&quot;./router&quot;</span>;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  router, <span class="comment">//在渲染之前挂载到vue上</span></span><br><span class="line">  <span class="attr">render</span>: <span class="function">(<span class="params">h</span>) =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">&#125;).$mount(<span class="string">&quot;#app&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>&lt;!--配置完路由要在app.<span class="property">vue</span>中设置出口router-view--&gt;</span><br><span class="line">   <span class="language-xml"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>&lt;!--在router中舍弃掉以前的<span class="keyword">import</span>引入的方式在路由中使用懒加载引用--&gt;</span><br><span class="line"><span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;../components/Home&#x27;</span>) <span class="comment">//路由懒加载的形式</span></span><br><span class="line"></span><br><span class="line"><span class="number">12.</span>&lt;!--推荐正则的插件any-rule ,在页面中按下f1--&gt;</span><br><span class="line">    </span><br><span class="line"><span class="number">13.</span>跨域请求的先创建vue.<span class="property">config</span>.<span class="property">js</span>文件</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">proxy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">        <span class="comment">//帮忙给转发到的目标服务器</span></span><br><span class="line">        <span class="attr">target</span>: <span class="string">&quot;http://1.116.64.64:5004/api2/&quot;</span>,</span><br><span class="line">        <span class="attr">changeOrigin</span>: <span class="literal">true</span>,<span class="comment">//是否允许跨域</span></span><br><span class="line">        <span class="attr">pathRewrite</span>: &#123;</span><br><span class="line">          <span class="string">&quot;^/api&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">14.</span>创建api，在里面写上请求的接口</span><br><span class="line"><span class="comment">//项目中我们一般都会把对应的接口请求封装成api来调用</span></span><br><span class="line"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">&quot;../service.js&quot;</span>;</span><br><span class="line"><span class="comment">//封装登录接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">login</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">    data,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="2-登录的过程"><a href="#2-登录的过程" class="headerlink" title="2.登录的过程"></a>2.登录的过程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>登录页先创建login，在router里面创建login路由</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/&quot;</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&quot;/login&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>:<span class="string">&quot;首页&quot;</span>,</span><br><span class="line">      <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../components/Login&quot;</span>),</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line"><span class="number">2.</span>在login页面中，用element-ui中的表单和卡片进行创建样式</span><br><span class="line">      &lt;el-card <span class="keyword">class</span>=<span class="string">&quot;box-card&quot;</span>&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">slot</span>=<span class="string">&quot;header&quot;</span> <span class="attr">class</span>=<span class="string">&quot;clearfix&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span>&gt;</span>后台管理系统<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">label-width</span>=<span class="string">&quot;80px&quot;</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;用户名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;username&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.username&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;密码&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;form.password&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;login(&#x27;form&#x27;)&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line">    &lt;/el-card&gt;</span><br><span class="line">      </span><br><span class="line"><span class="number">3.</span>最重要的就是登录的表单验证，对每一个表单要进行规则验证</span><br><span class="line">:model=<span class="string">&quot;form&quot;</span> ref=<span class="string">&quot;form&quot;</span> :rules=<span class="string">&quot;rules&quot;</span></span><br><span class="line">      </span><br><span class="line"><span class="number">4.</span>通过props来绑定规则的对象</span><br><span class="line">prop=<span class="string">&quot;username&quot;</span>  prop=<span class="string">&quot;password&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>将登录的校验规则进行封装，创建一个utils文件，里面写上封装的组件</span><br><span class="line"><span class="comment">//用户名匹配</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">nameRule</span>(<span class="params">rule, value, callback</span>) &#123;</span><br><span class="line">    <span class="comment">//用正则校验 ，请输入4-10位的昵称</span></span><br><span class="line">    <span class="keyword">let</span> reg = <span class="regexp">/(^[a-zA-Z0-9]&#123;4,10&#125;$)/</span>;</span><br><span class="line">    <span class="keyword">if</span> (value === <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;请输入用户名&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!reg.<span class="title function_">test</span>(value)) &#123;</span><br><span class="line">        <span class="title function_">callback</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;请输入4-10位用户名&quot;</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">callback</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">      </span><br><span class="line"><span class="number">6.</span>在data中将用户收集的信息进行存放</span><br><span class="line"><span class="attr">form</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>定义rulr规则</span><br><span class="line"> <span class="attr">rules</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: [&#123; <span class="attr">validator</span>: nameRule, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;],</span><br><span class="line">        <span class="attr">password</span>: [&#123; <span class="attr">validator</span>: passRule, <span class="attr">trigger</span>: <span class="string">&quot;blur&quot;</span> &#125;],</span><br><span class="line">      &#125;,</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>登录页面封装token，因为要经常存入token和拿出来，并且登录成功后将用户信息返回回来</span><br><span class="line"><span class="number">9.</span>先创建一个setToken的文件，写上封装token的方法，将token放到<span class="variable language_">localStorage</span>进行保存，拿出，移除</span><br><span class="line"><span class="comment">//封装token,存入token</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">setToken</span>(<span class="params">tokenKey, token</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(tokenKey, token)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>在登录页面引入文件，在登录上创建点击事件，这种请求是没有用到vuex的情况直接引用接口</span><br><span class="line"><span class="keyword">import</span> &#123; nameRule, passRule &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/vaildate.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; setToken &#125; <span class="keyword">from</span> <span class="string">&quot;../utils/setToken.js&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; login &#125; <span class="keyword">from</span> <span class="string">&quot;../api/api.js&quot;</span>;</span><br><span class="line">     </span><br><span class="line"><span class="number">11.</span>在message中写上登录请求，先检验form表单用validate方法，然后判断检验是否通过，如果通过就向后台发送请求，将表单提交，如果请求成功则将信息存入setToken中，setToken即为封装的token，保存到<span class="variable language_">localStorage</span>,并提示登录成功，然后跳转到首页，否则提示登录失败，或者是检验失败</span><br><span class="line"><span class="title function_">login</span>(<span class="params">form</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>[form].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>, form);</span><br><span class="line">          <span class="title function_">login</span>(<span class="variable language_">this</span>.<span class="property">form</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">              <span class="title function_">setToken</span>(<span class="string">&quot;username&quot;</span>, res.<span class="property">data</span>.<span class="property">username</span>);</span><br><span class="line">              <span class="title function_">setToken</span>(<span class="string">&quot;token&quot;</span>, res.<span class="property">data</span>.<span class="property">token</span>);</span><br><span class="line">              <span class="variable language_">this</span>.$message(&#123; <span class="attr">message</span>: res.<span class="property">data</span>.<span class="property">message</span>, <span class="attr">type</span>: <span class="string">&quot;success&quot;</span> &#125;);</span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">$router</span>.<span class="title function_">push</span>(<span class="string">&quot;/home&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="variable language_">this</span>.<span class="property">form</span>);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line">登录所遇到的几大坑。</span><br><span class="line"><span class="number">1.</span>遇到背景图无法铺满整个屏幕要将app.<span class="property">vue</span>的全局样式的上边距改为<span class="number">0</span></span><br><span class="line">     </span><br><span class="line"><span class="number">2.</span>要下载core.<span class="property">js</span>防止报错无法运行 npm i core-js  </span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>当你什么都搞好但是出现报错一直显示<span class="number">404</span>。无法跳转到首页，这个时候要重新启动项目</span><br></pre></td></tr></table></figure><h2 id="3-首页的过程"><a href="#3-首页的过程" class="headerlink" title="3.首页的过程"></a>3.首页的过程</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>构建首页的布局，因为首页包括了头部，底部，侧边栏，面包屑，分页面，所以将这些组件分为子组件，然后在首页进行引入，我们用到element-ui的布局方式。将子组件注册定义使用。</span><br><span class="line">&lt;div <span class="keyword">class</span>=<span class="string">&quot;home&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Header</span>&gt;</span><span class="tag">&lt;/<span class="name">Header</span>&gt;</span></span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-container</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">Menu</span>&gt;</span><span class="tag">&lt;/<span class="name">Menu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Bread</span>&gt;</span><span class="tag">&lt;/<span class="name">Bread</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cont&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-main</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">Footer</span>&gt;</span><span class="tag">&lt;/<span class="name">Footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-footer</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-container</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Header</span> <span class="keyword">from</span> <span class="string">&quot;./common/Header.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Footer</span> <span class="keyword">from</span> <span class="string">&quot;./common/Footer.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Menu</span> <span class="keyword">from</span> <span class="string">&quot;./common/Menu.vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Bread</span> <span class="keyword">from</span> <span class="string">&quot;./common/Breadcrumb.vue&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&quot;Home&quot;</span>,</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;&#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">components</span>: &#123;</span><br><span class="line">    <span class="title class_">Header</span>,</span><br><span class="line">    <span class="title class_">Footer</span>,</span><br><span class="line">    <span class="title class_">Menu</span>,</span><br><span class="line">    <span class="title class_">Bread</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>侧边栏放着是子路由，所以我在compoments中创建子路由，并且在router中将要展示的第一个路由为重定向并且在下面写上子路由</span><br><span class="line"> &#123;</span><br><span class="line">      <span class="attr">path</span>: <span class="string">&quot;/home&quot;</span>,</span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;学生管理&quot;</span>,</span><br><span class="line">      <span class="attr">iconClass</span>: <span class="string">&quot;fa fa-users&quot;</span>,</span><br><span class="line">      <span class="attr">redirect</span>: <span class="string">&quot;/home/student&quot;</span>, <span class="comment">//重定向</span></span><br><span class="line">      <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../components/Home&quot;</span>),</span><br><span class="line">      <span class="attr">children</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;/home/student&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;学生列表&quot;</span>,</span><br><span class="line">          <span class="attr">iconClass</span>: <span class="string">&quot;fa fa-list&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../components/students/StudentList&quot;</span>),</span><br><span class="line">          <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;学生列表&#x27;</span>&#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;/home/inter&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;信息列表&quot;</span>,</span><br><span class="line">          <span class="attr">iconClass</span>: <span class="string">&quot;fa fa-list-alt&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../components/students/interList&quot;</span>),</span><br><span class="line">          <span class="attr">meta</span>:&#123;<span class="attr">title</span>:<span class="string">&#x27;信息列表&#x27;</span>&#125;</span><br><span class="line">          </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;/home/infos&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;信息管理&quot;</span>,</span><br><span class="line">          <span class="attr">iconClass</span>: <span class="string">&quot;fa fa-list-alt&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../components/students/infoLists&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;/home/work&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;作业列表&quot;</span>,</span><br><span class="line">          <span class="attr">iconClass</span>: <span class="string">&quot;fa fa-list-ul&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../components/students//WorkList&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">path</span>: <span class="string">&quot;/home/works&quot;</span>,</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;作业管理&quot;</span>,</span><br><span class="line">          <span class="attr">iconClass</span>: <span class="string">&quot;fa fa-th-list&quot;</span>,</span><br><span class="line">          <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&quot;../components/students/WorkMent&quot;</span>),</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line"><span class="number">3.</span>路由创建完可以开始写头部的样式信息，比较简单，头部的用户要在creat中去拿到token里的用户信息，因为登录的时候已经保存到了locostorge中</span><br><span class="line"><span class="keyword">import</span> &#123; getToken &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/setToken.js&quot;</span>;</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = <span class="title function_">getToken</span>(<span class="string">&quot;username&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="number">4.</span>头部写完写底部，比较简单，加一些样式即可</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>侧边栏，侧边栏用到了element-ui的样式，然后获取当前的所有的路由，然后开始渲染一级路由和二级路由。</span><br><span class="line">   &lt;div <span class="keyword">class</span>=<span class="string">&quot;menu&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-aside</span> <span class="attr">width</span>=<span class="string">&quot;200px&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-menu</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">router</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">default-active</span>=<span class="string">&quot;2&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">class</span>=<span class="string">&quot;el-menu-vertical-demo&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">background-color</span>=<span class="string">&quot;#2578b5&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">text-color</span>=<span class="string">&quot;#fff&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">active-text-color</span>=<span class="string">&quot;#ffd04b&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in menus&quot;</span>&gt;</span>  //一级路由的遍历</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-submenu</span> <span class="attr">:index</span>=<span class="string">&quot;index + &#x27;&#x27;&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;!item.hidden&quot;</span>&gt;</span>//对应的路由地址点击切换</span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;title&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;item.iconClass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">el-menu-item-group</span>  //<span class="attr">二级路由遍历</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">v-for</span>=<span class="string">&quot;(child, index) in item.children&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">              <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span></span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;<span class="name">el-menu-item</span> <span class="attr">:index</span>=<span class="string">&quot;child.path&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                <span class="tag">&lt;<span class="name">i</span> <span class="attr">:class</span>=<span class="string">&quot;child.iconClass&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">                &#123;&#123; child.name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">              <span class="tag">&lt;/<span class="name">el-menu-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;/<span class="name">el-menu-item-group</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-submenu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-menu</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-aside</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt; </span><br><span class="line"></span><br><span class="line">            </span><br><span class="line"> <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">menus</span>: [],<span class="comment">//创建一个空数组</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">options</span>.<span class="property">routes</span>); <span class="comment">//查看所有得路由</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$route</span>.<span class="property">matched</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">menus</span> = [...<span class="variable language_">this</span>.<span class="property">$router</span>.<span class="property">options</span>.<span class="property">routes</span>];<span class="comment">//将所有的路由放到空数组里面进行展开，方便后面遍历</span></span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line"><span class="number">6.</span>侧边栏写完开始写面包屑，运用到$route.<span class="property">matche</span>方法得到当前点击的路由对象，并且将其遍历</span><br><span class="line">   &lt;div&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">el-card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-breadcrumb</span> <span class="attr">separator-class</span>=<span class="string">&quot;el-icon-arrow-right&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-breadcrumb-item</span> <span class="attr">:to</span>=<span class="string">&quot;&#123; path: &#x27;/&#x27; &#125;&quot;</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">el-breadcrumb-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-breadcrumb-item</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, index) in $route.matched&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            &gt;</span>&#123;&#123;item.name&#125;&#125;&lt;/el-breadcrumb-item</span></span><br><span class="line"><span class="language-xml">          &gt;  </span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-breadcrumb</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-card</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="4-二级路由的编写-学生列表"><a href="#4-二级路由的编写-学生列表" class="headerlink" title="4.二级路由的编写(学生列表)"></a>4.二级路由的编写(学生列表)</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>利用element-ui去构建样式，利用form表单和表格(el-table)以及分页构建样式</span><br><span class="line">&lt;el-form</span><br><span class="line">      :inline=<span class="string">&quot;true&quot;</span></span><br><span class="line">      :model=<span class="string">&quot;formInline&quot;</span></span><br><span class="line">      <span class="keyword">class</span>=<span class="string">&quot;demo-form-inline&quot;</span></span><br><span class="line">      size=<span class="string">&quot;small&quot;</span></span><br><span class="line">    &gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-input</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">v-model</span>=<span class="string">&quot;formInline.name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">placeholder</span>=<span class="string">&quot;请输入姓名查询&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;find&quot;</span>&gt;</span>查询<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;reset&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line">    &lt;/el-form&gt;</span><br><span class="line">    &lt;!--<span class="number">1</span>:<span class="number">1</span>-<span class="number">10</span> <span class="number">2</span>:<span class="number">11</span>-<span class="number">20</span> <span class="title function_">slice</span>(当前页数 - <span class="number">1</span>)*每页条数,当前的页数*当前条数--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;compData&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span>//:data=&quot;tableData&quot;渲染初始化数据</span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;sex_text&quot;</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;number&quot;</span> <span class="attr">label</span>=<span class="string">&quot;学号&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;class&quot;</span> <span class="attr">label</span>=<span class="string">&quot;班级&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;state_text&quot;</span> <span class="attr">label</span>=<span class="string">&quot;状态&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span> <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;phone&quot;</span> <span class="attr">label</span>=<span class="string">&quot;联系方式&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">click</span>=<span class="string">&quot;del(scope.row)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;!--分页--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-pagination</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">size-change</span>=<span class="string">&quot;handleSizeChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">current-change</span>=<span class="string">&quot;handleCurrentChange&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:current-page</span>=<span class="string">&quot;currentPage&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:page-sizes</span>=<span class="string">&quot;[5, 10, 20, 30]&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:page-size</span>=<span class="string">&quot;pageSize&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">layout</span>=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:total</span>=<span class="string">&quot;total&quot;</span>//<span class="attr">总条数</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-pagination</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>在api写请求数据</span><br><span class="line"><span class="comment">//学生列表的查询接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">students</span>(<span class="params">params</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/students&quot;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学生列表的删除接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">studentDel</span>(<span class="params">id</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;delete&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/students/<span class="subst">$&#123;id&#125;</span>`</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>进行请求数据并且将数据渲染</span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">tableData</span>: [],将请求的数据进行保存</span><br><span class="line">      <span class="attr">currentPage</span>: <span class="number">1</span>, <span class="comment">//当前的页数</span></span><br><span class="line">      <span class="attr">pageSize</span>: <span class="number">10</span>, <span class="comment">//每页显示的条数</span></span><br><span class="line">      <span class="attr">total</span>: <span class="number">0</span>, <span class="comment">//总条数</span></span><br><span class="line">      <span class="attr">formInline</span>: &#123;</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getData</span>();<span class="comment">//将方法放到mouted中进行调用</span></span><br><span class="line">  &#125;,</span><br><span class="line"><span class="number">4.</span> 在methords中进行使用方法请求数据</span><br><span class="line"> <span class="title function_">getData</span>(<span class="params">params</span>) &#123;</span><br><span class="line">      <span class="title function_">students</span>(params).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="comment">//请求数据</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">total</span>;<span class="comment">//将数据中的总条数放到总条数中</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">data</span>.<span class="property">data</span>;<span class="comment">//将数据放到tableData中</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">tableData</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">            item.<span class="property">sex</span> === <span class="number">1</span> ? (item.<span class="property">sex_text</span> = <span class="string">&quot;男&quot;</span>) : (item.<span class="property">sex_text</span> = <span class="string">&quot;女&quot;</span>);</span><br><span class="line">            item.<span class="property">state</span> === <span class="string">&quot;1&quot;</span></span><br><span class="line">              ? (item.<span class="property">state_text</span> = <span class="string">&quot;已入学&quot;</span>)</span><br><span class="line">              : item.<span class="property">state</span> === <span class="string">&quot;2&quot;</span></span><br><span class="line">              ? (item.<span class="property">state_text</span> = <span class="string">&quot;未入学&quot;</span>)</span><br><span class="line">              : (item.<span class="property">state_text</span> = <span class="string">&quot;休学中&quot;</span>);</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"> <span class="number">5.</span>将分页的数据进行保存并且将数据渲染</span><br><span class="line">  <span class="attr">currentPage</span>: <span class="number">1</span>, <span class="comment">//当前的页数</span></span><br><span class="line">      <span class="attr">pageSize</span>: <span class="number">10</span>, <span class="comment">//每页显示的条数</span></span><br><span class="line">      <span class="attr">total</span>: <span class="number">0</span>, <span class="comment">//总条数</span></span><br><span class="line">          </span><br><span class="line"> <span class="number">6.</span>数据上的性别和状态均已数字代替，此时需要进行判断遍历返回给item进行重新渲染</span><br><span class="line">   <span class="variable language_">this</span>.<span class="property">tableData</span>.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;<span class="comment">//将数据进行遍历</span></span><br><span class="line">            item.<span class="property">sex</span> === <span class="number">1</span> ? (item.<span class="property">sex_text</span> = <span class="string">&quot;男&quot;</span>) : (item.<span class="property">sex_text</span> = <span class="string">&quot;女&quot;</span>);</span><br><span class="line">            item.<span class="property">state</span> === <span class="string">&quot;1&quot;</span></span><br><span class="line">              ? (item.<span class="property">state_text</span> = <span class="string">&quot;已入学&quot;</span>)</span><br><span class="line">              : item.<span class="property">state</span> === <span class="string">&quot;2&quot;</span></span><br><span class="line">              ? (item.<span class="property">state_text</span> = <span class="string">&quot;未入学&quot;</span>)</span><br><span class="line">              : (item.<span class="property">state_text</span> = <span class="string">&quot;休学中&quot;</span>);</span><br><span class="line">          &#125;);</span><br><span class="line"><span class="number">7.</span>点击下一页和每页的条数进行渲染，用计算属性slice对数据进行切割并返回 </span><br><span class="line"> &lt;!--<span class="number">1</span>:<span class="number">1</span>-<span class="number">10</span> <span class="number">2</span>:<span class="number">11</span>-<span class="number">20</span> <span class="title function_">slice</span>(当前页数 - <span class="number">1</span>)*每页条数,当前的页数*当前条数--&gt;</span><br><span class="line"> <span class="title function_">compData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">tableData</span>.<span class="title function_">slice</span>(</span><br><span class="line">        (<span class="variable language_">this</span>.<span class="property">currentPage</span> - <span class="number">1</span>) * <span class="variable language_">this</span>.<span class="property">pageSize</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentPage</span> * <span class="variable language_">this</span>.<span class="property">pageSize</span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line"><span class="number">8.</span>查找和重置都是在数据有的方法直接用，放上两个点击事件</span><br><span class="line"> <span class="comment">//查询</span></span><br><span class="line">    <span class="title function_">find</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getData</span>(<span class="variable language_">this</span>.<span class="property">formInline</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//重置</span></span><br><span class="line">    <span class="title function_">reset</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="title function_">getData</span>(<span class="variable language_">this</span>.<span class="property">formInline</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">formInline</span> = &#123;&#125;;</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line"><span class="number">9.</span>点击删除，添加点击事件，发送请求将点击的id闯过去</span><br><span class="line">  <span class="title function_">del</span>(<span class="params">row</span>)&#123;<span class="comment">//row当前变格的对象</span></span><br><span class="line">      <span class="title function_">studentDel</span>(row.<span class="property">id</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="keyword">if</span>(res.<span class="property">data</span>.<span class="property">status</span> === <span class="number">200</span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.$message(&#123;<span class="attr">message</span>:<span class="string">&quot;删除数据成功&quot;</span>,<span class="attr">type</span>:<span class="string">&#x27;success&#x27;</span>&#125;);</span><br><span class="line">          <span class="variable language_">this</span>.<span class="title function_">getData</span>();<span class="comment">//重新发送请求</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="5-信息列表的增删改查"><a href="#5-信息列表的增删改查" class="headerlink" title="5.信息列表的增删改查"></a>5.信息列表的增删改查</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>先搭配页面的静态页面，包括弹窗等。</span><br><span class="line"> &lt;div <span class="keyword">class</span>=<span class="string">&quot;infoList&quot;</span>&gt;</span><br><span class="line">     <span class="comment">//新增按钮的表头</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:inline</span>=<span class="string">&quot;true&quot;</span> <span class="attr">class</span>=<span class="string">&quot;demo-form-inline&quot;</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;addStudent&quot;</span>&gt;</span>新增<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;!--表单内容--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-table</span> <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span> <span class="attr">border</span> <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;sex&quot;</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">prop</span>=<span class="string">&quot;father&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;父亲&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">prop</span>=<span class="string">&quot;mather&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;母亲&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;家庭住址&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">prop</span>=<span class="string">&quot;time&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;入校时间&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">prop</span>=<span class="string">&quot;phone&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">label</span>=<span class="string">&quot;联系方式&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        <span class="attr">align</span>=<span class="string">&quot;center&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      &gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;操作&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">template</span>  <span class="attr">slot-scope</span>=<span class="string">&quot;scope&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">icon</span>=<span class="string">&quot;el-icon-edit&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">click</span>=<span class="string">&quot;edit(scope.row)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-button</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;danger&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">size</span>=<span class="string">&quot;mini&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">icon</span>=<span class="string">&quot;el-icon-delete&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            @<span class="attr">click</span>=<span class="string">&quot;del(scope.row)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">    &lt;!--弹框--&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">el-dialog</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">title</span>=<span class="string">&quot;添加学生信息&quot;</span>//<span class="attr">标题</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogFormVisible&quot;</span>//<span class="attr">控制显示和隐藏</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span>//<span class="attr">表单的总大小</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">el-form</span> <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> <span class="attr">:rules</span>=<span class="string">&quot;rules&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span>&gt;</span>//对表单进行验证规则rules</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span>&gt;</span>//formLabelWidth 表单的大小</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.name&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span> //绑定输入框的内容</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;sex&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;form.sex&quot;</span> <span class="attr">label</span>=<span class="string">&quot;1&quot;</span>&gt;</span>男<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-radio</span> <span class="attr">v-model</span>=<span class="string">&quot;form.sex&quot;</span> <span class="attr">label</span>=<span class="string">&quot;2&quot;</span>&gt;</span>女<span class="tag">&lt;/<span class="name">el-radio</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.age&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;父亲姓名&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">prop</span>=<span class="string">&quot;father&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.father&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;母亲名字&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">prop</span>=<span class="string">&quot;mather&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.mather&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;家庭住址&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.address&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;入校时间&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">prop</span>=<span class="string">&quot;time&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-date-picker</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">v-model</span>=<span class="string">&quot;form.time&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">format</span>=<span class="string">&quot;yyyy 年 MM 月 dd 日&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">type</span>=<span class="string">&quot;date&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">placeholder</span>=<span class="string">&quot;选择日期&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-form-item</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">label</span>=<span class="string">&quot;联系方式&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">:label-width</span>=<span class="string">&quot;formLabelWidth&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">          <span class="attr">prop</span>=<span class="string">&quot;phone&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model</span>=<span class="string">&quot;form.phone&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;dialog-footer&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;closeInfo(&#x27;form&#x27;)&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;sure(form)&quot;</span>&gt;</span>确定<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>将收集的表单数据进行定义在data中，并且写上表单规则</span><br><span class="line"> <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">tableData</span>: [],</span><br><span class="line">      <span class="attr">dialogFormVisible</span>: <span class="literal">false</span>,  <span class="comment">//弹窗默认为false</span></span><br><span class="line">      <span class="attr">form</span>: &#123;  <span class="comment">//收集的内容信息</span></span><br><span class="line">        <span class="attr">name</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">sex</span>: <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">father</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">mather</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">address</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">time</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">        <span class="attr">phone</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">formLabelWidth</span>: <span class="string">&quot;80px&quot;</span>,<span class="comment">//设置表单的大小</span></span><br><span class="line">      <span class="attr">rules</span>: &#123;  <span class="comment">//表单验证的规则</span></span><br><span class="line">        <span class="attr">name</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入姓名&quot;</span> &#125;],</span><br><span class="line">        <span class="attr">sex</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span> &#125;],</span><br><span class="line">        <span class="attr">age</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入年龄&quot;</span> &#125;],</span><br><span class="line">        <span class="attr">address</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入地址&quot;</span> &#125;],</span><br><span class="line">        <span class="attr">time</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入入学时间&quot;</span> &#125;],</span><br><span class="line">        <span class="attr">phone</span>: [&#123; <span class="attr">required</span>: <span class="literal">true</span>, <span class="attr">message</span>: <span class="string">&quot;请输入联系方式&quot;</span> &#125;],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">state</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">total</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;;</span><br><span class="line">     </span><br><span class="line"><span class="number">3.</span>在methords中写上各种事件方法</span><br><span class="line"> <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">edit</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">del</span>(<span class="params"></span>)&#123;&#125;,</span><br><span class="line">    <span class="title function_">addStudent</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">closeInfo</span>(<span class="params"></span>) &#123;&#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增里面确定按钮</span></span><br><span class="line">    <span class="title function_">sure</span>(<span class="params">form</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>[form].<span class="title function_">validate</span>(<span class="function"><span class="params">valid</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(form,<span class="variable language_">this</span>.<span class="property">form</span>);</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line"><span class="number">4.</span>在api中写请求方法，因为后端数据原因需要用到qs将数据进行转换一下，先安装qs npm i qs -D,现实工作中是不需要进行转换的</span><br><span class="line"><span class="comment">//信息列表的新增接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">info</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  data = qs.<span class="title function_">stringify</span>(data);</span><br><span class="line"> <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;post&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/info&quot;</span>,</span><br><span class="line">    data,</span><br><span class="line">   &#125;);</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line"><span class="number">5.</span>请求写好在列表页进行引用调用，并且在确定按钮中进行严重并且发送请求，请求成功弹窗关闭</span><br><span class="line"><span class="keyword">import</span> &#123;  info &#125; <span class="keyword">from</span> <span class="string">&quot;@/api/api&quot;</span>;</span><br><span class="line"><span class="title function_">sure</span>(<span class="params">form</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>[form].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;<span class="comment">//进行验证</span></span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(form, <span class="variable language_">this</span>.<span class="property">form</span>);</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;<span class="comment">//验证通过</span></span><br><span class="line">          <span class="title function_">info</span>(<span class="variable language_">this</span>.<span class="property">form</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;<span class="comment">//发送请求</span></span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;<span class="comment">//请求成功</span></span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;<span class="comment">//弹窗关闭</span></span><br><span class="line">              <span class="variable language_">this</span>.$message(&#123; <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">message</span>: res.<span class="property">data</span>.<span class="property">message</span> &#125;);<span class="comment">//并且给到相应的提示</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line"><span class="number">6.</span>当请求成功后对应的渲染到内容上，同样在api中写上弹窗请求，因为请求弹窗的数据在很多地方使用所以将他进行封装，方便新增和修改时候能够直接去调用这个请求</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123; </span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/info&quot;</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">     </span><br><span class="line"><span class="comment">//发送请求拿到输入表单的数据进行渲染，并且方便新增和修改时进行调用</span></span><br><span class="line">    <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">getInfo</span>().<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">tableData</span> = res.<span class="property">data</span>.<span class="property">data</span>;<span class="comment">//将数据保存到tableData并且二渲染</span></span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>在确定事件中去调用这个请求接口，并且在create中去获取到数据</span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line"> <span class="comment">//新增里面确定按钮(在没有封装新增和修改的api前可以这样写一样渲染到页面)</span></span><br><span class="line">    <span class="title function_">sure</span>(<span class="params">form</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>[form].<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(form, <span class="variable language_">this</span>.<span class="property">form</span>);</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">          <span class="title function_">info</span>(<span class="variable language_">this</span>.<span class="property">form</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">              <span class="variable language_">this</span>.<span class="title function_">getData</span>();<span class="comment">//当点击这个确定按钮调用请求</span></span><br><span class="line">              <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">              <span class="variable language_">this</span>.$message(&#123; <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">message</span>: res.<span class="property">data</span>.<span class="property">message</span> &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="number">8.</span>对弹窗的一个复用，增加和修改共用一个表单(修改的实现)，先在修改事件中点击修改弹窗为<span class="literal">true</span>，并且将当前表单的选项放到修改中，并且对弹窗的标题进行三元展示，用state去控制显示标题，当点新增时候会将修改的内容复制过来，这个时候可以将默认的表单进行清空，为防止修改的时候内容与页面同步此时使用深拷贝修改表单的对象，采用展开运算符，就不要将当前的对象直接赋值给表单</span><br><span class="line"><span class="comment">//点击修改</span></span><br><span class="line"><span class="title function_">edit</span>(<span class="params">row</span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(row);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">state</span> = <span class="literal">false</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">form</span> = &#123; ...row &#125;; <span class="comment">//在点击修改的时候不要直接把赋值，而是要扩展一下将当前的对象进行展开</span></span><br><span class="line">      <span class="comment">//this.form = row//将表单的每一行的信息放到修改中，这样写会导致修改时候与页面进行同步的bug采用深拷贝</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">dialogFormVisible</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-dialog</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:title</span>=<span class="string">&quot;state ? &#x27;添加学生信息&#x27; : &#x27;修改学生信息&#x27;&quot;</span>//<span class="attr">当state为ture时为添加反之为需改</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:visible.sync</span>=<span class="string">&quot;dialogFormVisible&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">width</span>=<span class="string">&quot;500px&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml"> state: true,//默认的添加还是修改的标题</span></span><br><span class="line"><span class="language-xml">   </span></span><br><span class="line"><span class="language-xml">//点击添加</span></span><br><span class="line"><span class="language-xml">addStudent() &#123;</span></span><br><span class="line"><span class="language-xml">      this.state = true</span></span><br><span class="line"><span class="language-xml">      this.dialogFormVisible = true;</span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">9.解决当点击修改时候的取消时候要将表单验证规则清空，并且将弹窗关闭</span></span><br><span class="line"><span class="language-xml">//点击取消的时候</span></span><br><span class="line"><span class="language-xml"> closeInfo(form)&#123;</span></span><br><span class="line"><span class="language-xml">      console.log(form);</span></span><br><span class="line"><span class="language-xml">      this.dialogFormVisible = false;</span></span><br><span class="line"><span class="language-xml">      this.$refs[form].resetFields();//点击取消时候要将表单验证的规则进行清空</span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">10.点击删除功能清除当前的表单，在api中发送请求将id传进去，并且在删除事件中点击删除后要用户确定是否删除并且重新渲染</span></span><br><span class="line"><span class="language-xml">//信息列表的删除接口</span></span><br><span class="line"><span class="language-xml">export function infoDel(id) &#123;</span></span><br><span class="line"><span class="language-xml">  return service(&#123;</span></span><br><span class="line"><span class="language-xml">    method: &quot;delete&quot;,</span></span><br><span class="line"><span class="language-xml">    url: `/info/$&#123;id&#125;`,</span></span><br><span class="line"><span class="language-xml">  &#125;);</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">     </span></span><br><span class="line"><span class="language-xml"> //点击删除之后</span></span><br><span class="line"><span class="language-xml"> del(row) &#123;</span></span><br><span class="line"><span class="language-xml">      console.log(row);</span></span><br><span class="line"><span class="language-xml">      this.$alert(&quot;你确定要删除吗？&quot;, &quot;提示&quot;, &#123;</span></span><br><span class="line"><span class="language-xml">        confirmButtonText: &quot;确定&quot;,</span></span><br><span class="line"><span class="language-xml">        callback: () =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">          infoDel(row.id).then((res) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">            if (res.data.status === 200) &#123;</span></span><br><span class="line"><span class="language-xml">              this.getData();//重新请求</span></span><br><span class="line"><span class="language-xml">              this.$message(&#123; message: res.data.message, type: &quot;success&quot; &#125;);</span></span><br><span class="line"><span class="language-xml">            &#125;</span></span><br><span class="line"><span class="language-xml">          &#125;);</span></span><br><span class="line"><span class="language-xml">        &#125;,</span></span><br><span class="line"><span class="language-xml">      &#125;);</span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">        </span></span><br><span class="line"><span class="language-xml">11.对新增和修改的方法进行封装，在api中将两者的请求方法合在一起</span></span><br><span class="line"><span class="language-xml">//信息列表的新增和修改接口</span></span><br><span class="line"><span class="language-xml">export function info(type, data) &#123;</span></span><br><span class="line"><span class="language-xml">  data = qs.stringify(data);</span></span><br><span class="line"><span class="language-xml">  let obj = &#123; method: type, url: &quot;/info&quot;, data &#125;;</span></span><br><span class="line"><span class="language-xml">  return service(obj);</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml">     </span></span><br><span class="line"><span class="language-xml">12.将新增和修改的引入都改为info，并且将新增和修改的请求中加上post还是put的标识</span></span><br><span class="line"><span class="language-xml">import &#123; info, getInfo, infoDel &#125; from &quot;@/api/api&quot;;</span></span><br><span class="line"><span class="language-xml">     </span></span><br><span class="line"><span class="language-xml">sure(form) &#123;</span></span><br><span class="line"><span class="language-xml">      this.$refs.form.validate((valid) =&gt; &#123;</span></span><br><span class="line"><span class="language-xml">        if (valid) &#123;</span></span><br><span class="line"><span class="language-xml">          console.log(form, this.form);</span></span><br><span class="line"><span class="language-xml">          if (this.state) &#123;</span></span><br><span class="line"><span class="language-xml">            info(&quot;post&quot;,this.form).then((res) =&gt; &#123;//当点击新增时候</span></span><br><span class="line"><span class="language-xml">              if (res.data.status === 200) &#123;</span></span><br><span class="line"><span class="language-xml">                console.log(form);</span></span><br><span class="line"><span class="language-xml">                this.getData();</span></span><br><span class="line"><span class="language-xml">                this.dialogFormVisible = false;</span></span><br><span class="line"><span class="language-xml">                this.$message(&#123; type: &quot;success&quot;, message: res.data.message &#125;);</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">            &#125;);</span></span><br><span class="line"><span class="language-xml">          &#125;else&#123;</span></span><br><span class="line"><span class="language-xml">            info(&#x27;put&#x27;,this.form).then((res) =&gt; &#123;//当点击修改时候发送请求</span></span><br><span class="line"><span class="language-xml">              if (res.data.status === 200) &#123;</span></span><br><span class="line"><span class="language-xml">                this.getData();</span></span><br><span class="line"><span class="language-xml">                this.dialogFormVisible = false;</span></span><br><span class="line"><span class="language-xml">                this.$message(&#123; type: &quot;success&quot;, message: res.data.message &#125;);</span></span><br><span class="line"><span class="language-xml">              &#125;</span></span><br><span class="line"><span class="language-xml">            &#125;);</span></span><br><span class="line"><span class="language-xml">          &#125;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">      &#125;);</span></span><br><span class="line"><span class="language-xml">    &#125;,</span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure><h2 id="6-对增删改查进行封装减少重复的代码"><a href="#6-对增删改查进行封装减少重复的代码" class="headerlink" title="6.对增删改查进行封装减少重复的代码"></a>6.对增删改查进行封装减少重复的代码</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建一个table的文件用来封装方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>封装表格数据的方法</span><br><span class="line"><span class="comment">//获取表格的数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getData</span>(<span class="params">root, url, params</span>) &#123;<span class="comment">//root表示当前那个页面所对应的this指向，url:请求接口，params：传的参数如没有则为空对象</span></span><br><span class="line">  root.<span class="property">service</span></span><br><span class="line">    .<span class="title function_">get</span>(url, &#123; <span class="attr">params</span>: params || &#123;&#125; &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        root.<span class="property">tableData</span> = res.<span class="property">data</span>.<span class="property">data</span>;</span><br><span class="line">        root.<span class="property">total</span> = res.<span class="property">data</span>.<span class="property">total</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>在页面进行引入getData，并且将请求的方法改为当前的<span class="variable language_">this</span>和接口</span><br><span class="line"><span class="keyword">import</span> &#123; getData &#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/table&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">created</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">getData</span>(<span class="variable language_">this</span>,<span class="string">&quot;/info&quot;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="number">4.</span>封装新增和修改的方法</span><br><span class="line"><span class="comment">//新增和修改方法的封装</span></span><br><span class="line"><span class="keyword">import</span> qs <span class="keyword">from</span> <span class="string">&quot;qs&quot;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">changeInfo</span>(<span class="params">root, method, url, form, callback</span>) &#123;<span class="comment">//url：地址 form：传的表单  callback：回调</span></span><br><span class="line">  <span class="keyword">let</span> data = qs.<span class="title function_">stringify</span>(form);</span><br><span class="line">  root.<span class="property">service</span>[method](url, data)<span class="comment">//这个methords是看发送请求是post还是Put</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(form);</span><br><span class="line">        <span class="title function_">callback</span>(root, url);<span class="comment">//将this和地址进行传入回调</span></span><br><span class="line">        root.<span class="property">dialogFormVisible</span> = <span class="literal">false</span>;</span><br><span class="line">        root.<span class="property">$refs</span>[<span class="string">&quot;form&quot;</span>].<span class="title function_">resetFields</span>();</span><br><span class="line">        root.$message(&#123; <span class="attr">type</span>: <span class="string">&quot;success&quot;</span>, <span class="attr">message</span>: res.<span class="property">data</span>.<span class="property">message</span> &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>将changeInfo进行引入,并且在新增和修改的事件中使用</span><br><span class="line"><span class="keyword">import</span> &#123; getData ,changeInfo&#125; <span class="keyword">from</span> <span class="string">&quot;@/utils/table&quot;</span>;</span><br><span class="line"></span><br><span class="line"> <span class="title function_">sure</span>(<span class="params">form</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(form, <span class="variable language_">this</span>.<span class="property">form</span>);</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>) &#123;</span><br><span class="line">            <span class="comment">//没有封装之前的写法</span></span><br><span class="line">            <span class="comment">// info(&quot;post&quot;,this.form).then((res) =&gt; &#123;//当点击新增时候</span></span><br><span class="line">            <span class="comment">//   if (res.data.status === 200) &#123;</span></span><br><span class="line">            <span class="comment">//     console.log(form);</span></span><br><span class="line">            <span class="comment">//     this.getData();</span></span><br><span class="line">            <span class="comment">//     this.dialogFormVisible = false;</span></span><br><span class="line">            <span class="comment">//     this.$message(&#123; type: &quot;success&quot;, message: res.data.message &#125;);</span></span><br><span class="line">            <span class="comment">//   &#125;</span></span><br><span class="line">            <span class="comment">//&#125;);</span></span><br><span class="line">            <span class="comment">//封装之后直接用changeInfo去调用将四个参数传过去</span></span><br><span class="line">            <span class="title function_">changeInfo</span>(<span class="variable language_">this</span>, <span class="string">&quot;post&quot;</span>, <span class="string">&quot;/info&quot;</span>, <span class="variable language_">this</span>.<span class="property">form</span>, getData);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">changeInfo</span>(<span class="variable language_">this</span>, <span class="string">&quot;put&quot;</span>, <span class="string">&quot;/info&quot;</span>, <span class="variable language_">this</span>.<span class="property">form</span>, getData);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line"><span class="number">6.</span>将新增和修改方法继续封装精简一下合二为一，定义一个methords，然后三元判断当前是新增还是修改，然后将methords当参数传过去进行调用方法</span><br><span class="line">  <span class="title function_">sure</span>(<span class="params">form</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">form</span>.<span class="title function_">validate</span>(<span class="function">(<span class="params">valid</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (valid) &#123;</span><br><span class="line">          <span class="variable language_">console</span>.<span class="title function_">log</span>(form, <span class="variable language_">this</span>.<span class="property">form</span>);</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">state</span>) &#123;</span><br><span class="line">            <span class="comment">// info(&quot;post&quot;,this.form).then((res) =&gt; &#123;//当点击新增时候</span></span><br><span class="line">            <span class="comment">//   if (res.data.status === 200) &#123;</span></span><br><span class="line">            <span class="comment">//     console.log(form);</span></span><br><span class="line">            <span class="comment">//     this.getData();</span></span><br><span class="line">            <span class="comment">//     this.dialogFormVisible = false;</span></span><br><span class="line">            <span class="comment">//     this.$message(&#123; type: &quot;success&quot;, message: res.data.message &#125;);</span></span><br><span class="line">            <span class="comment">//   &#125;</span></span><br><span class="line">            <span class="comment">//&#125;);</span></span><br><span class="line">            <span class="keyword">let</span> methods = <span class="string">&quot;&quot;</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">state</span> ? (methods = <span class="string">&quot;post&quot;</span>) : (methods = <span class="string">&quot;put&quot;</span>);</span><br><span class="line">            <span class="title function_">changeInfo</span>(<span class="variable language_">this</span>, methods, <span class="string">&quot;/info&quot;</span>, <span class="variable language_">this</span>.<span class="property">form</span>, getData);</span><br><span class="line">          &#125; </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line"><span class="number">7.</span>对删除方法的封装</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">delData</span>(<span class="params">root, url, id, callback</span>) &#123;<span class="comment">//当前的this，地址，删除的id </span></span><br><span class="line">  root.$alert(<span class="string">&quot;你确定要删除吗？&quot;</span>, <span class="string">&quot;提示&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">confirmButtonText</span>: <span class="string">&quot;确定&quot;</span>,</span><br><span class="line">    <span class="attr">callback</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">service</span></span><br><span class="line">        .<span class="title function_">delete</span>(<span class="string">`<span class="subst">$&#123;url&#125;</span>/<span class="subst">$&#123;id&#125;</span>`</span>)</span><br><span class="line">        .<span class="title function_">then</span>(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (res.<span class="property">data</span>.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">            <span class="title function_">callback</span>(root, url);</span><br><span class="line">            root.$message(&#123; <span class="attr">message</span>: res.<span class="property">data</span>.<span class="property">message</span>, <span class="attr">type</span>: <span class="string">&quot;success&quot;</span> &#125;);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="移动端的搜索功能"><a href="#移动端的搜索功能" class="headerlink" title="移动端的搜索功能"></a>移动端的搜索功能</h1><h2 id="1-书写静态页面，历史记录"><a href="#1-书写静态页面，历史记录" class="headerlink" title="1.书写静态页面，历史记录"></a>1.书写静态页面，历史记录</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>在输入框上绑定v-modul 以及事件，在历史记录上进行遍历，在data中将输入的数据和遍历的数据保存写按下事件</span><br><span class="line"> &lt;input</span><br><span class="line">      type=<span class="string">&quot;text&quot;</span></span><br><span class="line">      placeholder=<span class="string">&quot;周杰伦&quot;</span><span class="comment">//默认的名字</span></span><br><span class="line">      v-model=<span class="string">&quot;searchKey&quot;</span><span class="comment">//绑定输入的值</span></span><br><span class="line">      @keydown.<span class="property">enter</span>=<span class="string">&quot;enterKey&quot;</span><span class="comment">//回车事件</span></span><br><span class="line">    /&gt;</span><br><span class="line">          </span><br><span class="line">  </span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">span</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">v-for</span>=<span class="string">&quot;item in keyWorldList&quot;</span>//<span class="attr">将输入的值进行遍历渲染</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">:key</span>=<span class="string">&quot;item&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      <span class="attr">class</span>=<span class="string">&quot;spanKey&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">      @<span class="attr">click</span>=<span class="string">&quot;searchHistory(item)&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">    &gt;</span></span></span><br><span class="line"><span class="language-xml">      &#123;&#123; item &#125;&#125;//渲染</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">keyWorldList</span>: [],<span class="comment">//添加关键字后的数组</span></span><br><span class="line">      <span class="attr">searchKey</span>: <span class="string">&quot;&quot;</span>,<span class="comment">//输入的数据</span></span><br><span class="line">      <span class="attr">searchList</span>: [],</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line"><span class="attr">methords</span>:&#123;</span><br><span class="line">    <span class="title function_">enterkey</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keyworldList</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">searchkey</span>)<span class="comment">//将输入的数据放到keyworldList中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>当添加完成后为防止刷新页面消失将数组保存到locastorage中进行永久存储</span><br><span class="line"><span class="attr">methords</span>:&#123;</span><br><span class="line">    <span class="title function_">enterkey</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keyworldList</span>.<span class="title function_">unshift</span>(<span class="variable language_">this</span>.<span class="property">searchkey</span>)<span class="comment">//将输入的数据放到keyworldList中</span></span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;keyWorldList&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">keyWorldList</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>当渲染的时候需要在locastorage里面去获取一下列表，在mounted中,要记得转换对象形式</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">keyworldList</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;keyWorldList&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4.</span>删除历史记录，在删除上点击事件，当点击的时候要将<span class="variable language_">localStorage</span>里面清空，并且将数组清空</span><br><span class="line"> <span class="title function_">delHistory</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">localStorage</span>.<span class="title function_">removeItem</span>(<span class="string">&quot;keyWorldList&quot;</span>);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">keyWorldList</span> = [];</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line"><span class="number">5.</span>当删除之后需要判断数组是否为空，如果有值则为本身，如果没有值则为空数组，防止添加为<span class="literal">null</span></span><br><span class="line"> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">keyWorldList</span> = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;keyWorldList&quot;</span>))</span><br><span class="line">      ? <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="variable language_">localStorage</span>.<span class="title function_">getItem</span>(<span class="string">&quot;keyWorldList&quot;</span>))</span><br><span class="line">      : [];</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>为防止多次舒服同一个数据，所以要对数据进行查重</span><br><span class="line"><span class="attr">methords</span>:&#123;</span><br><span class="line">    <span class="title function_">enterkey</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keyworldList</span>.<span class="title function_">unshift</span>(<span class="variable language_">this</span>.<span class="property">searchkey</span>)<span class="comment">//将输入的数据放到keyworldList中</span></span><br><span class="line">        <span class="comment">//防止输入的为同样的，将对数组进行去重</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keyWorldList</span> = [...<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="variable language_">this</span>.<span class="property">keyWorldList</span>)];</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;keyWorldList&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">keyWorldList</span>))</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>为防止用户什么都没输入也会按下回车也会去渲染，所以要加一个判断，当不为空时才能渲染</span><br><span class="line"><span class="attr">methords</span>:&#123;</span><br><span class="line">    <span class="title function_">enterkey</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">searchKey</span> !== <span class="string">&quot;&quot;</span>) &#123;<span class="comment">//防止用户什么都没输入也会按下回车也会去渲染，所以要加一个判断</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keyworldList</span>.<span class="title function_">unshift</span>(<span class="variable language_">this</span>.<span class="property">searchkey</span>)<span class="comment">//将输入的数据放到keyworldList中</span></span><br><span class="line">        <span class="comment">//防止输入的为同样的，将对数组进行去重</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keyWorldList</span> = [...<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="variable language_">this</span>.<span class="property">keyWorldList</span>)];</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;keyWorldList&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">keyWorldList</span>))</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>为防止有多个历史记录将使长度坍塌，则需要判断历史记录得长度使其最大为<span class="number">5</span></span><br><span class="line"><span class="attr">methords</span>:&#123;</span><br><span class="line">    <span class="title function_">enterkey</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">searchKey</span> !== <span class="string">&quot;&quot;</span>) &#123;<span class="comment">//防止用户什么都没输入也会按下回车也会去渲染，所以要加一个判断</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keyworldList</span>.<span class="title function_">unshift</span>(<span class="variable language_">this</span>.<span class="property">searchkey</span>)<span class="comment">//将输入的数据放到keyworldList中</span></span><br><span class="line">        <span class="comment">//防止输入的为同样的，将对数组进行去重</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keyWorldList</span> = [...<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="variable language_">this</span>.<span class="property">keyWorldList</span>)];</span><br><span class="line">        <span class="comment">//设置历史记录的固定长度防止样式崩塌</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">keyWorldList</span>.<span class="property">length</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">keyWorldList</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="property">keyWorldList</span>.<span class="property">length</span> - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;keyWorldList&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">keyWorldList</span>))</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>当按下回车根据关键字返回相应得数据，首先要在api中根据接口写请求</span><br><span class="line"><span class="comment">//获取搜索列表的数据</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">getSearchMusic</span>(<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;Get&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">`/search?keywords=<span class="subst">$&#123;data&#125;</span>`</span>,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">10.</span>然后在回车事件中发送请求并将数据放到一个新数组中进行渲染</span><br><span class="line"> <span class="title function_">data</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">keyWorldList</span>: [],<span class="comment">//添加关键字后的数组</span></span><br><span class="line">      <span class="attr">searchKey</span>: <span class="string">&quot;&quot;</span>,<span class="comment">//输入得关键字</span></span><br><span class="line">      <span class="attr">searchList</span>: [],<span class="comment">//用来接收关键字得数据</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line"><span class="attr">methords</span>:&#123;</span><br><span class="line">    <span class="comment">//点击回车事件</span></span><br><span class="line">    <span class="title function_">enterkey</span>(<span class="params"></span>)&#123;</span><br><span class="line">       <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">searchKey</span> !== <span class="string">&quot;&quot;</span>) &#123;<span class="comment">//防止用户什么都没输入也会按下回车也会去渲染，所以要加一个判断</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keyworldList</span>.<span class="title function_">unshift</span>(<span class="variable language_">this</span>.<span class="property">searchkey</span>)<span class="comment">//将输入的数据放到keyworldList中</span></span><br><span class="line">        <span class="comment">//防止输入的为同样的，将对数组进行去重</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">keyWorldList</span> = [...<span class="keyword">new</span> <span class="title class_">Set</span>(<span class="variable language_">this</span>.<span class="property">keyWorldList</span>)];</span><br><span class="line">        <span class="comment">//设置历史记录的固定长度防止样式崩塌</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">keyWorldList</span>.<span class="property">length</span> &gt; <span class="number">5</span>) &#123;</span><br><span class="line">          <span class="variable language_">this</span>.<span class="property">keyWorldList</span>.<span class="title function_">splice</span>(<span class="variable language_">this</span>.<span class="property">keyWorldList</span>.<span class="property">length</span> - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">localStorage</span>.<span class="title function_">setItem</span>(<span class="string">&quot;keyWorldList&quot;</span>,<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="variable language_">this</span>.<span class="property">keyWorldList</span>))</span><br><span class="line">        <span class="comment">//点击回车请求数据</span></span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getSearchMusic</span>(<span class="variable language_">this</span>.<span class="property">searchKey</span>);</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchList</span> = res.<span class="property">data</span>.<span class="property">result</span>.<span class="property">songs</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">searchKey</span> = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">11.</span>当我们点击历史记录得时候给历史记录添加事件也可也获取歌曲得数据</span><br><span class="line">  <span class="comment">//点击历史记录获取歌曲名单</span></span><br><span class="line">    <span class="attr">searchHistory</span>: <span class="keyword">async</span> <span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> res = <span class="keyword">await</span> <span class="title function_">getSearchMusic</span>(item);</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(res);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">searchList</span> = res.<span class="property">data</span>.<span class="property">result</span>.<span class="property">songs</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line"><span class="number">12.</span>根据数据进行渲染页面</span><br><span class="line"><span class="comment">//根据关键词展示得数据</span></span><br><span class="line"> &lt;div <span class="keyword">class</span>=<span class="string">&quot;itemList&quot;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;(item, i) in searchList&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;i&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;itemLeft&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;updateIndex(item)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;leftSpan&quot;</span>&gt;</span>&#123;&#123; i + 1 &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; item.name &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-for</span>=<span class="string">&quot;(item1, index) in item.artists&quot;</span> <span class="attr">:key</span>=<span class="string">&quot;index&quot;</span>&gt;</span>&#123;&#123; //遍历作者名字</span></span><br><span class="line"><span class="language-xml">            item1.name</span></span><br><span class="line"><span class="language-xml">          &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;itemRight&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon bofang&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span> <span class="attr">v-if</span>=<span class="string">&quot;item.mvid != 0&quot;</span>&gt;</span>//判断当前是否有mv图标</span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-shipin&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">svg</span> <span class="attr">class</span>=<span class="string">&quot;icon liebiao&quot;</span> <span class="attr">aria-hidden</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">use</span> <span class="attr">xlink:href</span>=<span class="string">&quot;#icon-31liebiao&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">use</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">13.</span>当我们点击这个列表将会在播放列表进行播放，此时需要在store中将我们点击得歌曲push到播放列表中</span><br><span class="line"> <span class="attr">pushPlayList</span>: <span class="keyword">function</span> (<span class="params">state, value</span>) &#123;</span><br><span class="line">      state.<span class="property">playList</span>.<span class="title function_">push</span>(value);</span><br><span class="line">   &#125;,</span><br><span class="line">       </span><br><span class="line"><span class="number">14.</span>给列表一个点击事件将当前得item传过去</span><br><span class="line"><span class="comment">//点击歌曲的左边播放音乐</span></span><br><span class="line">    <span class="attr">updateIndex</span>: <span class="keyword">function</span> (<span class="params">item</span>) &#123;</span><br><span class="line">      item.<span class="property">al</span> = item.<span class="property">album</span>;</span><br><span class="line">      item.<span class="property">al</span>.<span class="property">picUrl</span> = item.<span class="property">album</span>.<span class="property">artist</span>.<span class="property">img1v1Url</span>;<span class="comment">//这两局是底部组件中得图片无法读取得bug，可以将al赋值为当前得数据</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&quot;pushPlayList&quot;</span>, item);</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(</span><br><span class="line">        <span class="string">&quot;updatePlayListIndex&quot;</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">playList</span>.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br></pre></td></tr></table></figure><h1 id="Axios的实现"><a href="#Axios的实现" class="headerlink" title="Axios的实现"></a>Axios的实现</h1><h2 id="1-怎么去实现的二次封装axios，请求拦截器里面的代码怎么写的"><a href="#1-怎么去实现的二次封装axios，请求拦截器里面的代码怎么写的" class="headerlink" title="1.怎么去实现的二次封装axios，请求拦截器里面的代码怎么写的"></a>1.怎么去实现的二次封装axios，请求拦截器里面的代码怎么写的</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.要使用axios下载引入</span></span><br><span class="line">下载：npm install axios -S</span><br><span class="line">引入：<span class="keyword">import</span> axios form <span class="string">&#x27;axios&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.使用</span></span><br><span class="line">axios.<span class="title function_">get</span>(<span class="string">&#x27;url?参数1=值&amp;参数2=值&#x27;</span>);</span><br><span class="line">axios.<span class="title function_">post</span>(<span class="string">&#x27;url&#x27;</span>,&#123;</span><br><span class="line">    参数<span class="number">1</span>：值</span><br><span class="line">    参数<span class="number">2</span>：值</span><br><span class="line">&#125;);</span><br><span class="line"><span class="title function_">axios</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;请求的路径&#x27;</span></span><br><span class="line">    <span class="attr">methords</span>:<span class="string">&#x27;请求的方式，默认的是get&#x27;</span></span><br><span class="line">    <span class="attr">params</span>:&#123;&#125;<span class="comment">//get请求方式：前端给后端传递的数据</span></span><br><span class="line">    <span class="attr">data</span>:&#123;&#125;<span class="comment">//post请求方法：前端给后端传递的数据</span></span><br><span class="line">    <span class="attr">header</span>:&#123;&#125;<span class="comment">//自定义请求头</span></span><br><span class="line">    <span class="attr">timeout</span>:<span class="number">1000</span><span class="comment">//如果请求时间超时则请求会中断</span></span><br><span class="line">    <span class="attr">responseType</span>:<span class="string">&#x27;默认的是json格式数据&#x27;</span><span class="comment">//响应的数据类型</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//二.在公司中前端接口会出现的情况</span></span><br><span class="line"><span class="comment">//一切正常不会出现跨域问题</span></span><br><span class="line"><span class="comment">//出现了跨域的问题怎么解决？</span></span><br><span class="line"><span class="comment">//解决：1.前端解决</span></span><br><span class="line"><span class="comment">//在vue中设置代理来解决跨域问题可以通过vue.config.js中配置devserver.proxy配置代理</span></span><br><span class="line">说明：如果前端应用和后端<span class="variable constant_">API</span>服务器没有运行到同一个主机上，需要在<span class="string">&#x27;开发环境&#x27;</span>将<span class="variable constant_">API</span>请求代理到<span class="variable constant_">API</span>服务器</span><br><span class="line"><span class="comment">//具体配置：打开vue.config.js中,配置完重启一下脚手架</span></span><br><span class="line"><span class="attr">devServer</span>:&#123;</span><br><span class="line">    <span class="attr">proxy</span>:<span class="string">&#x27;http://localhost:3000&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//注意：代理在开发环境中生效，生成环境是不生效</span></span><br><span class="line">在公司里，项目上线后如果发现请求的问题，怎么处理？</span><br><span class="line"><span class="comment">//解决代理打包后代理失效的设置：环境变量</span></span><br><span class="line">设置环境变量：在项目的根目录中去创建</span><br><span class="line">开发环境：.<span class="property">env</span>.<span class="property">development</span></span><br><span class="line">生产环境：.<span class="property">enc</span>.<span class="property">production</span> </span><br><span class="line"></span><br><span class="line">开发环境变量名是：<span class="variable constant_">VUE_APP_TITLE</span>，<span class="variable constant_">VUE_APP_BASE_API</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//后端解决</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//三，二次封装axios，在公司中一定要封装的</span></span><br><span class="line"><span class="comment">//在公司中分为开发环境以及生产环境</span></span><br><span class="line"><span class="comment">//封装的意义：为什么要封装</span></span><br><span class="line"><span class="number">1.</span>url统一管理方便日后更换环境</span><br><span class="line"><span class="number">2.</span>post请求需要判断用户是否登录状态，每次都要传递参数，需要在请求头中加上token</span><br><span class="line"><span class="number">3.</span>在公司一般在新建一个<span class="built_in">require</span>.<span class="property">js</span>文件</span><br><span class="line"><span class="comment">//此文件做二次封装axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">&quot;axios&quot;</span>;<span class="comment">//1.引入axios</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.创建axios实例</span></span><br><span class="line"><span class="keyword">const</span> service = axios.<span class="title function_">create</span>(&#123;</span><br><span class="line">  <span class="comment">//baseURL: &quot;/api&quot;, //baseURL会自动加在请求地址上，将需要自动加的地址写上去</span></span><br><span class="line">    <span class="comment">//判断当前是生成环境还是开发环境，开发环境就走跨域,生产环境同样能够调用这里的环境变量</span></span><br><span class="line">    <span class="attr">baseURL</span>:process.<span class="property">env</span>.<span class="property">VUE_APP_TITLE</span> = <span class="string">&quot;生产环境&quot;</span>？process.<span class="property">env</span>.<span class="property">development</span>:<span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">3000</span>, <span class="comment">//超过请求时间会终止</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加请求拦截器，前端给后端的东西，没有到后端</span></span><br><span class="line"><span class="comment">//在发送请求前可以做些什么=&gt;判断登录的状态</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">config</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">//在请求前获取并设置token，并将token放到请求头上</span></span><br><span class="line">    config.<span class="property">headers</span>[<span class="string">&quot;token&quot;</span>] = <span class="title function_">getToken</span>(<span class="string">&quot;token&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> config;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//添加响应拦截器//后端给前端的东西</span></span><br><span class="line">service.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(</span><br><span class="line">  <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; status, message &#125; = response.<span class="property">data</span>;</span><br><span class="line">    <span class="keyword">if</span> (status !== <span class="number">200</span>) &#123;</span><br><span class="line">      <span class="title class_">Message</span>(&#123; <span class="attr">message</span>: message || <span class="string">&quot;error&quot;</span>, <span class="attr">type</span>: <span class="string">&quot;warning&quot;</span> &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Promise</span>.<span class="title function_">reject</span>(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回axios对象</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> service;</span><br><span class="line"></span><br><span class="line"><span class="comment">//四.api解耦</span></span><br><span class="line"><span class="comment">//封装的意义：单独维护api的请求，会项目中的所有请求方便管理</span></span><br><span class="line"><span class="comment">//很多页面用同一个页面无须写很多次请求，直接调用封装好的函数</span></span><br><span class="line"><span class="comment">//新建一个api中写上各种的请求方法，然后在组件中进行引用</span></span><br><span class="line">get请求：params。post请求：data  </span><br><span class="line"><span class="keyword">import</span> service <span class="keyword">from</span> <span class="string">&quot;../service.js&quot;</span>;</span><br><span class="line"><span class="comment">//学生列表的查询接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">students</span>(<span class="params">params</span>)&#123;<span class="comment">//params是一个形参是一个对象，那个组件需要使用直接调用并且传参</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">service</span>(&#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&quot;get&quot;</span>,</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&quot;/students&quot;</span>,</span><br><span class="line">    params,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">一般在公司中详细去看utils目录或者其他文件中二次封装的axios以及api文件各种请求方法</span><br></pre></td></tr></table></figure><h1 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line">vuex：状态管理</span><br><span class="line">优点是：方便操作，方便管理，方便传值</span><br><span class="line"></span><br><span class="line"><span class="comment">//1.下载并引入</span></span><br><span class="line">npm i vuex</span><br><span class="line"><span class="comment">//2.创建store.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vuex</span> <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Vuex</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">modules</span>: &#123;</span><br><span class="line">   <span class="comment">//进行模块化，一般用于组件很多进行细分</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//导出</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store</span><br><span class="line"></span><br><span class="line"><span class="comment">//2，在main.js中引入store</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">  <span class="attr">el</span>: <span class="string">&#x27;#app&#x27;</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在开发过程中一般配合调用api去操作vuex，因为vuex是一个状态管理，多个组件用到的数据，只需要在vuex中进行修改就可以实现多处修改</span></span><br><span class="line"><span class="attr">state</span>:用来存储数据的，一般通过mapState进行映射到组件中</span><br><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> &#123; mapState &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>; <span class="comment">// 从vuex中导入mapState</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">//...mapState([&#x27;name&#x27;]), // 经过解构后，自动就添加到了计算属性中，此时就可以直接像访问计算属性一样访问它</span></span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123; <span class="attr">aliasName</span>: <span class="string">&#x27;name&#x27;</span> &#125;),  <span class="comment">// 赋别名的话，这里接收对象，而不是数组，在页面展示直接用&#123;&#123;aliasName&#125;&#125;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">getter</span>:相当于计算属性，当你多个组件需要对数据进行添加或者删除时可以用</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">number</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">list</span>: [</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;111&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;222&#x27;</span> &#125;,</span><br><span class="line">      &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">&#x27;333&#x27;</span> &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 在store对象中增加getters属性</span></span><br><span class="line">  <span class="attr">getters</span>: &#123;</span><br><span class="line">    <span class="title function_">getMessage</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      <span class="comment">// 获取修饰后的name，第一个参数state为必要参数，必须写在形参上</span></span><br><span class="line">      <span class="keyword">return</span> <span class="string">`hello<span class="subst">$&#123;state.name&#125;</span>`</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//在组件中我们可以通过mapGetter去统一修改</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123; mapState, mapGetters &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">getMessage</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapState</span>([<span class="string">&#x27;name&#x27;</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    ...<span class="title function_">mapGetters</span>([<span class="string">&#x27;getMessage&#x27;</span>]),</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">mutations</span>:是同步修改数据的地方，集中管理</span><br><span class="line"> <span class="keyword">const</span> store = <span class="keyword">new</span> <span class="title class_">Vuex</span>.<span class="title class_">Store</span>(&#123;</span><br><span class="line">  <span class="attr">state</span>: &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">    <span class="attr">number</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">mutations</span>: &#123;</span><br><span class="line">    <span class="title function_">setNumber</span>(<span class="params">state</span>) &#123;</span><br><span class="line">      state.<span class="property">number</span> = <span class="number">5</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">setNumberIsWhat</span>(<span class="params">state, number</span>) &#123;<span class="comment">//number形参在页面我要传过去的参数进行修改</span></span><br><span class="line">      <span class="comment">// 增加一个带参数的mutations方法</span></span><br><span class="line">      state.<span class="property">number</span> = number;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> store;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`旧值：<span class="subst">$&#123;<span class="variable language_">this</span>.$store.state.number&#125;</span>`</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">commit</span>(<span class="string">&#x27;setNumberIsWhat&#x27;</span>, <span class="number">666</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新值：<span class="subst">$&#123;<span class="variable language_">this</span>.$store.state.number&#125;</span>`</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Actions</span>：异步操作的方法</span><br><span class="line"><span class="keyword">async</span> <span class="title function_">mounted</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`旧值：<span class="subst">$&#123;<span class="variable language_">this</span>.$store.state.number&#125;</span>`</span>);</span><br><span class="line">  <span class="keyword">await</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;setNum&#x27;</span>, &#123; <span class="attr">number</span>: <span class="number">611</span> &#125;);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`新值：<span class="subst">$&#123;<span class="variable language_">this</span>.$store.state.number&#125;</span>`</span>);</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">actions</span>: &#123;</span><br><span class="line">  <span class="title function_">setNum</span>(<span class="params">&#123; commit &#125;</span>) &#123;<span class="comment">//commit是方法的形参听过页面中dispath去映射actions中方法进行异步操作</span></span><br><span class="line">    <span class="comment">// 直接将content结构掉，解构出commit，下面就可以直接调用了</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;XXXX&#x27;</span>); <span class="comment">// 直接调用</span></span><br><span class="line">        <span class="title function_">resolve</span>();</span><br><span class="line">      &#125;, <span class="number">1000</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"><span class="title class_">Module</span>：模块化</span><br></pre></td></tr></table></figure><h2 id="实际项目中使用vuex的应用"><a href="#实际项目中使用vuex的应用" class="headerlink" title="实际项目中使用vuex的应用"></a>实际项目中使用vuex的应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//在实际项目中一般调用api接口请求函数为后续异步操作做准备</span></span><br><span class="line"><span class="comment">//搜索的接口</span></span><br><span class="line"><span class="comment">// 请求所需要的参数，都是在调用接口请求函数的时候，传参过来的</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">reqSearchInfo</span> = (<span class="params">searchParams</span>) =&gt; &#123;<span class="comment">//searchParams是需要传过来参数到后端中请求数据</span></span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">request</span>(&#123;</span><br><span class="line">    <span class="attr">url</span>:<span class="string">&#x27;/list&#x27;</span>,</span><br><span class="line">    <span class="attr">method</span>:<span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>:searchParams</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//例如一个搜索的功能(在vuex中)</span></span><br><span class="line"><span class="keyword">import</span> &#123; reqSearchInfo &#125; <span class="keyword">from</span> <span class="string">&quot;@/api&quot;</span><span class="comment">//调用api接口请求函数</span></span><br><span class="line"><span class="comment">//首先在页面当中我们去dispath去调用actions函数请求数据</span></span><br><span class="line"> <span class="title function_">getSearchInfo</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="comment">// dispatch本质是在调用对应的actions函数</span></span><br><span class="line">      <span class="comment">// 它可以传参，传递的参数是给了actions函数的第二个形参</span></span><br><span class="line">      <span class="comment">// dispacth只能传递一个参数，如果要传递多个，封装成一个对象去传递</span></span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&quot;getSearchInfo&quot;</span>, <span class="variable language_">this</span>.<span class="property">searchParams</span>);</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">//在action中去异步请求数据</span></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">  <span class="keyword">async</span> <span class="title function_">getSearchInfo</span>(<span class="params">&#123;commit&#125;,searchParams</span>)&#123;<span class="comment">//getSearchInfo调用的函数名，searchParams传过来的形参</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="title function_">reqSearchInfo</span>(searchParams)<span class="comment">//根据接口参数去异步请求数据</span></span><br><span class="line">      <span class="keyword">if</span>(result.<span class="property">code</span> === <span class="number">200</span>)&#123;<span class="comment">//如果请求成功</span></span><br><span class="line">        <span class="title function_">commit</span>(<span class="string">&#x27;RECEIVE_SEARCHINFO&#x27;</span>,result.<span class="property">data</span>)<span class="comment">//通过commit将请求回来的数据传给mutations进行修改</span></span><br><span class="line">      &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;获取搜索信息失败&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">      <span class="title function_">alert</span>(<span class="string">&#x27;请求获取搜索信息失败&#x27;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提交mutions后，对数据进行修改处理</span></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">  <span class="title function_">RECEIVE_SEARCHINFO</span>(<span class="params">state,searchInfo</span>)&#123;<span class="comment">//searchInfo是actions传过来的形参，请求回来的数据</span></span><br><span class="line">    state.<span class="property">searchInfo</span> = searchInfo</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//最后将数据保存到state中</span></span><br><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">  <span class="attr">searchInfo</span>:&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在页面就可以通过mapState拿到数据</span></span><br><span class="line"> <span class="attr">computed</span>: &#123;</span><br><span class="line">    ...<span class="title function_">mapGetters</span>([<span class="string">&quot;goodsList&quot;</span>]),</span><br><span class="line">    ...<span class="title function_">mapState</span>(&#123;</span><br><span class="line">      <span class="attr">searchInfo</span>:<span class="function"><span class="params">state</span> =&gt;</span> state.<span class="property">search</span>.<span class="property">searchInfo</span></span><br><span class="line">    &#125;),</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line"><span class="comment">//实际用如果有需要修改的数据要单独拿出来可以通过getters</span></span><br><span class="line"> <span class="keyword">const</span> getters = &#123;</span><br><span class="line">  <span class="title function_">attrsList</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="comment">// 启动项目（或者刷新，刷新页面相当于重新启动项目） state是要重新初始化的</span></span><br><span class="line">    <span class="comment">// state默认是不会做持久化存储的</span></span><br><span class="line">    <span class="comment">// state重新初始化完成，getters是要去拿state的数据计算新的数据的，不会</span></span><br><span class="line">    <span class="comment">// 等待请求完成返回结果再走，getters计算新数据的时候，拿到的state当中的</span></span><br><span class="line">    <span class="comment">// 数据是初始化的空对象数据，getters计算attrsList的时候，就会拿到undefined</span></span><br><span class="line">    <span class="comment">// 如果不写|| []，那么这个undefined就会被组件当中的computed获取到组件当中</span></span><br><span class="line">    <span class="comment">// 组件里面就会在模板当中使用undefined，一旦使用undefined加点或者加（）就报错</span></span><br><span class="line">    <span class="comment">// 报类型错误</span></span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">searchInfo</span>.<span class="property">attrsList</span> || []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">goodsList</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">searchInfo</span>.<span class="property">goodsList</span> || []</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">trademarkList</span>(<span class="params">state</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> state.<span class="property">searchInfo</span>.<span class="property">trademarkList</span> || []</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拿到当前的提取整理的数据</span></span><br></pre></td></tr></table></figure><h1 id="vue的组件传值"><a href="#vue的组件传值" class="headerlink" title="vue的组件传值"></a>vue的组件传值</h1><h2 id="父子之间通信"><a href="#父子之间通信" class="headerlink" title="父子之间通信"></a>父子之间通信</h2><h3 id="props"><a href="#props" class="headerlink" title="props:"></a>props:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件中：</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:msg</span>=<span class="string">&quot;msg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件中：</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="comment">// 写法一 用数组接收</span></span><br><span class="line">  <span class="attr">props</span>:[<span class="string">&#x27;msg&#x27;</span>],</span><br><span class="line">  <span class="comment">// 写法二 用对象接收，可以限定接收的数据类型、设置默认值、验证等</span></span><br><span class="line">  <span class="attr">props</span>:&#123;</span><br><span class="line">      <span class="attr">msg</span>:&#123;</span><br><span class="line">          <span class="attr">type</span>:<span class="title class_">String</span>,</span><br><span class="line">          <span class="attr">default</span>:<span class="string">&#x27;这是默认数据&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">msg</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sync"><a href="#sync" class="headerlink" title=".sync:"></a>.sync:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.<span class="property">sync</span>：可以帮我们实现父组件向子组件传递的数据的双向绑定，所以子组件接收到数据后可以直接修改，并且会同时修改父组件的数据</span><br><span class="line">父组件中：</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">child</span> <span class="attr">:page.sync</span>=<span class="string">&quot;page&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">page</span>:<span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Child</span>.<span class="property">vue</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">props</span>:[<span class="string">&quot;page&quot;</span>],<span class="comment">//拿到父组件传过来的数据</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">computed</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="comment">// 当我们在子组件里修改 currentPage 时，父组件的 page 也会随之改变</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        currentPage &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">get</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">page</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="title function_">set</span>(<span class="params">newVal</span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">                <span class="variable language_">this</span>.$emit(<span class="string">&quot;update:page&quot;</span>, newVal)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="v-modul："><a href="#v-modul：" class="headerlink" title="v-modul："></a>v-modul：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">v-<span class="attr">modul</span>:和 .<span class="property">sync</span> 类似，可以实现将父组件传给子组件的数据为双向绑定，子组件通过 $emit 修改父组件的数据</span><br><span class="line"><span class="title class_">Parent</span>.<span class="property">vue</span>:</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-model</span>=<span class="string">&quot;value&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="attr">value</span>:<span class="number">1</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="title class_">Child</span>.<span class="property">vue</span>:</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">:value</span>=<span class="string">&quot;value&quot;</span> @<span class="attr">input</span>=<span class="string">&quot;handlerChange&quot;</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">export default &#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">    props:[&quot;value&quot;],</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">    // 可以修改事件名，默认为 input</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">    model:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">        event:&quot;updateValue&quot;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">    methods:&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">        handlerChange(e)&#123;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">            this.$emit(&quot;input&quot;, e.target.value)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">            // 如果有上面的重命名就是这样</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">            this.$emit(&quot;updateValue&quot;, e.target.value)</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span></span><br><span class="line"><span class="language-xml"><span class="language-javascript"><span class="language-xml"></span></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="children-parent"><a href="#children-parent" class="headerlink" title="$children/$parent"></a>$children/$parent</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$children：获取到一个包含所有子组件(不包含孙子组件)的 <span class="title class_">VueComponent</span> 对象数组，可以直接拿到子组件中所有数据和方法等</span><br><span class="line"></span><br><span class="line">$parent：获取到一个父节点的 <span class="title class_">VueComponent</span> 对象，同样包含父节点中所有数据和方法等</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property">vue</span>:</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="title function_">someMethod</span>() <span class="comment">// 调用第一个子组件的方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$children</span>[<span class="number">0</span>].<span class="property">name</span> <span class="comment">// 获取第一个子组件中的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Child</span>.<span class="property">vue</span>:</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="title function_">someMethod</span>() <span class="comment">// 调用父组件的方法</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">$parent</span>.<span class="property">name</span> <span class="comment">// 获取父组件中的属性</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子向父传值"><a href="#子向父传值" class="headerlink" title="子向父传值"></a>子向父传值</h2><h3 id="ref"><a href="#ref" class="headerlink" title="ref:"></a>ref:</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">ref 如果在普通的<span class="variable constant_">DOM</span>元素上，引用指向的就是该<span class="variable constant_">DOM</span>元素;</span><br><span class="line"></span><br><span class="line">如果在子组件上，引用的指向就是子组件实例;</span><br><span class="line"></span><br><span class="line">父组件可以通过 ref 主动获取子组件的属性或者调用子组件的方法</span><br><span class="line"></span><br><span class="line"><span class="comment">// Child.vue</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;oldCode&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">someMethod</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(msg)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent.vue</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">child</span> <span class="attr">ref</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">const</span> child = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">child</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(child.<span class="property">name</span>) </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        child.<span class="title function_">someMethod</span>(<span class="string">&quot;调用了子组件的方法&quot;</span>)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h3 id="emit-v-on"><a href="#emit-v-on" class="headerlink" title="$emit/v-on"></a>$emit/v-on</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">子组件通过派发事件的方式给父组件数据，或者触发父组件更新等操作</span><br><span class="line"><span class="comment">// Child.vue 派发</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">      <span class="keyword">return</span> &#123; <span class="attr">msg</span>: <span class="string">&quot;这是发给父组件的信息&quot;</span> &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">methods</span>: &#123;</span><br><span class="line">      <span class="title function_">handleClick</span>(<span class="params"></span>)&#123;</span><br><span class="line">          <span class="variable language_">this</span>.$emit(<span class="string">&quot;sendMsg&quot;</span>,<span class="variable language_">this</span>.<span class="property">msg</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Parent.vue 响应</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">child</span> <span class="attr">v-on:sendMsg</span>=<span class="string">&quot;getChildMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">    <span class="comment">// 或 简写</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">child</span> @<span class="attr">sendMsg</span>=<span class="string">&quot;getChildMsg&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">getChildMsg</span>(<span class="params">msg</span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(msg) <span class="comment">// 这是父组件接收到的消息</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="爷孙之间通信"><a href="#爷孙之间通信" class="headerlink" title="爷孙之间通信"></a>爷孙之间通信</h2><h3 id="attrs-listeners"><a href="#attrs-listeners" class="headerlink" title="$attrs/$listeners"></a>$attrs/$listeners</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">$attrs：包含父作用域里除 <span class="keyword">class</span> 和 style 除外的非 props 属性集合。通过 <span class="variable language_">this</span>.<span class="property">$attrs</span> 获取父作用域中所有符合条件的属性集合，然后还要继续传给子组件内部的其他组件，就可以通过 v-bind=<span class="string">&quot;$attrs&quot;</span></span><br><span class="line"></span><br><span class="line">$listeners：包含父作用域里 .<span class="property">native</span> 除外的监听事件集合。如果还要继续传给子组件内部的其他组件，就可以通过 v-on=<span class="string">&quot;$linteners&quot;</span>使用方式是相同的</span><br><span class="line"></span><br><span class="line"><span class="title class_">Parent</span>.<span class="property">vue</span>:</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">child</span> <span class="attr">:name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">title</span>=<span class="string">&quot;1111&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">&lt;/template</span></span><br><span class="line"><span class="language-xml">export default&#123;</span></span><br><span class="line"><span class="language-xml">    data()&#123;</span></span><br><span class="line"><span class="language-xml">        return &#123;</span></span><br><span class="line"><span class="language-xml">            name:&quot;oldCode&quot;</span></span><br><span class="line"><span class="language-xml">        &#125;</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">Child.vue:</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    // 继续传给孙子组件</span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">sun-child</span> <span class="attr">v-bind</span>=<span class="string">&quot;$attrs&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">sun-child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">export default&#123;</span></span><br><span class="line"><span class="language-xml">    props:[&quot;name&quot;], // 这里可以接收，也可以不接收</span></span><br><span class="line"><span class="language-xml">    mounted()&#123;</span></span><br><span class="line"><span class="language-xml">        // 如果props接收了name 就是 &#123; title:1111 &#125;，否则就是&#123; name:&quot;oldCode&quot;, title:1111 &#125;</span></span><br><span class="line"><span class="language-xml">        console.log(this.$attrs)</span></span><br><span class="line"><span class="language-xml">    &#125;</span></span><br><span class="line"><span class="language-xml">&#125;</span></span><br><span class="line"><span class="language-xml"></span></span><br></pre></td></tr></table></figure><h3 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">provide / inject 是依赖注入，在一些插件或组件库里被常用</span><br><span class="line"></span><br><span class="line">provide：可以让我们指定想要提供给后代组件的数据或方法</span><br><span class="line"></span><br><span class="line">inject：在任何后代组件中接收想要添加在这个组件上的数据或方法，不管组件嵌套多深都可以直接拿来用</span><br><span class="line"></span><br><span class="line">要注意的是 provide 和 inject 传递的数据不是响应式的，也就是说用 inject 接收来数据后，provide 里的数据改变了，后代组件中的数据不会改变，除非传入的就是一个可监听的对象 所以建议还是传递一些常量或者方法</span><br><span class="line"></span><br><span class="line"><span class="comment">// 父组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="comment">// 方法一 不能获取 methods 中的方法</span></span><br><span class="line">    <span class="attr">provide</span>:&#123;</span><br><span class="line">        <span class="attr">name</span>:<span class="string">&quot;oldCode&quot;</span>,</span><br><span class="line">        <span class="attr">age</span>: <span class="variable language_">this</span>.<span class="property">data</span>中的属性</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 方法二 不能获取 data 中的属性</span></span><br><span class="line">    <span class="title function_">provide</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>:<span class="string">&quot;oldCode&quot;</span>,</span><br><span class="line">            <span class="attr">someMethod</span>:<span class="variable language_">this</span>.<span class="property">someMethod</span> <span class="comment">// methods 中的方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">someMethod</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是注入的方法&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后代组件</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="attr">inject</span>:[<span class="string">&quot;name&quot;</span>,<span class="string">&quot;someMethod&quot;</span>],</span><br><span class="line">    <span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">someMethod</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="兄弟之间传值，任意组件之间都可以传值"><a href="#兄弟之间传值，任意组件之间都可以传值" class="headerlink" title="兄弟之间传值，任意组件之间都可以传值"></a>兄弟之间传值，任意组件之间都可以传值</h2><h3 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">EventBus</span> 是中央事件总线，不管是父子组件，兄弟组件，跨层级组件等都可以使用它完成通信操作</span><br><span class="line"></span><br><span class="line">定义方式有三种：</span><br><span class="line"><span class="comment">// 方法一</span></span><br><span class="line"><span class="comment">// 抽离成一个单独的 js 文件 Bus.js ，然后在需要的地方引入</span></span><br><span class="line"><span class="comment">// Bus.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法二 直接挂载到全局，一般在项目中这样做的比较多</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">$bus</span> = <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方法三 注入到 Vue 根对象上</span></span><br><span class="line"><span class="comment">// main.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">el</span>:<span class="string">&quot;#app&quot;</span>,</span><br><span class="line">    <span class="attr">data</span>:&#123;</span><br><span class="line">        <span class="title class_">Bus</span>: <span class="keyword">new</span> <span class="title class_">Vue</span>()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在需要向外部发送自定义事件的组件内</span></span><br><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;handlerClick&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"><span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="title function_">changeIndex</span>(<span class="params">index</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentIndex</span> = index;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">$bus</span>.$emit(<span class="string">&quot;changeIndex&quot;</span>, index);<span class="comment">//向外传递数据</span></span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line"><span class="comment">//组件接受的数据</span></span><br><span class="line"><span class="title function_">mounted</span>(<span class="params"></span>)&#123;</span><br><span class="line">  <span class="variable language_">this</span>.<span class="property">$bus</span>.$on(<span class="string">&#x27;changeIndex&#x27;</span>,<span class="variable language_">this</span>.<span class="property">changeIndex</span>)<span class="comment">//用来接收的数据</span></span><br><span class="line"> &#125;,</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Vuex-状态管理"><a href="#Vuex-状态管理" class="headerlink" title="Vuex:状态管理"></a>Vuex:状态管理</h3><h3 id="sort插槽："><a href="#sort插槽：" class="headerlink" title="sort插槽："></a>sort插槽：</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">就是把子组件的数据通过插槽的方式传给父组件使用，然后再插回来</span><br><span class="line"> <span class="title class_">Child</span>.<span class="property">vue</span>:</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    //在子组件中动态绑定自动传出去的数据</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">slot</span> <span class="attr">:user</span>=<span class="string">&quot;user&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span> </span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    <span class="title function_">data</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">user</span>:&#123; <span class="attr">name</span>:<span class="string">&quot;oldCode&quot;</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="title class_">Parent</span>.<span class="property">vue</span>:</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    //在父组件中通过v-slot定义一个变量来接受子组件传过来的数据，就可以通过变量去拿到数据</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">child</span> <span class="attr">v-slot</span>=<span class="string">&quot;slotProps&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">            &#123;&#123; slotProps.user.name &#125;&#125;</span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">child</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="封装分页功能"><a href="#封装分页功能" class="headerlink" title="封装分页功能"></a>封装分页功能</h1><h2 id="通过ui框架进行封装"><a href="#通过ui框架进行封装" class="headerlink" title="通过ui框架进行封装"></a>通过ui框架进行封装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.先把ui框架的分页结构代码复制过来</span></span><br><span class="line">&lt;el-pagination </span><br><span class="line">@size-change=<span class="string">&quot;handleSizeChange&quot;</span>       <span class="comment">// 绑定回调：改变页面展示的数据量大小</span></span><br><span class="line">@current-change=<span class="string">&quot;handleCurrentChange&quot;</span>  <span class="comment">// 绑定回调： 改变页码</span></span><br><span class="line">:current-page=<span class="string">&quot;currentPage4&quot;</span>         <span class="comment">// 当前页码（样式高亮）</span></span><br><span class="line">:page-sizes=<span class="string">&quot;[100, 200, 300, 400]&quot;</span>   <span class="comment">// 可选择的数量大小</span></span><br><span class="line">:page-size=<span class="string">&quot;100&quot;</span>                  <span class="comment">// 当前数据量大小</span></span><br><span class="line">layout=<span class="string">&quot;total, sizes, prev, pager, next, jumper&quot;</span>   <span class="comment">// 分页器布局</span></span><br><span class="line">:total=<span class="string">&quot;400&quot;</span>                     <span class="comment">// 所有数据的数量</span></span><br><span class="line">&gt; </span><br><span class="line">&lt;/el-pagination&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">methods</span>: &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 改变页面数据量</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleSizeChange</span>(<span class="params">val</span>) &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>); </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;, </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="comment">// 改变页码</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`当前页: <span class="subst">$&#123;val&#125;</span>`</span>); </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">return</span> &#123; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">currentPage1</span>: <span class="number">5</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">currentPage2</span>: <span class="number">5</span>,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">currentPage3</span>: <span class="number">5</span>, </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">      <span class="attr">currentPage4</span>: <span class="number">4</span> </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  &#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125; </span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//用props接受父组件传过来的数据</span></span><br><span class="line"><span class="attr">props</span>: &#123;</span><br><span class="line">    <span class="attr">total</span>: &#123;<span class="comment">//所有数据的总量</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">10</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">pageSize</span>: &#123;<span class="comment">//当前页面的数据量</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">7</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">currentPage</span>:&#123;<span class="comment">//当前的页码</span></span><br><span class="line">      <span class="attr">type</span>: <span class="title class_">Number</span>,</span><br><span class="line">      <span class="attr">default</span>: <span class="number">1</span>,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line"><span class="comment">//在父组件中定义两个两个自定义事件，定义一个是改变每页的条数，一个是每页的页数</span></span><br><span class="line"> <span class="comment">//分页改变每页的条数</span></span><br><span class="line">    <span class="title function_">handleSizeChange</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pageSize</span> = val;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentPage</span> = <span class="number">1</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//改变每页的页数</span></span><br><span class="line">    <span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentPage</span> = val;</span><br><span class="line">    &#125;,</span><br><span class="line">        </span><br><span class="line"><span class="comment">//我们在子组件中去触发父组件的回调函数，将新的页面数据以及当前的页码传给父组件</span></span><br><span class="line"> <span class="attr">methods</span>: &#123;</span><br><span class="line">    <span class="comment">// 改页面数据量</span></span><br><span class="line">    <span class="title function_">handleSizeChange</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="comment">// val值就是新的页面数据量</span></span><br><span class="line">        <span class="comment">// 父组件传过来的自定义事件名：changePageSize</span></span><br><span class="line">        <span class="comment">// 自定义事件其实是一个函数，这里函数需要参数（当前页面数据量，当前页码）</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;changePageSize&quot;</span>, val, <span class="variable language_">this</span>.<span class="property">currentPage</span>);</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 改变页码</span></span><br><span class="line">    <span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span><br><span class="line">        <span class="comment">// 同理</span></span><br><span class="line">      <span class="variable language_">this</span>.$emit(<span class="string">&quot;changePageNo&quot;</span>, val, <span class="variable language_">this</span>.<span class="property">pageSize</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">      </span><br><span class="line"><span class="comment">//父组件接受到子组件传过来每页的数据量以及每页的页数进行修改并且重新渲染页面</span></span><br><span class="line"> <span class="comment">//分页改变每页的条数</span></span><br><span class="line">    <span class="title function_">handleSizeChange</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">pageSize</span> = val;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentPage</span> = <span class="number">1</span>;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`每页 <span class="subst">$&#123;val&#125;</span> 条`</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">//改变每页的页数</span></span><br><span class="line">    <span class="title function_">handleCurrentChange</span>(<span class="params">val</span>) &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">currentPage</span> = val;</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line"><span class="comment">//这个时候我们也需要对列表数据进行计算，每页显示条数固定在几条 </span></span><br><span class="line">   &lt;!--<span class="number">1</span>:<span class="number">1</span>-<span class="number">10</span> <span class="number">2</span>:<span class="number">11</span>-<span class="number">20</span> <span class="title function_">slice</span>(当前页数 - <span class="number">1</span>)*每页条数,当前的页数*当前条数--&gt;</span><br><span class="line">    <span class="title function_">compData</span>(<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">tableData</span>.<span class="title function_">slice</span>(</span><br><span class="line">        (<span class="variable language_">this</span>.<span class="property">currentPage</span> - <span class="number">1</span>) * <span class="variable language_">this</span>.<span class="property">pageSize</span>,</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentPage</span> * <span class="variable language_">this</span>.<span class="property">pageSize</span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><h2 id="通过手写分页的封装"><a href="#通过手写分页的封装" class="headerlink" title="通过手写分页的封装"></a>通过手写分页的封装</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.将分页功能提取出来到公共的组件中</span></span><br><span class="line"> <span class="comment">//上一页</span></span><br><span class="line">&lt;li @click = <span class="string">&quot;prePage()&quot;</span>&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;laquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">   <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span> </span><br><span class="line">&lt;/li&gt;</span><br><span class="line"><span class="comment">//分页列表</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span> <span class="attr">:class</span>=<span class="string">&quot;pageNo == index ? &#x27;active&#x27;:&#x27;&#x27;&quot;</span> <span class="attr">v-for</span>=<span class="string">&quot;index in pages&quot;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml"><span class="attr">:key</span>= <span class="string">&quot;index&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;curPage(index)&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">a</span>&gt;</span>&#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="comment">//下一页</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">          <span class="tag">&lt;<span class="name">span</span>&gt;</span><span class="symbol">&amp;raquo;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">a</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//以及将上一页和下一页的事件判断拿过来</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//在父组件中引入注册分页组件</span></span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Pagination</span> /&gt;</span></span> </span><br><span class="line">        </span><br><span class="line"><span class="comment">//父组件在子标签上要传人总页数以及页码</span></span><br><span class="line">     &lt;Pagination / ：pageTotal=&quot;page.pageTotal&quot; :pageNo = &quot;page.pageNo&quot;&gt;  </span><br><span class="line">         </span><br><span class="line">//子组件通过props接受父组件传过来的数据</span><br><span class="line">   props:[&#x27;pageTotal&#x27;,&#x27;pageNo&#x27;]</span><br><span class="line">//子组件通过$emit去触发父组件的事件，并且将当前页点击的页数传给父组件</span><br><span class="line">methords:&#123;</span><br><span class="line">    curPage(i)&#123;</span><br><span class="line">        if(i===&#x27;...&#x27;)return;</span><br><span class="line">        //将当前页点击的页数传给父组件</span><br><span class="line">        this.$emit(&#x27;e-child&#x27;,i)//e-child父组件的事件名随便取</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//父组件通过接受子组件传过来的事件名来接收参数并且触发事件</span><br><span class="line"> &lt;Pagination / ：pageTotal=&quot;page.pageTotal&quot; :pageNo = &quot;page.pageNo&quot; @e-child = &quot;getLists&quot;&gt;  </span><br><span class="line">     </span><br><span class="line">//子组件中的点击上一页也需要判断并且传给父组件</span><br><span class="line">   prePage()&#123;</span><br><span class="line">     if(this.pageNo&gt;1)&#123;//这个时候需要对当前点击的页码进行判断，大于1才能点击上一页</span><br><span class="line">         this.$emit(&#x27;e-child&#x27;,--this.pageNo)</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line">//注意：因为子组件不能直接去修改父组件的值，我们需要定义一个变量，在页面刷新的时候将父组件传过来的页码赋值给我们定义的变量</span><br><span class="line">data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">        curNo:1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mounted():&#123;</span><br><span class="line">   this.curNo = this.pageNo </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//解决省略号通过计算属性对页码和总页数进行计算</span><br><span class="line">computed:&#123;</span><br><span class="line">    pages()&#123;</span><br><span class="line">        let &#123;pageNo:s,pageTodal:t&#125; = this.$props;//要拿到props的数据需要用到$props</span><br><span class="line">        if(t&lt;10) return t;</span><br><span class="line">        if(s&lt;=5)&#123;</span><br><span class="line">            return [1,2,3,4,5,6,&#x27;....&#x27;,t];</span><br><span class="line">        &#125;else if(s&gt;t-5)&#123;</span><br><span class="line">            return [1,&#x27;...&#x27;,t-6,t-5,t-4,t-3,t-2,-t-1,t];</span><br><span class="line">        &#125;else &#123;</span><br><span class="line">            return [1,&#x27;...&#x27;,s-2,s-1,s,s+1,s+2,&#x27;...&#x27;,t];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="虚拟滚动长列表的优化"><a href="#虚拟滚动长列表的优化" class="headerlink" title="虚拟滚动长列表的优化"></a>虚拟滚动长列表的优化</h1><h2 id="1-Vue-virtual-Scroller"><a href="#1-Vue-virtual-Scroller" class="headerlink" title="1.Vue-virtual-Scroller"></a>1.Vue-virtual-Scroller</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.安装对应的依赖</span></span><br><span class="line">npm install --save vue-virtual-scroller </span><br><span class="line"></span><br><span class="line"><span class="comment">//配置</span></span><br><span class="line">在main.<span class="property">js</span>中引入</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;vue-virtual-scroller/dist/vue-virtual-scroller.css&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueVirtualScroller</span> <span class="keyword">from</span> <span class="string">&quot;vue-virtual-scroller&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueVirtualScroller</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//虚拟列表vue</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;<span class="name">virtual-scroller</span> <span class="attr">:items</span>=<span class="string">&quot;items&quot;</span> <span class="attr">item-height</span>=<span class="string">&quot;40&quot;</span> <span class="attr">content-tag</span>=<span class="string">&quot;ul&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot-scope</span>=<span class="string">&quot;props&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">      <span class="tag">&lt;<span class="name">li</span> <span class="attr">:key</span>=<span class="string">&quot;props.itemKey&quot;</span>&gt;</span>&#123;&#123;props.item.name&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">virtual-scroller</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> items <span class="keyword">from</span> <span class="string">&quot;./data.json&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">  <span class="attr">data</span>: <span class="function">() =&gt;</span> (&#123; items &#125;)</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><h1 id="webpack的基本使用"><a href="#webpack的基本使用" class="headerlink" title="webpack的基本使用"></a>webpack的基本使用</h1><h2 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack?"></a>安装webpack?</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>模块化打包工具</span><br><span class="line">开发：可以有空格，回车，注释。。。</span><br><span class="line">上线：这些都没有</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>安装webpack</span><br><span class="line"><span class="number">1.</span>全局安装</span><br><span class="line">npm i webpack -g</span><br><span class="line">npm i webpack-cli -g</span><br></pre></td></tr></table></figure><h2 id="配置webpack"><a href="#配置webpack" class="headerlink" title="配置webpack"></a>配置webpack</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>在webpack的配置文件webpack.<span class="property">config</span>.<span class="property">js</span>文件中有入口文件以及户口文件</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>:<span class="string">&#x27;./&#x27;</span><span class="comment">//入口的配置文件</span></span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">    <span class="attr">path</span>:path.<span class="title function_">resolve</span>(_dirname.<span class="string">&#x27;dist&#x27;</span>)<span class="comment">//修改出口文件名</span></span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./&#x27;</span>可以同步出口的文件名,是打包完后的dist文件下的目录</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>多文件打包为一个文件</span><br><span class="line">问题：多个入口文件===》单文件出口</span><br><span class="line">解决：<span class="attr">entry</span>:[<span class="string">&#x27;./src/a.js&#x27;</span>,<span class="string">&#x27;./src/b.js&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="number">2.1</span>.多文件打包成多文件</span><br><span class="line">问题：多个入口文件===》多文件出口</span><br><span class="line">解决：<span class="attr">entry</span>:&#123;</span><br><span class="line">    <span class="attr">a</span>:<span class="string">&#x27;./src/a.js&#x27;</span></span><br><span class="line">    <span class="attr">b</span>:<span class="string">&#x27;./src/b.js&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="loader和plugin的应用"><a href="#loader和plugin的应用" class="headerlink" title="loader和plugin的应用"></a>loader和plugin的应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>loader的配置在config.<span class="property">js</span>中使用，使用<span class="title class_">Loader</span>一定要下载loader</span><br><span class="line"><span class="attr">module</span>:[&#123;</span><br><span class="line">    <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="comment">//结尾是css的文件进行转换</span></span><br><span class="line">    <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]<span class="comment">//转换的时候应该使用那些loader</span></span><br><span class="line">&#125;]</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>test属性：识别那些文件会被转换</span><br><span class="line"><span class="number">2.</span>use属性：定义在进行转换时，应该使用那个loader</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span><span class="attr">plugin</span>:插件</span><br><span class="line">打包html的插件：html-webpack-plugin</span><br><span class="line"></span><br><span class="line">使用步骤：</span><br><span class="line"><span class="number">1.</span>下载</span><br><span class="line">   npm i html-webpack-plugin</span><br><span class="line"><span class="number">2.</span>引入：</span><br><span class="line">  在config.<span class="property">js</span>中引入<span class="keyword">var</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="number">3.</span>配置</span><br><span class="line">在同级中写入<span class="attr">plugins</span>:[</span><br><span class="line">    <span class="keyword">new</span>  <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="comment">//指定模板页面</span></span><br><span class="line">        <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        <span class="comment">//修改默认的文件名</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;./src/xx.html&#x27;</span></span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">多页面打包就要多次<span class="keyword">new</span>一个新的配置</span><br><span class="line"> <span class="keyword">new</span>  <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="comment">//指定模板页面</span></span><br><span class="line">        <span class="attr">template</span>:<span class="string">&#x27;./src/index.html&#x27;</span></span><br><span class="line">        <span class="comment">//修改默认的文件名</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;index.html&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">      <span class="keyword">new</span>  <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">        <span class="comment">//指定模板页面</span></span><br><span class="line">        <span class="attr">template</span>:<span class="string">&#x27;./src/xx.html&#x27;</span></span><br><span class="line">        <span class="comment">//修改默认的文件名</span></span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;/xx.html&#x27;</span><span class="comment">//第一个可以不写，第二个一定要写</span></span><br><span class="line">     <span class="comment">//允许注入的配置名</span></span><br><span class="line">     chunks：[</span><br><span class="line">       <span class="comment">//允许注入的文件名</span></span><br><span class="line">     <span class="string">&#x27;jquery&#x27;</span>,<span class="string">&#x27;xxx&#x27;</span></span><br><span class="line">     ],</span><br><span class="line">     <span class="attr">excludeChunks</span>:[<span class="string">&#x27;xx&#x27;</span>]</span><br><span class="line">    &#125;)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="打包图片音频视频等"><a href="#打包图片音频视频等" class="headerlink" title="打包图片音频视频等"></a>打包图片音频视频等</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>加载图片的loader</span><br><span class="line">file-loader</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>让html支持图片的loader</span><br><span class="line">html-withimg-loader</span><br><span class="line"></span><br><span class="line"><span class="attr">module</span>:[</span><br><span class="line">    <span class="attr">rules</span>:[&#123;</span><br><span class="line">        <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="comment">//结尾是css的文件进行转换</span></span><br><span class="line">        <span class="attr">use</span>:[<span class="string">&#x27;style-loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]<span class="comment">//转换的时候应该使用那些loader</span></span><br><span class="line">    &#125;,</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="attr">test</span>:<span class="regexp">/\.(png|jpg|jpeg|gif)$/</span>,<span class="comment">//结尾是css的文件进行转换</span></span><br><span class="line">             <span class="attr">use</span>:[&#123;</span><br><span class="line">                 <span class="attr">loader</span>:<span class="string">&#x27;file-loader&#x27;</span>,</span><br><span class="line">                 <span class="attr">options</span>:&#123;</span><br><span class="line">                     <span class="attr">esModule</span>:<span class="literal">false</span>,</span><br><span class="line">                     <span class="attr">outputPath</span>:<span class="string">&#x27;img/&#x27;</span></span><br><span class="line">                 &#125;</span><br><span class="line">             &#125;]</span><br><span class="line">        &#125;</span><br><span class="line">        &#123;</span><br><span class="line">             <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="comment">//结尾是css的文件进行转换</span></span><br><span class="line">             <span class="attr">use</span>:<span class="string">&#x27;html-withimg-loader&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">&#125;]</span><br></pre></td></tr></table></figure><h2 id="打包字体图标"><a href="#打包字体图标" class="headerlink" title="打包字体图标"></a>打包字体图标</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>下载字体图标</span><br><span class="line">       &#123;</span><br><span class="line">             <span class="attr">test</span>:<span class="regexp">/\.(eot|svg|ttf|woff|woff2)$/</span>,<span class="comment">//结尾是css的文件进行转换</span></span><br><span class="line">             <span class="attr">use</span>:<span class="string">&#x27;file-loader?name=./fonts/[name].[ext]&#x27;</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="压缩打包css文件"><a href="#压缩打包css文件" class="headerlink" title="压缩打包css文件"></a>压缩打包css文件</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>单独抽离css文件</span><br><span class="line">下载插件：mini-css-extract-plugin</span><br><span class="line"><span class="number">2.</span>引入插件</span><br><span class="line"> <span class="keyword">var</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;mini-css-extract-plugin&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="number">3.</span>修改loader配置：</span><br><span class="line"><span class="attr">module</span>:[&#123;</span><br><span class="line">    <span class="attr">test</span>:<span class="regexp">/\.css$/</span>,<span class="comment">//结尾是css的文件进行转换</span></span><br><span class="line">    <span class="attr">use</span>:[<span class="string">&#x27;MiniCssExtractPlugin.loader&#x27;</span>,<span class="string">&#x27;css-loader&#x27;</span>]<span class="comment">//转换的时候应该使用那些loader</span></span><br><span class="line">&#125;]</span><br><span class="line"><span class="number">4.</span>使用插件</span><br><span class="line"><span class="keyword">new</span>  <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">    <span class="attr">filename</span>:<span class="string">&#x27;./css/[name].css&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5.</span>压缩css文件</span><br><span class="line">插件：optimize-css-assets-webpack-plugin</span><br><span class="line">引入插件</span><br><span class="line">使用插件<span class="number">22</span> </span><br></pre></td></tr></table></figure><h2 id="打包项目压缩"><a href="#打包项目压缩" class="headerlink" title="打包项目压缩"></a>打包项目压缩</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>将项目中的js文件都放在入口文件中</span><br><span class="line"><span class="number">2.</span>在plugin中的chunks中将配置名都引入</span><br></pre></td></tr></table></figure><h2 id="解决表单重复提交的问题"><a href="#解决表单重复提交的问题" class="headerlink" title="解决表单重复提交的问题"></a>解决表单重复提交的问题</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>自定义指令directive</span><br><span class="line">思路： 点击之后当前按钮一定时间内（例如：<span class="built_in">setTimeout</span> 1000ms）不可以再次被点击，相当于节流；</span><br><span class="line">但是如果一个请求1000ms以上还没有返回，那么再次点击就会触发新的请求了。</span><br><span class="line">添加自定义文件 directives.<span class="property">js</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> preventReClick = <span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;preventReClick&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="keyword">function</span>(<span class="params">el, binding</span>) &#123;</span><br><span class="line">    el.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (!el.<span class="property">disabled</span>) &#123;</span><br><span class="line">        el.<span class="property">disabled</span> = <span class="literal">true</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          el.<span class="property">disabled</span> = <span class="literal">false</span></span><br><span class="line">        &#125;, binding.<span class="property">value</span> || <span class="number">3000</span>) <span class="comment">// 传入绑定值就使用，默认3000毫秒内不可重复触发</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; preventReClick &#125;</span><br><span class="line"></span><br><span class="line">在main.<span class="property">js</span>中引用</span><br><span class="line"><span class="keyword">import</span> preventReClick <span class="keyword">from</span> <span class="string">&#x27;./plugins/directives.js&#x27;</span> <span class="comment">//防多次点击，重复提交</span></span><br><span class="line"></span><br><span class="line">在按钮上添加v-perventReClick</span><br><span class="line"><span class="comment">// 指定延迟1000ms</span></span><br><span class="line">&lt;el-button  size=<span class="string">&quot;small&quot;</span> type=<span class="string">&quot;primary&quot;</span> @click=<span class="string">&quot;handleSave()&quot;</span> v-preventReClick=<span class="string">&quot;1000&quot;</span>&gt;保 存&lt;/el-button&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认延迟时间3000</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">el-button</span>  <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;handleSave()&quot;</span> <span class="attr">v-preventReClick</span>&gt;</span>保 存<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>在session中存放一个特殊的标识</span><br><span class="line">在服务器端，生成一个唯一的标识符，将它存入session，同时将它写入表单的隐藏字段中，然后将表单页面发给浏览器，用户录入信息后点击提交，在服务器端，获取表单中隐藏字段的值，与session中的唯一标识符比较，相等说明是首次提交，就处理本次请求，然后将session中的唯一标识符移除；不相等说明是重复提交，就不再处理。</span><br></pre></td></tr></table></figure><h2 id="原生的拖拽部分"><a href="#原生的拖拽部分" class="headerlink" title="原生的拖拽部分"></a>原生的拖拽部分</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>利用h5的draggable属性在需要添加的div绑定</span><br><span class="line">在拖动的图片上去绑定对应的效果：</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragstart&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;5px dashed red&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">当拖动结束后要取消边框</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragend&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line">也可以在拖动进行时，将边框取消,实现同步的效果</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragend&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    empty.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;none &#x27;</span></span><br><span class="line">&#125;，<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line">设置一个变量</span><br><span class="line"><span class="keyword">let</span> name;</span><br><span class="line"></span><br><span class="line">因为每张图片都设置了一个alt属性，就可以使每张图片都可以导致变量有不同的值，当图片进入到空元素的时候在利用这个变量name去改变元素中的内容，最后在拖拽结束的时候把上方的文字复原即可</span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragend&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    e.<span class="property">target</span>.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;none&#x27;</span></span><br><span class="line">    empty.<span class="property">style</span>.<span class="property">border</span> = <span class="string">&#x27;none &#x27;</span></span><br><span class="line">    h1.<span class="property">innerHTML</span> = <span class="string">&#x27;拖动你喜欢的图案到衣服上把&#x27;</span>；</span><br><span class="line">    h1.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;black&#x27;</span>;</span><br><span class="line">&#125;，<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">当图片进入空元素的时候利用变量去改变元素中的内容</span><br><span class="line">empty.<span class="title function_">addEventListener</span>(<span class="string">&#x27;dragenter&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    h1.<span class="property">innerHTML</span> = name;</span><br><span class="line">    h1.<span class="property">style</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">鼠标松开放置的事件,利用appendChild的方法进行节点的添加</span><br><span class="line">empty.<span class="title function_">addEventListener</span>(<span class="string">&#x27;drop&#x27;</span>,<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;  e.<span class="property">target</span>.<span class="title function_">appendChild</span>(<span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">`img[alt=<span class="subst">$&#123;name&#125;</span>]`</span>))</span><br><span class="line">&#125;,<span class="literal">false</span>)</span><br></pre></td></tr></table></figure><h2 id="倒计时的实现"><a href="#倒计时的实现" class="headerlink" title="倒计时的实现"></a>倒计时的实现</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>创建天时分秒的变量</span><br><span class="line"><span class="keyword">const</span> daySpan = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;./daySpan&#x27;</span>),</span><br><span class="line">      hourSpan = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;./hourSpan&#x27;</span>),</span><br><span class="line">      miunteSpan = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;./miunteSpan&#x27;</span>),</span><br><span class="line">      secondSpan = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;./secondSpan&#x27;</span>),</span><br><span class="line">      deadline = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2020-6-18 00:00&#x27;</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">function</span> <span class="title function_">coundown</span> ()&#123;</span><br><span class="line">       <span class="keyword">const</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>(),timeRemainning = deadline -now;</span><br><span class="line">       <span class="keyword">let</span> day,hour,minute,second;</span><br><span class="line">       <span class="comment">//判断当前的时间戳小于0就超出了截止日期了，分别把时间戳的秒数取整后赋值给变量</span></span><br><span class="line">       <span class="keyword">if</span>(timeRemainning&lt;<span class="number">0</span>)&#123;</span><br><span class="line">           <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       second = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeRemaining/ <span class="number">1000</span>% <span class="number">60</span>);</span><br><span class="line">       minute = <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeRemaining / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">60</span>);</span><br><span class="line">       day =   <span class="title class_">Math</span>.<span class="title function_">floor</span>(timeRemaining / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> % <span class="number">24</span>);</span><br><span class="line">       </span><br><span class="line">       daySpan.<span class="property">innerHTML</span> = day + <span class="string">&#x27;天&#x27;</span>；</span><br><span class="line">       hourSpan.<span class="property">innerHTML</span> = hour + <span class="string">&#x27;时&#x27;</span>；</span><br><span class="line">       minuteSpan.<span class="property">innerHTML</span> = minute + <span class="string">&#x27;分&#x27;</span>;</span><br><span class="line">       secondSpan.<span class="property">innerHtml</span> = second + <span class="string">&#x27;秒&#x27;</span>;</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">setTimeout</span>(countdown,<span class="number">1000</span>);</span><br><span class="line">   &#125;</span><br><span class="line"><span class="title function_">countdown</span>()</span><br></pre></td></tr></table></figure><h1 id="Echarts的基本使用"><a href="#Echarts的基本使用" class="headerlink" title="Echarts的基本使用"></a>Echarts的基本使用</h1><h2 id="echarts的用法"><a href="#echarts的用法" class="headerlink" title="echarts的用法"></a>echarts的用法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>柱形图</span><br><span class="line">通过el-card去准备一个容器</span><br><span class="line">  &lt;el-card&gt;</span><br><span class="line">      <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;main1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">   &lt;/el-card&gt;</span><br><span class="line"></span><br><span class="line">在mounted中获得表格的容器</span><br><span class="line"><span class="comment">// 1. 获取表格容器</span></span><br><span class="line"><span class="keyword">let</span> myChart = <span class="variable language_">this</span>.<span class="property">$echarts</span>.<span class="title function_">init</span>(<span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;main1&quot;</span>));</span><br><span class="line"><span class="comment">//2。设置各组件的样式</span></span><br><span class="line"> myChart.<span class="title function_">setOption</span>(&#123;</span><br><span class="line">      <span class="comment">//表头</span></span><br><span class="line">      <span class="attr">title</span>: &#123;<span class="comment">//标题</span></span><br><span class="line">        <span class="attr">text</span>: <span class="string">&quot;高薪就业,迎娶白富美&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//提示框</span></span><br><span class="line">      <span class="attr">tooltip</span>: &#123;&#125;,</span><br><span class="line">      <span class="comment">//x轴</span></span><br><span class="line">      <span class="attr">xAxis</span>: &#123;<span class="comment">//x轴显示的</span></span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&quot;一班&quot;</span>, <span class="string">&quot;二班&quot;</span>, <span class="string">&quot;三班&quot;</span>, <span class="string">&quot;四班&quot;</span>, <span class="string">&quot;五班&quot;</span>, <span class="string">&quot;六班&quot;</span>],</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">//y轴</span></span><br><span class="line">      <span class="attr">yAxis</span>: &#123;&#125;,</span><br><span class="line">      <span class="comment">//展示数据</span></span><br><span class="line">      <span class="attr">series</span>: [<span class="comment">//鼠标移动显示的</span></span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">name</span>: <span class="string">&quot;人数&quot;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&quot;bar&quot;</span>, <span class="comment">//柱状图</span></span><br><span class="line">          <span class="attr">data</span>: [<span class="number">45</span>, <span class="number">42</span>, <span class="number">46</span>, <span class="number">48</span>, <span class="number">52</span>, <span class="number">47</span>],</span><br><span class="line">        &#125;,</span><br><span class="line">      ],</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>折线图</span><br><span class="line"><span class="number">1.</span>现在create中请求数据，拿到对应的数据</span><br><span class="line"><span class="number">2.</span>在methods中将legend：数据概览  xAxis：底部的数据 series：鼠标悬浮的一个数值作为参数</span><br><span class="line"><span class="number">3.</span>获得容器</span><br><span class="line"><span class="number">4.</span>在options中设置样式</span><br></pre></td></tr></table></figure><h2 id="地图"><a href="#地图" class="headerlink" title="地图"></a>地图</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先拿到地图的json的数据</span><br><span class="line"><span class="number">2.</span>获取容器，注册可用的地图，包括geo组件或者map图表类型的时候才能使用</span><br><span class="line"><span class="number">3.</span>在option中去设置：</span><br><span class="line">地图的背景颜色</span><br><span class="line">在geo组件中配置地图的长宽比</span><br><span class="line">颜色的渐变</span><br><span class="line">然后配置地图的相关参数图表的相关设置</span><br><span class="line">显示文字</span><br><span class="line">设置地图的文字颜色</span><br><span class="line">鼠标移动地图上显示的高亮颜色</span><br><span class="line">在此设置地图的颜色显示</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="thress-js展示3d环绕效果"><a href="#thress-js展示3d环绕效果" class="headerlink" title="thress.js展示3d环绕效果"></a>thress.js展示3d环绕效果</h1><h2 id="thress的应用"><a href="#thress的应用" class="headerlink" title="thress的应用"></a>thress的应用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>首先3d环绕是靠天空盒六张图片展现的场景</span><br><span class="line"><span class="number">2.</span>安装依赖</span><br><span class="line">    <span class="comment">// npm 安装使用</span></span><br><span class="line">    npm install three</span><br><span class="line">    <span class="comment">// 引用</span></span><br><span class="line">    <span class="keyword">import</span> * <span class="keyword">as</span> <span class="variable constant_">THREE</span> <span class="keyword">from</span> <span class="string">&#x27;three&#x27;</span></span><br><span class="line"><span class="number">3.</span>在tress.<span class="property">js</span>中最重要的<span class="number">3</span>个因素：场景sscene，相机camera，渲染器renderer</span><br><span class="line"><span class="number">4.</span>创建场景</span><br><span class="line">  <span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>()</span><br><span class="line"><span class="number">5.</span>创建一个透视相机</span><br><span class="line"> <span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>( <span class="number">45</span>, width / height, <span class="number">1</span>, <span class="number">1000</span> );</span><br><span class="line"></span><br><span class="line"><span class="number">6.</span>相机参数</span><br><span class="line"><span class="title class_">PerspectiveCamera</span>( fov : <span class="title class_">Number</span>, aspect : <span class="title class_">Number</span>, near : <span class="title class_">Number</span>, far : <span class="title class_">Number</span> )</span><br><span class="line">fov — 摄像机视锥体垂直视野角度</span><br><span class="line">aspect — 摄像机视锥体长宽比</span><br><span class="line">near — 摄像机视锥体近端面</span><br><span class="line">far — 摄像机视锥体远端面</span><br><span class="line">只有离相机的距离大于near值，小于far值，且在相机的可视角度之内，才能被相机投影到。</span><br><span class="line"></span><br><span class="line"><span class="number">7.</span>创建正交投影相机(三视图)</span><br><span class="line"><span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">OrthographicCamera</span>( width / - <span class="number">2</span>, width / <span class="number">2</span>, height / <span class="number">2</span>, height / - <span class="number">2</span>, <span class="number">1</span>, <span class="number">1000</span> );</span><br><span class="line"></span><br><span class="line"><span class="number">8.</span>相机参数</span><br><span class="line"><span class="title class_">OrthographicCamera</span>( left : <span class="title class_">Number</span>, right : <span class="title class_">Number</span>, top : <span class="title class_">Number</span>, bottom : <span class="title class_">Number</span>, near : <span class="title class_">Number</span>, far : <span class="title class_">Number</span> )</span><br><span class="line">left — 摄像机视锥体左侧面。</span><br><span class="line">right — 摄像机视锥体右侧面。</span><br><span class="line">top — 摄像机视锥体上侧面。</span><br><span class="line">bottom — 摄像机视锥体下侧面。</span><br><span class="line">near — 摄像机视锥体近端面。</span><br><span class="line">far — 摄像机视锥体远端面。</span><br><span class="line"></span><br><span class="line"><span class="number">9.</span>渲染器(renderer)</span><br><span class="line">渲染器决定了渲染的结果应该画在页面的什么元素上面，并且以怎样的方式来绘制</span><br><span class="line"> <span class="keyword">var</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>();</span><br><span class="line">    renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>,             <span class="variable language_">window</span>.<span class="property">innerHeight</span>);</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>);</span><br><span class="line">渲染器renderer的domElement元素，表示渲染器中的画布，所有的渲染都是画在domElement上的，所以这里的appendChild表示将这个domElement挂接在body下面，这样渲染的结果就能够在页面中显示了</span><br><span class="line"></span><br><span class="line">世界雏形：</span><br><span class="line"><span class="comment">// 初始化场景</span></span><br><span class="line">    <span class="keyword">const</span> scene = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Scene</span>()</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化透视相机</span></span><br><span class="line">    <span class="keyword">const</span> camera = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">PerspectiveCamera</span>(<span class="number">75</span>, <span class="variable language_">window</span>.<span class="property">innerWidth</span> / <span class="variable language_">window</span>.<span class="property">innerHeight</span>, <span class="number">0.1</span>, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 设置相机位置</span></span><br><span class="line">    camera.<span class="property">position</span>.<span class="property">z</span> = <span class="number">5</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化渲染器, 并将画布添加到页面元素中</span></span><br><span class="line">    <span class="keyword">const</span> renderer = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">WebGLRenderer</span>()</span><br><span class="line">    renderer.<span class="title function_">setSize</span>(<span class="variable language_">window</span>.<span class="property">innerWidth</span>, <span class="variable language_">window</span>.<span class="property">innerHeight</span>)</span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(renderer.<span class="property">domElement</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 渲染场景和相机</span></span><br><span class="line">    renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line"></span><br><span class="line">几何体(geomentry)：几何体就像物体的血肉,决定了物体长什么样子。</span><br><span class="line">  <span class="comment">// 添加立方体</span></span><br><span class="line">    <span class="keyword">const</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建物体</span></span><br><span class="line">    <span class="keyword">var</span> mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>( geometry)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将物体添加到场景中</span></span><br><span class="line">    scene.<span class="title function_">add</span>(mesh)</span><br><span class="line"></span><br><span class="line">创建材质：材质就像物体的皮肤，决定了几何体的外表, 不同的材质渲染出不同的效果, 比如一个几何体看起来是否像金属、透明与否、或者显示为线框。</span><br><span class="line"><span class="comment">// 添加立方体</span></span><br><span class="line">    <span class="keyword">const</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建材质</span></span><br><span class="line">    material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">color</span>: <span class="number">0xFF0000</span> &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建物体</span></span><br><span class="line">    <span class="keyword">var</span> mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>( geometry, material)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将物体添加到场景中</span></span><br><span class="line">    scene.<span class="title function_">add</span>(mesh)</span><br><span class="line"></span><br><span class="line">渲染循环：</span><br><span class="line">调用requestAnimationFrame方法对整个场景进行实时渲染</span><br><span class="line"><span class="comment">// 渲染</span></span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">render</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">        renderer.<span class="title function_">render</span>(scene, camera)</span><br><span class="line">        <span class="title function_">requestAnimationFrame</span>(render)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>()</span><br><span class="line"></span><br><span class="line">轨道控制(<span class="title class_">OrbitControls</span>):使用控制器实现移动、改变视角等效果</span><br><span class="line"> <span class="keyword">import</span> &#123; <span class="title class_">OrbitControls</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;three/examples/jsm/controls/OrbitControls&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> container = renderer.<span class="property">domElement</span></span><br><span class="line">    <span class="comment">// 添加控制器</span></span><br><span class="line">    <span class="keyword">const</span> controls = <span class="keyword">new</span> <span class="title class_">OrbitControls</span>(camera, container)</span><br><span class="line">    <span class="comment">// 启用惯性</span></span><br><span class="line">    controls.<span class="property">enableDamping</span> = <span class="literal">true</span></span><br><span class="line">    <span class="comment">// 相机向外移动极限</span></span><br><span class="line">    controls.<span class="property">maxDistance</span> = <span class="number">4.5</span></span><br><span class="line">在加入渲染循环和轨道控制器之后，为了展示效果更明显，我们将<span class="number">6</span>个面涂上不同的颜色:</span><br><span class="line">    <span class="keyword">const</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">const</span> colors = [</span><br><span class="line">        &#123; <span class="attr">color</span>: <span class="number">0xff0000</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">color</span>: <span class="number">0x00ff00</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">color</span>: <span class="number">0x0000ff</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">color</span>: <span class="number">0xff00ff</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">color</span>: <span class="number">0xffff00</span> &#125;,</span><br><span class="line">        &#123; <span class="attr">color</span>: <span class="number">0x00ffff</span> &#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">const</span> material = []</span><br><span class="line">    <span class="comment">// 将6个面涂上不同的颜色</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i=<span class="number">0</span>, len=colors.<span class="property">length</span>; i&lt;len; i++) &#123;</span><br><span class="line">        material.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(colors[i]))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 创建物体</span></span><br><span class="line">    <span class="keyword">var</span> mesh = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>( geometry, material)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 将物体添加到场景中</span></span><br><span class="line">    scene.<span class="title function_">add</span>(mesh)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">天空盒贴图：</span><br><span class="line">使用.<span class="title class_">TextureLoader</span>()加载图片，转化为纹理，通过属性map设置材质纹理。就实现了简单的纹理加载</span><br><span class="line">    <span class="comment">// 添加立方体</span></span><br><span class="line">    <span class="keyword">const</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">BoxGeometry</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>)</span><br><span class="line">    <span class="comment">// 左右、上下、后前</span></span><br><span class="line">    <span class="keyword">const</span> urls = [</span><br><span class="line">        <span class="string">&#x27;https://cdn.huodao.hk/upload_img/20220620/3e532822bd445485d27677ca55a79b10.jpg?proportion=1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://cdn.huodao.hk/upload_img/20220620/cebf6fbcafdf4f5c945e0881418e34ec.jpg?proportion=1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://cdn.huodao.hk/upload_img/20220620/273081d1896fc66866842543090916d3.jpg?proportion=1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://cdn.huodao.hk/upload_img/20220620/8747f61fd2215aa748dd2afb6dce3822.jpg?proportion=1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://cdn.huodao.hk/upload_img/20220620/c34262935511d61b2e9f456b689f5c1c.jpg?proportion=1&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;https://cdn.huodao.hk/upload_img/20220620/722d2bf88f6087800ddf116511b51e73.jpg?proportion=1&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">const</span> boxMaterial = []</span><br><span class="line"></span><br><span class="line">    urls.<span class="title function_">forEach</span>(<span class="function">(<span class="params">item</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 纹理加载</span></span><br><span class="line">        <span class="keyword">const</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(item)</span><br><span class="line">        <span class="comment">// 通过旋转修复天花板和地板</span></span><br><span class="line">        <span class="keyword">if</span> (item == <span class="string">&#x27;4_u&#x27;</span> || item == <span class="string">&#x27;4_d&#x27;</span>) &#123;</span><br><span class="line">        texture.<span class="property">rotation</span> = <span class="title class_">Math</span>.<span class="property">PI</span></span><br><span class="line">        texture.<span class="property">center</span> = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector2</span>(<span class="number">0.5</span>, <span class="number">0.5</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 创建材质</span></span><br><span class="line">        boxMaterial.<span class="title function_">push</span>(<span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">map</span>: texture &#125;))</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">const</span> house = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, boxMaterial)</span><br><span class="line">    house.<span class="property">geometry</span>.<span class="title function_">scale</span>(<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">    scene.<span class="title function_">add</span>(house)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">全景图片贴图</span><br><span class="line">全景图贴图就是使用一张鱼眼全景图片以纹理的形式添加到球体上，如地球仪</span><br><span class="line"> <span class="keyword">const</span> url = <span class="string">&#x27;https://cdn.huodao.hk/upload_img/20220621/6bd594e62ea5654c03d7b82718443751.png?proportion=1.99&#x27;</span></span><br><span class="line">    <span class="keyword">const</span> geometry = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SphereGeometry</span>(<span class="number">5</span>, <span class="number">32</span>, <span class="number">32</span>)</span><br><span class="line">    <span class="keyword">const</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(url)</span><br><span class="line">    <span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">MeshBasicMaterial</span>(&#123; <span class="attr">map</span>: texture &#125;)</span><br><span class="line">    <span class="keyword">const</span> sphere = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Mesh</span>(geometry, material)</span><br><span class="line">    sphere.<span class="property">geometry</span>.<span class="title function_">scale</span>(<span class="number">1</span>, <span class="number">1</span>, -<span class="number">1</span>)</span><br><span class="line">    scene.<span class="title function_">add</span>(sphere)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Sprite</span>(精灵模型)：<span class="title class_">Sprite</span>的特点是无论旋转到什么角度，sprite所制作的元素都是正对着相机，可以理解为像向日葵始终正面朝向相机。</span><br><span class="line"> <span class="title function_">createSprite</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">&#x27;https://cdn.huodao.hk/upload_img/20220621/1eca2b6efe7aab01d42ca45345f46a90.png?proportion=0.98&#x27;</span></span><br><span class="line">        <span class="keyword">const</span> texture = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">TextureLoader</span>().<span class="title function_">load</span>(url)</span><br><span class="line">        <span class="keyword">const</span> material = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">SpriteMaterial</span>(&#123; <span class="attr">map</span>: texture &#125;)</span><br><span class="line">        <span class="keyword">const</span> sprite = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Sprite</span>(material)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 设置大小、位置、内容</span></span><br><span class="line">        sprite.<span class="property">scale</span>.<span class="title function_">set</span>(<span class="number">0.5</span>, <span class="number">0.5</span>, <span class="number">0.5</span>)</span><br><span class="line">        sprite.<span class="property">position</span>.<span class="title function_">set</span>(<span class="number">0.4</span>, <span class="number">0</span>, -<span class="number">4.5</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 加入场景中</span></span><br><span class="line">        scene.<span class="title function_">add</span>(sprite)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title class_">Raycaster</span>（光线投射）</span><br><span class="line">在3D空间要想点击我们上面创建的精灵模型, 要用到<span class="title class_">Raycaster</span>（光线投射）, 原理就是在你鼠标点击的位置发射一根射线，被这根射线射中的物体都被记录下来。然后在根据被记录下来的物体去判断点中的物体。</span><br><span class="line">在光线投射之前，我们要做以下几步</span><br><span class="line"></span><br><span class="line"><span class="number">1.</span>获取鼠标在屏幕的坐标</span><br><span class="line"><span class="number">2.</span>屏幕坐标转标准设备坐标</span><br><span class="line"><span class="number">3.</span>标准设备坐标转世界坐标</span><br><span class="line"></span><br><span class="line">根据世界坐标和相机生成：射线投射方向单位向量，再根据射线投射方向单位向量创建射线投射器对象</span><br><span class="line">    <span class="title class_">GoToRoom</span>(e) &#123;</span><br><span class="line">        e.<span class="title function_">preventDefault</span>()</span><br><span class="line">        <span class="keyword">const</span> &#123; clientX, clientY &#125; = e</span><br><span class="line">        <span class="keyword">const</span> dom = renderer.<span class="property">domElement</span></span><br><span class="line">        <span class="comment">// 拿到canvas画布到屏幕的距离</span></span><br><span class="line">        <span class="keyword">const</span> domRect = dom.<span class="title function_">getBoundingClientRect</span>()</span><br><span class="line">        <span class="comment">// 计算标准设备坐标 - 归一化设备坐标</span></span><br><span class="line">        <span class="keyword">const</span> x = ((clientX - domRect.<span class="property">left</span>) / dom.<span class="property">clientWidth</span>) * <span class="number">2</span> - <span class="number">1</span></span><br><span class="line">        <span class="keyword">const</span> y = -((clientY - domRect.<span class="property">top</span>) / dom.<span class="property">clientHeight</span>) * <span class="number">2</span> + <span class="number">1</span></span><br><span class="line">        <span class="keyword">const</span> vector = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Vector3</span>(x, y)</span><br><span class="line">        <span class="comment">// 转世界坐标</span></span><br><span class="line">        <span class="keyword">const</span> worldVector = vector.<span class="title function_">unproject</span>(camera)</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;世界坐标&#x27;</span>, worldVector)</span><br><span class="line">        <span class="comment">// 向量相减，并获取单位向量</span></span><br><span class="line">        <span class="keyword">const</span> ray = worldVector.<span class="title function_">sub</span>(camera.<span class="property">position</span>).<span class="title function_">normalize</span>()</span><br><span class="line">        <span class="comment">// 射线投射对象， 第一个参数是射线原点 第二个参数是射线方向</span></span><br><span class="line">        <span class="keyword">const</span> raycaster = <span class="keyword">new</span> <span class="variable constant_">THREE</span>.<span class="title class_">Raycaster</span>(camera.<span class="property">position</span>, ray)</span><br><span class="line">        raycaster.<span class="property">camera</span> = camera</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回射线选中的对象 //第一个参数是检测的目标对象 第二个参数是目标对象的子元素</span></span><br><span class="line">        <span class="keyword">const</span> intersects= raycaster.<span class="title function_">intersectObjects</span>(scene.<span class="property">children</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (intersects.<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;捕获到对象&quot;</span>, intersects);</span><br><span class="line">            <span class="keyword">const</span> intersect = intersects[<span class="number">0</span>]</span><br><span class="line">            <span class="keyword">if</span> (intersect.<span class="property">object</span>?.<span class="property">type</span> == <span class="string">&quot;Sprite&quot;</span> &amp;&amp; intersect.<span class="property">object</span>?.<span class="property">content</span>?.<span class="property">isComeAround</span>) &#123;</span><br><span class="line">            <span class="comment">// 清除当前房间和精灵模型</span></span><br><span class="line">            scene.<span class="title function_">remove</span>(sphere)</span><br><span class="line">            scene.<span class="title function_">remove</span>(sprite)</span><br><span class="line">            <span class="keyword">if</span> (intersect.<span class="property">object</span>?.<span class="property">content</span>?.<span class="property">to</span> == <span class="string">&#x27;小明家&#x27;</span>) &#123;</span><br><span class="line">                cube = cube || <span class="variable language_">this</span>.<span class="title function_">createCube</span>()</span><br><span class="line">                scene.<span class="title function_">add</span>(cube)</span><br><span class="line">            &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;没捕获到对象&quot;</span>); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">initEvent</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="variable language_">this</span>.<span class="property">GoToRoom</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">全部代码：</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;hello&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;three&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="comment">&lt;!-- &lt;img src=&quot;../../public/assets/kt_b.jpg&quot; alt=&quot;&quot;&gt; --&gt;</span></span></span><br><span class="line"><span class="language-xml">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import * as THREE from &#x27;three&#x27;</span><br><span class="line">  import &#123; OrbitControls &#125; from &#x27;three/examples/jsm/controls/OrbitControls&#x27;</span><br><span class="line">  import &#123; FBXLoader &#125; from &#x27;three/examples/jsm/loaders/FBXLoader&#x27;</span><br><span class="line">  let scene = null</span><br><span class="line">  let camera = null</span><br><span class="line">  let renderer = null</span><br><span class="line">  let cube = null</span><br><span class="line">  let sphere = null</span><br><span class="line">  let sprite = null</span><br><span class="line"></span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &quot;HelloWorld&quot;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      msg: String,</span><br><span class="line">    &#125;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return &#123;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted() &#123;</span><br><span class="line">      window.removeEventListener(&#x27;click&#x27;, this.GoToRoom)</span><br><span class="line">      this.init()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">      init() &#123;</span><br><span class="line">        // 初始化场景</span><br><span class="line">        this.initScene()</span><br><span class="line">        // 初始化相机</span><br><span class="line">        this.initcamera()</span><br><span class="line">        // 构建渲染器</span><br><span class="line">        this.initRenderer()</span><br><span class="line">        // 创建立方体</span><br><span class="line">        this.createCube()</span><br><span class="line">        // 创建球体</span><br><span class="line">        // this.createSphere()</span><br><span class="line">        // 添加房屋模型</span><br><span class="line">        // this.loadRoomModel()</span><br><span class="line">        // 添加光源</span><br><span class="line">        this.addLight()</span><br><span class="line">        // 交互点</span><br><span class="line">        // this.createSprite()</span><br><span class="line">        // 渲染循环</span><br><span class="line">        this.render()</span><br><span class="line">        // 初始化事件</span><br><span class="line">        this.initEvent()</span><br><span class="line">      &#125;,</span><br><span class="line">      initScene() &#123;</span><br><span class="line">        scene = new THREE.Scene()</span><br><span class="line">      &#125;,</span><br><span class="line">      initcamera() &#123;</span><br><span class="line">        camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000)</span><br><span class="line">        camera.position.z = 0.5</span><br><span class="line">        // camera.position.y = 10</span><br><span class="line">        // camera.position.x = 10</span><br><span class="line">      &#125;,</span><br><span class="line">      initRenderer() &#123;</span><br><span class="line">        renderer = new THREE.WebGLRenderer()</span><br><span class="line">        renderer.setSize(window.innerWidth, window.innerHeight)</span><br><span class="line">        // 添加控制器</span><br><span class="line">        this.initControls(renderer.domElement)</span><br><span class="line">        // 将渲染元素添加到页面</span><br><span class="line">        this.$refs.three.appendChild(renderer.domElement)</span><br><span class="line">      &#125;,</span><br><span class="line">      createCube() &#123;</span><br><span class="line">        const geometry = new THREE.BoxGeometry(10, 10, 10)</span><br><span class="line">        const colors = [</span><br><span class="line">          &#123; color: 0xff0000 &#125;,</span><br><span class="line">          &#123; color: 0x00ff00 &#125;,</span><br><span class="line">          &#123; color: 0x0000ff &#125;,</span><br><span class="line">          &#123; color: 0xff00ff &#125;,</span><br><span class="line">          &#123; color: 0xffff00 &#125;,</span><br><span class="line">          &#123; color: 0x00ffff &#125;</span><br><span class="line">        ]</span><br><span class="line">        const material = []</span><br><span class="line">        for(let i=0, len=colors.length; i&lt;len; i++) &#123;</span><br><span class="line">          material.push(new THREE.MeshBasicMaterial(colors[i]))</span><br><span class="line">        &#125;</span><br><span class="line">        // 纹理贴图</span><br><span class="line">        // const material = this.texture()</span><br><span class="line">        cube = new THREE.Mesh(geometry, material)</span><br><span class="line">        // 内外翻转</span><br><span class="line">        // cube.geometry.scale(1, 1, -1)</span><br><span class="line">        scene.add(cube)</span><br><span class="line">      &#125;,</span><br><span class="line">      texture() &#123;</span><br><span class="line">        // 左右、上下、后前</span><br><span class="line">        const urls = [</span><br><span class="line">          &#x27;http://cdn.huodao.hk/upload_img/20220620/3e532822bd445485d27677ca55a79b10.jpg?proportion=1&#x27;,</span><br><span class="line">          &#x27;http://cdn.huodao.hk/upload_img/20220620/cebf6fbcafdf4f5c945e0881418e34ec.jpg?proportion=1&#x27;,</span><br><span class="line">          &#x27;http://cdn.huodao.hk/upload_img/20220620/273081d1896fc66866842543090916d3.jpg?proportion=1&#x27;,</span><br><span class="line">          &#x27;http://cdn.huodao.hk/upload_img/20220620/8747f61fd2215aa748dd2afb6dce3822.jpg?proportion=1&#x27;,</span><br><span class="line">          &#x27;http://cdn.huodao.hk/upload_img/20220620/c34262935511d61b2e9f456b689f5c1c.jpg?proportion=1&#x27;,</span><br><span class="line">          &#x27;http://cdn.huodao.hk/upload_img/20220620/722d2bf88f6087800ddf116511b51e73.jpg?proportion=1&#x27;</span><br><span class="line">        ]</span><br><span class="line">        const material = []</span><br><span class="line">        for(let i=0, len=urls.length; i&lt;len; i++) &#123;</span><br><span class="line">          const texture = new THREE.TextureLoader().load(urls[i])</span><br><span class="line">          if (i == 2 || i==3) &#123;</span><br><span class="line">            texture.rotation = Math.PI</span><br><span class="line">            texture.center = new THREE.Vector2(0.5, 0.5)</span><br><span class="line">          &#125;</span><br><span class="line">          material.push(new THREE.MeshBasicMaterial(&#123; map: texture &#125;))</span><br><span class="line">        &#125;</span><br><span class="line">        return material</span><br><span class="line">      &#125;,</span><br><span class="line">      createSphere() &#123;</span><br><span class="line">        const url = &#x27;http://cdn.huodao.hk/upload_img/20220621/6bd594e62ea5654c03d7b82718443751.png?proportion=1.99&#x27;</span><br><span class="line">        const geometry = new THREE.SphereGeometry(5, 32, 32)</span><br><span class="line">        const texture = new THREE.TextureLoader().load(url)</span><br><span class="line">        const material = new THREE.MeshBasicMaterial(&#123; map: texture &#125;)</span><br><span class="line">        sphere = new THREE.Mesh(geometry, material)</span><br><span class="line">        sphere.geometry.scale(1, 1, -1)</span><br><span class="line">        scene.add(sphere)</span><br><span class="line">      &#125;,</span><br><span class="line">      createSprite() &#123;</span><br><span class="line">        const url = &#x27;http://cdn.huodao.hk/upload_img/20220621/1eca2b6efe7aab01d42ca45345f46a90.png?proportion=0.98&#x27;</span><br><span class="line">        const texture = new THREE.TextureLoader().load(url)</span><br><span class="line">        const material = new THREE.SpriteMaterial(&#123; map: texture &#125;)</span><br><span class="line">        sprite = new THREE.Sprite(material)</span><br><span class="line">        </span><br><span class="line">        // 设置大小、位置、内容</span><br><span class="line">        sprite.scale.set(0.5, 0.5, 0.5)</span><br><span class="line">        sprite.position.set(0.4, 0, -4.5)</span><br><span class="line">        sprite.content = &#123;</span><br><span class="line">          title: &#x27;串门&#x27;,</span><br><span class="line">          to: &#x27;小明家&#x27;,</span><br><span class="line">          isComeAround: true</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 加入场景中</span><br><span class="line">        scene.add(sprite)</span><br><span class="line">      &#125;,</span><br><span class="line">      loadRoomModel() &#123;</span><br><span class="line">        const loader = new FBXLoader()</span><br><span class="line">        loader.load(&#x27;/assets/untitled.fbx&#x27;, (fbx) =&gt; &#123;</span><br><span class="line">          console.log(&#x27;fbx--&#x27;, fbx)</span><br><span class="line">          fbx.scale.set(0.01, 0.01, 0.01)</span><br><span class="line">          scene.add(fbx)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;,</span><br><span class="line">      addLight() &#123;</span><br><span class="line">        // 添加半球光源 -- 户外效果</span><br><span class="line">        const light = new THREE.HemisphereLight(0xffffff, 0x444444)</span><br><span class="line">        light.position.set(0, 200, 0)</span><br><span class="line">        scene.add(light)</span><br><span class="line">      &#125;,</span><br><span class="line">      render() &#123;</span><br><span class="line">        renderer.render(scene, camera)</span><br><span class="line">        requestAnimationFrame(this.render)</span><br><span class="line">      &#125;,</span><br><span class="line">      initControls(container) &#123;</span><br><span class="line">        const controls = new OrbitControls(camera, container)</span><br><span class="line">        controls.enableDamping = true</span><br><span class="line">        controls.maxDistance = 50</span><br><span class="line">      &#125;,</span><br><span class="line">      GoToRoom(e) &#123;</span><br><span class="line">        e.preventDefault()</span><br><span class="line">        const &#123; clientX, clientY &#125; = e</span><br><span class="line">        const dom = renderer.domElement</span><br><span class="line">        // 拿到canvas画布到屏幕的距离</span><br><span class="line">        const domRect = dom.getBoundingClientRect()</span><br><span class="line">        // 计算标准设备坐标</span><br><span class="line">        const x = ((clientX - domRect.left) / dom.clientWidth) * 2 - 1</span><br><span class="line">        const y = -((clientY - domRect.top) / dom.clientHeight) * 2 + 1</span><br><span class="line">        console.log(&#x27;计算标准设备坐标--&#x27;, clientX, clientY, x, y, domRect, dom.clientWidth, dom.clientHeight)</span><br><span class="line">        const vector = new THREE.Vector3(x, y)</span><br><span class="line">        // 转世界坐标</span><br><span class="line">        const worldVector = vector.unproject(camera)</span><br><span class="line">        console.log(&#x27;转世界坐标&#x27;, worldVector)</span><br><span class="line">        // 射线</span><br><span class="line">        const ray = worldVector.sub(camera.position).normalize()</span><br><span class="line">        // 射线投射对象</span><br><span class="line">        const raycaster = new THREE.Raycaster(camera.position, ray)</span><br><span class="line">        raycaster.camera = camera</span><br><span class="line"></span><br><span class="line">        //返回射线选中的对象 //第一个参数是检测的目标对象 第二个参数是目标对象的子元素</span><br><span class="line">        const intersects= raycaster.intersectObjects(scene.children)</span><br><span class="line"></span><br><span class="line">        if (intersects.length &gt; 0) &#123;</span><br><span class="line">          console.log(&quot;捕获到对象&quot;, intersects);</span><br><span class="line">          const intersect = intersects[0]</span><br><span class="line">          if (intersect.object?.type == &quot;Sprite&quot; &amp;&amp; intersect.object?.content?.isComeAround) &#123;</span><br><span class="line">            // 清除当前房间和精灵模型</span><br><span class="line">            scene.remove(sphere)</span><br><span class="line">            scene.remove(sprite)</span><br><span class="line">            if (intersect.object?.content?.to == &#x27;小明家&#x27;) &#123;</span><br><span class="line">              cube = cube || this.createCube()</span><br><span class="line">              scene.add(cube)</span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">          console.log(&quot;没捕获到对象&quot;); </span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      initEvent() &#123;</span><br><span class="line">        window.addEventListener(&#x27;click&#x27;, this.GoToRoom)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- Add &quot;scoped&quot; attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="单点登录"><a href="#单点登录" class="headerlink" title="单点登录"></a>单点登录</h1><h2 id="什么是单点登录？"><a href="#什么是单点登录？" class="headerlink" title="什么是单点登录？"></a>什么是单点登录？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>什么是单点登录？</span><br><span class="line">单点登录的英文名叫做：<span class="title class_">Single</span> <span class="title class_">Sign</span> <span class="title class_">On</span>（简称<span class="variable constant_">SSO</span>），指在同一帐号平台下的多个应用系统中，用户只需登录一次，即可访问所有相互信任的系统。简而言之，多个系统，统一登陆。</span><br></pre></td></tr></table></figure><h2 id="单点登录的原理？"><a href="#单点登录的原理？" class="headerlink" title="单点登录的原理？"></a>单点登录的原理？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>单点登录的原理？</span><br><span class="line">sso需要一个独立的认证中心，所有子系统都通过认证中心的登录入口进行登录，登录时带上自己的地址，子系统只接受认证中心的授权，授权通过令牌（token）实现，sso认证中心验证用户的用户名密码正确，创建全局会话和token，token作为参数发送给各个子系统，子系统拿到token，即得到了授权，可以借此创建局部会话，局部会话登录方式与单系统的登录方式相同。</span><br></pre></td></tr></table></figure><h2 id="单点登录的实现方式？"><a href="#单点登录的实现方式？" class="headerlink" title="单点登录的实现方式？"></a>单点登录的实现方式？</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span>通过分布式session</span><br><span class="line">如果是通过浏览器页面传递信息，前端拿到用户信息后，可以调用 B系统 服务端接口进行登录，与B系统建立会话。</span><br><span class="line"></span><br><span class="line"><span class="number">2.</span>如果是传递到 B系统 后端服务器，需要在服务器进行登录，然后带上用户信息重定向到B系统前端页面，这时候建立会话完成。</span><br><span class="line"></span><br><span class="line"><span class="number">3.</span>在前后端分离的情况下，我们一般采用第一种方式进行数据传递。</span><br><span class="line"></span><br><span class="line">面试官：“从你的两种方案中，不管是浏览器层面的跳转，还是后端重定向，都需要带上用户信息。如果是方式<span class="number">1</span>，那么这个用户信息放在哪里呢，是<span class="variable constant_">URL</span>链接还是其他地方”。</span><br><span class="line"></span><br><span class="line">我：既然是通过浏览器传递数据，有两种方式，第一种是通过在<span class="title class_">Url</span>上拼接参数，比如 <span class="attr">http</span>:<span class="comment">//www.baidu.com?userId=123 。</span></span><br><span class="line"></span><br><span class="line">第二种是通过<span class="title class_">Cookie</span>的形式传递，但是由于<span class="title class_">Cookie</span>不能跨域，就导致了部分局限性。</span><br><span class="line"></span><br><span class="line">安全性如何保证：</span><br><span class="line">身为一个对自我要求很高的程序员，这肯定难不倒我。保证数据的安全性总的来说有几种实现：</span><br><span class="line"></span><br><span class="line">从软件层面上进行保证，比如说可见性等。</span><br><span class="line">通过加密算法对数据进行加密。</span><br><span class="line">因为从浏览器层面保证数据不可见不太现实，所以可以对数据进行加密，并且这个数据加解密的过程应该由服务端来实现。</span><br><span class="line"></span><br><span class="line">比如：用户在 系统A 登录后，系统A 的服务端通过某种加密算法以及某个秘钥对用户数据进行加密，接着返回给前端。系统A 页面跳转到系统B时带上这个加密信息，接着调用系统B服务端接口进行登录。系统B 通过解密数据获取登录者的用户信息进行登录即可。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">你们的单点登录具体是如何实现的？</span><br><span class="line">“重头戏来了”，因为我们所有系统的顶级域名都是一样的，因此不会存在跨域问题。为了降低接入成本，我们采用的是 <span class="title class_">Cookie</span>加密 的形式。</span><br><span class="line"></span><br><span class="line">比如用户在 系统A 登录后，系统A会往浏览器中写入<span class="title class_">Cookie</span>, <span class="title class_">Key</span> 为userInfo，value值为用户A的accountId。当然这个accountId是加密过的。</span><br><span class="line"></span><br><span class="line">然后用户在访问系统B的页面时，由于属于同一个顶级域名，会带上 <span class="title class_">Cookie</span>。调用系统B接口时，判断 <span class="title class_">Cookie</span>中存在用户信息，如果存在，通过<span class="title class_">Secret</span>进行解密获取用户的accountId，随后把用户数据放到<span class="title class_">Session</span>中，从而进行登录。</span><br><span class="line"></span><br><span class="line">这样做还有一个好处就是：用户可以直接在浏览器中输入域名进行跳转，而不是需要在 系统A 点击跳转到系统B。毕竟一般的用户都是把链接保存在书签的</span><br><span class="line"></span><br><span class="line">加密的<span class="title class_">Secret</span>是怎么实现的？</span><br><span class="line">我们的<span class="title class_">Secret</span>采用的是系统约定的形式，我猜面试官肯定会想<span class="title class_">Secret</span>全都一样会不会不安全。</span><br><span class="line"></span><br><span class="line">这个值在系统中以加密的形式进行存储，并且使用的配置中心，再加上我们系统使用的是专用网络，基本不存在泄漏的风险。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">用户登录的时效性怎么保证？</span><br><span class="line">我：在单系统条件下，如果是标准的 <span class="title class_">Cookie</span>-<span class="title class_">Session</span> 机制，用户登录后调用接口，这个 <span class="title class_">Session</span> 会进行续签，从而让会话保持下去。会话的生命周期变成了主要由服务端来保证</span><br><span class="line"></span><br><span class="line">但是通过目前的这种形式，通过<span class="title class_">Cookie</span>中是否存在用户信息判断是否登录，会出现一个情况就是只要这个用户信息也就是<span class="title class_">Cookie</span>一直存在，那么用户就永远不会退出。（因为我们只会对数据进行解密，并且用户在登录后，<span class="title class_">Cookie</span>并不会设置有效期），也就是说这个会话的生命周期变成了由 <span class="title class_">Cookie</span> 来保证。</span><br><span class="line"></span><br><span class="line">所以我们有两种方案，一种是对 <span class="title class_">Cookie</span> 添加过期时间，比如 <span class="number">30</span> 分钟，只要<span class="title class_">Cookie</span>消失了，说明用户登录状态失效。第二种是在userInfo这个<span class="title class_">Cookie</span>的<span class="title class_">Value</span>值中添加过期信息，然后每次接口调用时服务端判断是否超时。</span><br><span class="line"></span><br><span class="line">还有其他解决方案：</span><br><span class="line">我：就知道你要问这个。我们可以把系统A 和 系统B 的用户会话信息由服务端控制，进行统一控制。比如使用<span class="title class_">Spring</span>-<span class="title class_">Session</span>方案，使用同一个 <span class="title class_">Redis</span>。这样的话用户在系统A登录后，将用户会话信息保存在<span class="title class_">Redis</span>中。然后在打开系统B时，</span><br><span class="line">因为<span class="title class_">Cookie</span>同域，调用 系统B 接口时，上传的是同一个<span class="title class_">SessionId</span>，系统B从<span class="title class_">Redis</span>中判断用户已经登录了，返回登录成功，进行续签。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">面试官：这样一来，系统A 和 系统B 都会存在很多相同的后端代码，一个改动其他系统也要跟着改。到时候如果有很多个系统，修改成本是不是太大了？</span><br><span class="line"></span><br><span class="line">我：确实是的。所以我们可以把 系统A 和 系统B 的那些代码搞成个服务端的认证中心，这样一来不是方便多了。而且<span class="title class_">Cookie</span>始终有着跨域的问题。按照这个思路，我是不是可以把前端页面也搞成同一个，形成认证中心的前端页面。</span><br><span class="line"></span><br><span class="line">“等等，这不就是<span class="variable constant_">CAS</span>的设计思路嘛”</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue2的相关问题 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>照片</title>
      <link href="/Gallery/index.html"/>
      <url>/Gallery/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="/link/index.html"/>
      <url>/link/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>关于</title>
      <link href="/about/index.html"/>
      <url>/about/index.html</url>
      
        <content type="html"><![CDATA[<!-- GitCalendar容器 --><div id="gitZone"></div>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>电影</title>
      <link href="/movies/index.html"/>
      <url>/movies/index.html</url>
      
        <content type="html"><![CDATA[<details class="folding-tag" cyan open><summary> 十大恐怖片 </summary>              <div class='content'>              <p><div align=center class="aspect-ratio"><br>    <iframe src="//player.bilibili.com/player.html?aid=761778069&bvid=BV1764y1t7A9&cid=375076582&page=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">     </iframe><br>&lt;/div</p>              </div>            </details><details class="folding-tag" cyan open><summary> 十大喜剧片 </summary>              <div class='content'>              <p><div align=center class="aspect-ratio"><br>   <iframe src="//player.bilibili.com/player.html?aid=249123751&bvid=BV1Sv411J73z&cid=365168718&page=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">  </iframe><br>&lt;/div</p>              </div>            </details><details class="folding-tag" cyan open><summary> 十大爱情片 </summary>              <div class='content'>              <p><div align=center class="aspect-ratio"></p><p><iframe src="//player.bilibili.com/player.html?aid=249123751&bvid=BV1Sv411J73z&cid=365168718&page=1"     scrolling="no"     border="0"     frameborder="no"     framespacing="0"     high_quality=1    danmaku=1     allowfullscreen="true">  </iframe><br>&lt;/div</p>              </div>            </details>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>我的歌单</title>
      <link href="/music/index.html"/>
      <url>/music/index.html</url>
      
        <content type="html"><![CDATA[<font color=#0c74d6 size=3 face="黑体"></font><details class="folding-tag" cyan open><summary> 天若有情 </summary>              <div class='content'>              <iframe frameborder="no" border="0" marginwidth="0" marginheight="0"  width=300 height=86 src="//music.163.com/outchain/player?type=2&id=438204707&auto=1&height=66"></iframe>              </div>            </details><details class="folding-tag" cyan open><summary> 我想更懂你 </summary>              <div class='content'>              <iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=300 height=86 src="//music.163.com/outchain/player?type=2&id=139703&auto=1&height=66"></iframe>              </div>            </details><details class="folding-tag" cyan open><summary> 来自网易云的歌单 </summary>              <div class='content'>              <div id="aplayer-ceXfXtJq" class="aplayer aplayer-tag-marker meting-tag-marker"     data-id="7050074027" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="true" data-mutex="false" data-listmaxheight="400px" data-preload="none" data-theme="#ad7a86"></div>              </div>            </details>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/cat.css"/>
      <url>/css/cat.css</url>
      
        <content type="html"><![CDATA[body::-webkit-scrollbar {    width: 0;}.neko {    width: 64px;    height: 64px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812db74be9.png");    position: absolute;    right: 32px;    background-repeat: no-repeat;    background-size: contain;    transform: translateX(50%);    cursor: pointer;    font-family: tzy;    font-weight: 600;    font-size: 16px;    color: #6f42c1;    display: none;}.neko::after {    display: none;    width: 100px;    height: 100px;    background-image: url("https://bu.dusays.com/2022/07/20/62d812d95e6f5.png");    background-size: contain;    z-index: 9999;    position: absolute;    right: 50%;    text-align: center;    line-height: 100px;    top: -115%;}.neko.showMsg::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko:hover::after {    content: attr(data-msg);    display: block;    overflow: hidden;    text-overflow: ellipsis;}.neko.fontColor::after {    color: #333;}/** * @description: 滚动条样式  跟猫二选一 */@media screen and (max-width:992px) {    ::-webkit-scrollbar {        width: 8px !important;        height: 8px !important    }    ::-webkit-scrollbar-track {        border-radius: 2em;    }    ::-webkit-scrollbar-thumb {        background-color: rgb(255 255 255 / .3);        background-image: -webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent);        border-radius: 2em    }    ::-webkit-scrollbar-corner {        background-color: transparent    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/coin.css"/>
      <url>/css/coin.css</url>
      
        <content type="html"><![CDATA[.tip-button {    border: 0;    border-radius: 0.25rem;    cursor: pointer;    font-size: 20px;    font-weight: 600;    height: 2.6rem;    margin-bottom: -4rem;    outline: 0;    position: relative;    top: 0;    transform-origin: 0% 100%;    transition: transform 50ms ease-in-out;    width: auto;    -webkit-tap-highlight-color: transparent;  }  .tip-button:active {    transform: rotate(4deg);  }  .tip-button.clicked {    animation: 150ms ease-in-out 1 shake;    pointer-events: none;  }  .tip-button.clicked .tip-button__text {    opacity: 0;    transition: opacity 100ms linear 200ms;  }  .tip-button.clicked::before {    height: 0.5rem;    width: 60%;    background: var(button-hover-color);  }  .tip-button.clicked .coin {    transition: margin-bottom 1s linear 200ms;    margin-bottom: 0;  }  .tip-button.shrink-landing::before {    transition: width 200ms ease-in;    width: 0;  }  .tip-button.coin-landed::after {    opacity: 1;    transform: scale(1);    transform-origin: 50% 100%;  }  .tip-button.coin-landed .coin-wrapper {    background: radial-gradient(circle at 35% 97%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at 45% 92%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.02rem), radial-gradient(circle at 55% 98%, rgba(3, 16, 50, 0.4) 0.04rem, transparent 0.04rem), radial-gradient(circle at 65% 96%, rgba(3, 16, 50, 0.4) 0.06rem, transparent 0.06rem);    background-position: center bottom;    background-size: 100%;    bottom: -1rem;    opacity: 0;    transform: scale(2) translateY(-10px);  }  .tip-button__text {    color: #fff;    margin-right: 1.8rem;    opacity: 1;    position: relative;    transition: opacity 100ms linear 500ms;    z-index: 3;  }  .tip-button::before {    border-radius: 0.25rem;    bottom: 0;    content: '';    display: block;    height: 100%;    left: 50%;    position: absolute;    transform: translateX(-50%);    transition: height 250ms ease-in-out 400ms, width 250ms ease-in-out 300ms;    width: 100%;    z-index: 2;  }  .tip-button::after {    bottom: -1rem;    color: white;    content: 'ヾ(≧O≦)〃嗷~'; /*点击后显示的内容*/    height: 110%;    left: 0;    opacity: 0;    position: absolute;    pointer-events: none;    text-align: center;    transform: scale(0);    transform-origin: 50% 20%;    transition: transform 200ms cubic-bezier(0, 0, 0.35, 1.43);    width: 100%;    z-index: 1;  }    .coin-wrapper {    background: none;    bottom: 0;    height: 18rem;    left: 0;    opacity: 1;    overflow: hidden;    pointer-events: none;    position: absolute;    transform: none;    transform-origin: 50% 100%;    transition: opacity 200ms linear 100ms, transform 300ms ease-out;    width: 100%;  }    .coin {    --front-y-multiplier: 0;    --back-y-multiplier: 0;    --coin-y-multiplier: 0;    --coin-x-multiplier: 0;    --coin-scale-multiplier: 0;    --coin-rotation-multiplier: 0;    --shine-opacity-multiplier: 0.4;    --shine-bg-multiplier: 50%;    bottom: calc(var(--coin-y-multiplier) * 1rem - 3.5rem);    height: 3.5rem;    margin-bottom: 3.05rem;    position: absolute;    right: calc(var(--coin-x-multiplier) * 34% + 16%);    transform: translateX(50%) scale(calc(0.4 + var(--coin-scale-multiplier))) rotate(calc(var(--coin-rotation-multiplier) * -1deg));    transition: opacity 100ms linear 200ms;    width: 3.5rem;    z-index: 3;  }  .coin__front, .coin__middle, .coin__back, .coin::before, .coin__front::after, .coin__back::after {    border-radius: 50%;    box-sizing: border-box;    height: 100%;    left: 0;    position: absolute;    width: 100%;    z-index: 3;  }  .coin__front {    background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%), linear-gradient(210deg, #8590b3 32%, transparent 32%), linear-gradient(150deg, #8590b3 32%, transparent 32%), linear-gradient(to right, #8590b3 22%, transparent 22%, transparent 78%, #8590b3 78%), linear-gradient(to bottom, #fcfaf9 44%, transparent 44%, transparent 65%, #fcfaf9 65%, #fcfaf9 71%, #8590b3 71%), linear-gradient(to right, transparent 28%, #fcfaf9 28%, #fcfaf9 34%, #8590b3 34%, #8590b3 40%, #fcfaf9 40%, #fcfaf9 47%, #8590b3 47%, #8590b3 53%, #fcfaf9 53%, #fcfaf9 60%, #8590b3 60%, #8590b3 66%, #fcfaf9 66%, #fcfaf9 72%, transparent 72%);    background-color: #8590b3;    background-size: 100% 100%;    transform: translateY(calc(var(--front-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--front-scale-multiplier));  }  .coin__front::after {    background: rgba(0, 0, 0, 0.2);    content: '';    opacity: var(--front-y-multiplier);  }  .coin__middle {    background: #737c99;    transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--middle-scale-multiplier));  }  .coin__back {    background: radial-gradient(circle at 50% 50%, transparent 50%, rgba(115, 124, 153, 0.4) 54%, #c2cadf 54%), radial-gradient(circle at 50% 40%, #fcfaf9 23%, transparent 23%), radial-gradient(circle at 50% 100%, #fcfaf9 35%, transparent 35%);    background-color: #8590b3;    background-size: 100% 100%;    transform: translateY(calc(var(--back-y-multiplier) * 0.3181818182rem / 2)) scaleY(var(--back-scale-multiplier));  }  .coin__back::after {    background: rgba(0, 0, 0, 0.2);    content: '';    opacity: var(--back-y-multiplier);  }  .coin::before {    background: radial-gradient(circle at 25% 65%, transparent 50%, rgba(255, 255, 255, 0.9) 90%), linear-gradient(55deg, transparent calc(var(--shine-bg-multiplier) + 0%), #e9f4ff calc(var(--shine-bg-multiplier) + 0%), transparent calc(var(--shine-bg-multiplier) + 50%));    content: '';    opacity: var(--shine-opacity-multiplier);    transform: translateY(calc(var(--middle-y-multiplier) * 0.3181818182rem / -2)) scaleY(var(--middle-scale-multiplier)) rotate(calc(var(--coin-rotation-multiplier) * 1deg));    z-index: 10;  }  .coin::after {    background: #737c99;    content: '';    height: 0.3181818182rem;    left: 0;    position: absolute;    top: 50%;    transform: translateY(-50%);    width: 100%;    z-index: 2;  }    @keyframes shake {    0% {      transform: rotate(4deg);    }    66% {      transform: rotate(-4deg);    }    100% {      transform: rotate();    }  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/emoji.css"/>
      <url>/css/emoji.css</url>
      
        <content type="html"><![CDATA[#owo-big {    position: fixed;    align-items: center;    background-color: rgb(255, 255, 255);    border: 1px #aaa solid;    border-radius: 10px;    z-index: 9999;    display: none;    transform: translate(0, -105%);    overflow: hidden;    animation: owoIn 0.3s cubic-bezier(0.42, 0, 0.3, 1.11);}[data-theme=dark] #owo-big {    background-color: #4a4a4a}#owo-big img {    width: 100%;}/* 动画效果代码由 Heo：https://blog.zhheo.com/ 提供 */@keyframes owoIn {    0% {        transform: translate(0, -95%);        opacity: 0;    }    100% {        transform: translate(0, -105%);        opacity: 1;    }}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/kslink.css"/>
      <url>/css/kslink.css</url>
      
        <content type="html"><![CDATA[/* 添加友链按钮 *//* 快速填写格式 */.addBtn {    display: flex;    justify-content: center;    flex-wrap: wrap;}.addBtn button {    transition: .2s;    display: flex;    margin: 5px auto;    color: var(--global-bg);    padding: 15px;    border-radius: 40px;    background: var(--search-result-title);    align-items: center;}button {    padding: 0;    outline: 0;    border: none;    background: 0 0;    cursor: pointer;    touch-action: manipulation;}.fa-solid, .fas {    font-family: "Font Awesome 6 Free";    font-weight: 900;}.addBtn i {    font-size: 1.3rem;    margin-right: 10px;}.addBtn button:hover {    background: var(--theme-color);    color: #fff;}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/universe.css"/>
      <url>/css/universe.css</url>
      
        <content type="html"><![CDATA[/* 背景宇宙星光  */#universe{    display: block;    position: fixed;    margin: 0;    padding: 0;    border: 0;    outline: 0;    left: 0;    top: 0;    width: 100%;    height: 100%;    pointer-events: none;    /* 这个是调置顶的优先级的，-1在文章页下面，背景上面，个人推荐这种 */    z-index: -1;  }]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/css/custom.css"/>
      <url>/css/custom.css</url>
      
        <content type="html"><![CDATA[:root {  --trans-light: rgba(255, 255, 255, 0.60);  --trans-dark: rgba(25, 25, 25, 0.60);  --border-style: 1px solid rgb(169, 169, 169);  --backdrop-filter: blur(15px) saturate(150%)}/* 页脚与头图透明 */#footer {    background: transparent !important;  }  #page-header {    background: transparent !important;  }    /* 白天模式遮罩透明 */  #footer::before {    background: transparent !important;  }  #page-header::before {    background: transparent !important;  }    /* 夜间模式遮罩透明 */  [data-theme="dark"] #footer::before {    background: transparent !important;  }  [data-theme="dark"] #page-header::before {    background: transparent !important;  }/* 小冰分类分类磁铁黑夜模式适配 *//* 一般状态 */[data-theme="dark"] .magnet_link_context {  background: #1e1e1e;  color: antiquewhite;}/* 鼠标悬浮状态 */[data-theme="dark"] .magnet_link_context:hover {  background: #3ecdf1;  color: #f2f2f2;}/* 翻页按钮居中 */#pagination {  width: 100%;  margin: auto;}/*导航栏魔改/* 一级菜单居中 */#nav .menus_items {  position: absolute !important;  width: fit-content !important;  left: 50% !important;  transform: translateX(-50%) !important;}/* 子菜单横向展示 */#nav .menus_items .menus_item:hover .menus_item_child {  display: flex !important;}/* 这里的2是代表导航栏的第2个元素，即有子菜单的元素，可以按自己需求修改 */.menus_items .menus_item:nth-child(2) .menus_item_child {  left: -125px;}/*黑夜霓虹灯/* 夜间模式菜单栏发光字 */[data-theme="dark"] #nav .site-page,[data-theme="dark"] #nav .menus_items .menus_item .menus_item_child li a {  text-shadow: 0 0 2px rgb(179, 71, 241) !important;}/* 手机端适配 */[data-theme="dark"] #sidebar #sidebar-menus .menus_items .site-page {  text-shadow: 0 0 2px rgb(179, 71, 241) !important;}/* 闪烁变动颜色连续渐变 */#site-name,#site-title,#site-subtitle,#post-info,.author-info__name,.author-info__description {  transition: text-shadow 1s linear !important;}/*黑夜霓虹灯/* 日间模式不生效 */[data-theme="light"] #site-name,[data-theme="light"] #site-title,[data-theme="light"] #site-subtitle,[data-theme="light"] #post-info {  animation: none;}/* 夜间模式生效 */[data-theme="dark"] #site-name,[data-theme="dark"] #site-title {  animation: light_15px 10s linear infinite;}[data-theme="dark"] #site-subtitle {  animation: light_10px 10s linear infinite;}[data-theme="dark"] #post-info {  animation: light_5px 10s linear infinite;}/* 关键帧描述 */@keyframes light_15px {  0% {    text-shadow: #5636ed 0 0 15px;  }  12.5% {    text-shadow: #11ee5e 0 0 15px;  }  25% {    text-shadow: #f14747 0 0 15px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 15px;  }  50% {    text-shadow: #b347f1 0 0 15px;  }  62.5% {    text-shadow: #002afa 0 0 15px;  }  75% {    text-shadow: #ed709b 0 0 15px;  }  87.5% {    text-shadow: #39c5bb 0 0 15px;  }  100% {    text-shadow: #5636ed 0 0 15px;  }}@keyframes light_10px {  0% {    text-shadow: #5636ed 0 0 10px;  }  12.5% {    text-shadow: #11ee5e 0 0 10px;  }  25% {    text-shadow: #f14747 0 0 10px;  }  37.5% {    text-shadow: #f1a247 0 0 10px;  }  50% {    text-shadow: #f1ee47 0 0 10px;  }  50% {    text-shadow: #b347f1 0 0 10px;  }  62.5% {    text-shadow: #002afa 0 0 10px;  }  75% {    text-shadow: #ed709b 0 0 10px;  }  87.5% {    text-shadow: #39c5bb 0 0 10px;  }  100% {    text-shadow: #5636ed 0 0 10px;  }}@keyframes light_5px {  0% {    text-shadow: #5636ed 0 0 5px;  }  12.5% {    text-shadow: #11ee5e 0 0 5px;  }  25% {    text-shadow: #f14747 0 0 5px;  }  37.5% {    text-shadow: #f1a247 0 0 15px;  }  50% {    text-shadow: #f1ee47 0 0 5px;  }  50% {    text-shadow: #b347f1 0 0 5px;  }  62.5% {    text-shadow: #002afa 0 0 5px;  }  75% {    text-shadow: #ed709b 0 0 5px;  }  87.5% {    text-shadow: #39c5bb 0 0 5px;  }  100% {    text-shadow: #5636ed 0 0 5px;  }}/* 个人信息卡片渐变色/* 侧边栏个人信息卡片动态渐变色 */#aside-content > .card-widget.card-info {  background: linear-gradient(    -45deg,    #e8d8b9,    #eccec5,    #a3e9eb,    #bdbdf0,    #eec1ea  );  box-shadow: 0 0 5px rgb(66, 68, 68);  position: relative;  background-size: 400% 400%;  -webkit-animation: Gradient 10s ease infinite;  -moz-animation: Gradient 10s ease infinite;  animation: Gradient 10s ease infinite !important;}@-webkit-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@-moz-keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}@keyframes Gradient {  0% {    background-position: 0% 50%;  }  50% {    background-position: 100% 50%;  }  100% {    background-position: 0% 50%;  }}/* 黑夜模式适配 */[data-theme="dark"] #aside-content > .card-widget.card-info {  background: #191919ee;}/* 个人信息Follow me按钮 */#aside-content > .card-widget.card-info > #card-info-btn {  background-color: #3eb8be;  border-radius: 8px;}/* 鼠标魔改/* 鼠标样式 */#cursor {  position: fixed;  width: 16px;  height: 16px;  /* 这里改变跟随的底色 */  background: rgb(192, 135, 21);  border-radius: 8px;  opacity: 0.25;  z-index: 10086;  pointer-events: none;  transition: 0.2s ease-in-out;  transition-property: background, opacity, transform;}#cursor.hidden {  opacity: 0;}#cursor.hover {  opacity: 0.1;  transform: scale(2.5);  -webkit-transform: scale(2.5);  -moz-transform: scale(2.5);  -ms-transform: scale(2.5);  -o-transform: scale(2.5);}#cursor.active {  opacity: 0.5;  transform: scale(0.5);  -webkit-transform: scale(0.5);  -moz-transform: scale(0.5);  -ms-transform: scale(0.5);  -o-transform: scale(0.5);}/* 页面样式调节/* 首页文章卡片 */#recent-posts > .recent-post-item {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 25px;  border: var(--border-style);}/* 首页侧栏卡片 */#aside-content .card-widget {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border-radius: 18px;  border: var(--border-style);}/* 文章页、归档页、普通页面 */div#post,div#page,div#archive {  background: var(--trans-light);  backdrop-filter: var(--backdrop-filter);  border: var(--border-style);  border-radius: 20px;}/* 导航栏 */#page-header.nav-fixed #nav {  background: rgba(255, 255, 255, 0.75);  backdrop-filter: var(--backdrop-filter);}[data-theme="dark"] #page-header.nav-fixed #nav {  background: rgba(0, 0, 0, 0.7) !important;}/* 夜间模式遮罩 */[data-theme="dark"] #recent-posts > .recent-post-item,[data-theme="dark"] #aside-content .card-widget,[data-theme="dark"] div#post,[data-theme="dark"] div#archive,[data-theme="dark"] div#page {  background: var(--trans-dark);}/* 夜间模式页脚页头遮罩透明 */[data-theme="dark"] #footer::before {  background: transparent !important;}[data-theme="dark"] #page-header::before {  background: transparent !important;}/* 阅读模式 */.read-mode #aside-content .card-widget {  background: rgba(158, 204, 171, 0.5) !important;}.read-mode div#post {  background: rgba(158, 204, 171, 0.5) !important;}/* 夜间模式下的阅读模式 */[data-theme="dark"] .read-mode #aside-content .card-widget {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}[data-theme="dark"] .read-mode div#post {  background: rgba(25, 25, 25, 0.9) !important;  color: #ffffff;}/*顶部进度条*/.pace {  -webkit-pointer-events: none;  pointer-events: none;  -webkit-user-select: none;  -moz-user-select: none;  user-select: none;  z-index: 2000;  position: fixed;  margin: auto;  top: 4px;  left: 0;  right: 0;  height: 8px;  border-radius: 8px;  width: 7rem;  background: #eaecf2;  border: 1px #e3e8f7;  overflow: hidden}.pace-inactive .pace-progress {  opacity: 0;  transition: .3s ease-in}.pace .pace-progress {  -webkit-box-sizing: border-box;  -moz-box-sizing: border-box;  -ms-box-sizing: border-box;  -o-box-sizing: border-box;  box-sizing: border-box;  -webkit-transform: translate3d(0, 0, 0);  -moz-transform: translate3d(0, 0, 0);  -ms-transform: translate3d(0, 0, 0);  -o-transform: translate3d(0, 0, 0);  transform: translate3d(0, 0, 0);  max-width: 200px;  position: absolute;  z-index: 2000;  display: block;  top: 0;  right: 100%;  height: 100%;  width: 100%;  /* linear-gradient(to right, #3494e6, #ec6ead) */  background: linear-gradient(to right, #43cea2, #3866ca);  animation: gradient 2s ease infinite;  background-size: 200%}.pace.pace-inactive {  opacity: 0;  transition: .3s;  top: -8px}/*哔哩哔哩视频适配*/.aspect-ratio {  position: relative;  width: 90%;  height: auto;  padding-bottom: 75%;  margin: 3% auto;  text-align: center;}.aspect-ratio iframe {  position: absolute;  width: 100%;  height: 86%;  left: 0;  top: 0;}/* 文章小风车/* 文章页H1-H6图标样式效果 *//* 控制风车转动速度 4s那里可以自己调节快慢 */h1::before,h2::before,h3::before,h4::before,h5::before,h6::before {  -webkit-animation: ccc 4s linear infinite;  animation: ccc 4s linear infinite;}/* 控制风车转动方向 -1turn 为逆时针转动，1turn 为顺时针转动，相同数字部分记得统一修改 */@-webkit-keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}@keyframes ccc {  0% {    -webkit-transform: rotate(0deg);    transform: rotate(0deg);  }  to {    -webkit-transform: rotate(-1turn);    transform: rotate(-1turn);  }}/* 设置风车颜色 */#content-inner.layout h1::before {  color: #ef50a8;  margin-left: -1.55rem;  font-size: 1.3rem;  margin-top: -0.23rem;}#content-inner.layout h2::before {  color: #fb7061;  margin-left: -1.35rem;  font-size: 1.1rem;  margin-top: -0.12rem;}#content-inner.layout h3::before {  color: #ffbf00;  margin-left: -1.22rem;  font-size: 0.95rem;  margin-top: -0.09rem;}#content-inner.layout h4::before {  color: #a9e000;  margin-left: -1.05rem;  font-size: 0.8rem;  margin-top: -0.09rem;}#content-inner.layout h5::before {  color: #57c850;  margin-left: -0.9rem;  font-size: 0.7rem;  margin-top: 0rem;}#content-inner.layout h6::before {  color: #5ec1e0;  margin-left: -0.9rem;  font-size: 0.66rem;  margin-top: 0rem;}/* s设置风车hover动效 6s那里可以自己调节快慢*/#content-inner.layout h1:hover,#content-inner.layout h2:hover,#content-inner.layout h3:hover,#content-inner.layout h4:hover,#content-inner.layout h5:hover,#content-inner.layout h6:hover {  color: var(--theme-color);}#content-inner.layout h1:hover::before,#content-inner.layout h2:hover::before,#content-inner.layout h3:hover::before,#content-inner.layout h4:hover::before,#content-inner.layout h5:hover::before,#content-inner.layout h6:hover::before {  color: var(--theme-color);  -webkit-animation: ccc 6s linear infinite;  animation: ccc 6s linear infinite;}/* 评论输出提醒//* 设置文字内容 :nth-child(1)的作用是选择第几个 */.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(1):before {  content: '输入QQ号会自动获取昵称和头像🐧';}.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(2):before {  content: '收到回复将会发送到您的邮箱📧';}.el-input.el-input--small.el-input-group.el-input-group--prepend:nth-child(3):before {  content: '可以通过昵称访问您的网站🔗';}/* 当用户点击输入框时显示 */.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::before,.el-input.el-input--small.el-input-group.el-input-group--prepend:focus-within::after {  display: block;}/* 主内容区 */.el-input.el-input--small.el-input-group.el-input-group--prepend::before {  /* 先隐藏起来 */  display: none;  /* 绝对定位 */  position: absolute;  /* 向上移动60像素 */  top: -60px;  /* 文字强制不换行，防止left:50%导致的文字换行 */  white-space: nowrap;  /* 圆角 */  border-radius: 10px;  /* 距离左边50% */  left: 50%;  /* 然后再向左边挪动自身的一半，即可实现居中 */  transform: translate(-50%);  /* 填充 */  padding: 14px 18px;  background: #444;  color: #fff;}/* 小角标 */.el-input.el-input--small.el-input-group.el-input-group--prepend::after {  display: none;  content: '';  position: absolute;  /* 内容大小（宽高）为0且边框大小不为0的情况下，每一条边（4个边）都是一个三角形，组成一个正方形。  我们先将所有边框透明，再给其中的一条边添加颜色就可以实现小三角图标 */  border: 12px solid transparent;  border-top-color: #444;  left: 50%;  transform: translate(-50%, -48px);}/* 全局宽度 */.layout {  max-width: 1400px;}/* 侧边卡片栏宽度 */.aside-content {  max-width: 318px;  min-width: 300px;}/* 平板尺寸自适应(不启用侧边栏宽度限制) */@media screen and (max-width: 900px) {  .aside-content {    max-width: none !important;    padding: 0 5px 0 5px;  }}/* 除了首页以外其他页面隐藏卡片，并采用宽屏显示 */#archive,#page,#category,#tag {  width: 100%;}.page:not(.page.home) .aside-content {  display: none;}/* tzy页脚样式 */#ft {  max-width: 1200px;  margin: 0 auto 12px;  display: flex;  color: rgb(255 255 255 / 80%) !important;  text-align: left;  flex-wrap: wrap;}.ft-item-1,.ft-item-2 {  display: flex;  height: 100%;  padding: 2px 14px;}.ft-item-1 {  flex-direction: column;  flex: 2;}.ft-item-2 {  flex: 1;  flex-direction: column;}.t-top {  display: flex;}.t-top .t-t-l {  display: flex;  flex-direction: column;  flex: 1.4;  margin-right: 10px;}.t-top .t-t-l .bg-ad {  width: 85%;  border-radius: 10px;  padding: 0 10px;}.btn-xz-box {  margin-top: 10px;}/* 按钮背景颜色等 */.btn-xz {  display: block;  background-color: var(--btn-bg);  color: var(--btn-color);  text-align: center;  line-height: 2.4;  margin: 8px 0;}.btn-xz:hover {  text-decoration: none !important;}/* 按钮悬浮颜色 */.btn-xz-box:hover .btn-xz {  background-color: var(--text-bg-hover);}.t-top .t-t-r {  display: flex;  flex-direction: column;  flex: 1;}.ft-links {  padding: 0 14px;  list-style: none;  margin-top: 0 !important;}.ft-links li a {  display: inline-block !important;  width: 50%;}/* 链接悬浮颜色 */.ft-links li a:hover {  text-decoration: none !important;  color: var(--theme-color) !important;}.ft-item-2 .ft-img-group {  width: 100%;}.ft-t {  font-size: 1.1rem;  margin-bottom: 20px;  line-height: 1;  font-weight: 600;}.t-l-t {  padding-left: 14px;}.ft-item-2 .ft-img-group .img-group-item {  display: inline-block;  width: 18.4%;  margin-right: 14px;  margin-bottom: 6px;}.ft-item-2 .ft-img-group .img-group-item a {  display: inline-block;  width: 100%;  height: 100%;}.ft-item-2 .ft-img-group .img-group-item a img {  width: 100%;  max-height: 80px;  border-radius: 10px;}/* 头像悬浮颜色框 */.ft-item-2 .ft-img-group .img-group-item a img:hover {  border: 2px solid var(--theme-color);}@media screen and (max-width: 768px) {  .ft-item-1 {    flex-basis: 100% !important;  }  .ft-item-2 {    flex-basis: 100% !important;  }  .t-top .t-t-l .bg-ad {    width: 100%;  }}@media screen and (max-width: 576px) {  .t-top {    flex-wrap: wrap;  }  .t-top .t-t-l {    flex-basis: 100% !important;  }  .t-top .t-t-r {    margin-top: 16px;    flex-basis: 100% !important;  }}#footer-wrap a {  border-radius: 30px;}#footer-wrap {  padding: 20px 20px;}/* 页脚心跳动画 */#heartbeat {  color: red;  animation: iconAnimate 1s ease-in-out infinite;}@-moz-keyframes iconAnimate {  0%,  100% {    transform: scale(1);  }  10%,  30% {    transform: scale(0.9);  }  20%,  40%,  60%,  80% {    transform: scale(1.1);  }  50%,  70% {    transform: scale(1.1);  }}@-webkit-keyframes iconAnimate {  0%,  100% {    transform: scale(1);  }  10%,  30% {    transform: scale(0.9);  }  20%,  40%,  60%,  80% {    transform: scale(1.1);  }  50%,  70% {    transform: scale(1.1);  }}@-o-keyframes iconAnimate {  0%,  100% {    transform: scale(1);  }  10%,  30% {    transform: scale(0.9);  }  20%,  40%,  60%,  80% {    transform: scale(1.1);  }  50%,  70% {    transform: scale(1.1);  }}@keyframes iconAnimate {  0%,  100% {    transform: scale(1);  }  10%,  30% {    transform: scale(0.9);  }  20%,  40%,  60%,  80% {    transform: scale(1.1);  }  50%,  70% {    transform: scale(1.1);  }}/*信息卡片*/.card-info-avatar .author-status-box {  position: absolute;  bottom: 0;  left: calc(100% - 28px);  width: 28px;  height: 28px;  border: 1px solid #d0d7de;  border-radius: 2em;  background-color: #f8f8f8f8;  transition: 0.4s;  overflow: hidden;}[data-theme="dark"] .card-info-avatar .author-status-box {  background-color: #222222f2;  border: 1px solid #5c6060;}.card-info-avatar .author-status-box .author-status {  display: flex;  align-items: center;  justify-content: center;  height: 28px;  padding: 0 5px;}.card-info-avatar .author-status-box:hover {  width: 105px;}.card-info-avatar .author-status-box:hover .author-status span {  width: 105px;  margin-left: 4px;}.card-info-avatar .author-status-box .author-status span {  width: 0;  font-size: 12px;  height: 100%;  overflow: hidden;  text-overflow: ellipsis;  white-space: nowrap;  transition: 0.4s;}.card-widget .card-info-avatar {  display: inline-block;  position: relative;}.card-info-avatar.avatar-img {  width: 50px;  height: 50px;}/* 个人信息卡片背景图 */[data-theme="light"] #aside-content > .card-widget.card-info {  background-image: url(https://sourcebucket.s3.ladydaily.com/img/snowflower.webp);  background-repeat: no-repeat;  background-attachment: inherit;  background-size: 100%;}[data-theme="dark"] #aside-content > .card-widget.card-info {  background-image: url(https://sourcebucket.s3.ladydaily.com/img/aurora.webp);  background-repeat: no-repeat;  background-attachment: inherit;  background-size: 100%;}/* 波浪css */.main-hero-waves-area {  width: 100%;  position: absolute;  left: 0;  bottom: -11px;  z-index: 5;}.waves-area .waves-svg {  width: 100%;  height: 5rem;}/* Animation */.parallax > use {  animation: move-forever 25s cubic-bezier(0.55, 0.5, 0.45, 0.5) infinite;}.parallax > use:nth-child(1) {  animation-delay: -2s;  animation-duration: 7s;  fill: #f7f9febd;}.parallax > use:nth-child(2) {  animation-delay: -3s;  animation-duration: 10s;  fill: #f7f9fe82;}.parallax > use:nth-child(3) {  animation-delay: -4s;  animation-duration: 13s;  fill: #f7f9fe36;}.parallax > use:nth-child(4) {  animation-delay: -5s;  animation-duration: 20s;  fill: #f7f9fe;}/* 黑色模式背景 */[data-theme="dark"] .parallax > use:nth-child(1) {  animation-delay: -2s;  animation-duration: 7s;  fill: #18171dc8;}[data-theme="dark"] .parallax > use:nth-child(2) {  animation-delay: -3s;  animation-duration: 10s;  fill: #18171d80;}[data-theme="dark"] .parallax > use:nth-child(3) {  animation-delay: -4s;  animation-duration: 13s;  fill: #18171d3e;}[data-theme="dark"] .parallax > use:nth-child(4) {  animation-delay: -5s;  animation-duration: 20s;  fill: #18171d;}@keyframes move-forever {  0% {    transform: translate3d(-90px, 0, 0);  }  100% {    transform: translate3d(85px, 0, 0);  }}/*Shrinking for mobile*/@media (max-width: 768px) {  .waves-area .waves-svg {    height: 40px;    min-height: 40px;  }}/* 帧率检测 */#fps {  position: fixed;  /* 指定位置 */  right: 10px;  bottom: 10px;  z-index: 1919810;}[data-theme="light"] #fps {  background-color: rgba(255, 255, 255, 0.85);  backdrop-filter: var(--backdrop-filter);  padding: 4px;  border-radius: 4px;}[data-theme="dark"] #fps {  background-color: rgba(0, 0, 0, 0.72);  backdrop-filter: var(--backdrop-filter);  padding: 4px;  border-radius: 4px;}/* 雪花特效 */[data-theme="light"] #snow{  display: block;  position: fixed;  left: 0;  top: 0;  width: 100%;  height: 100%;  pointer-events: none;  z-index: -2;}/* 雪花黑夜模式不显示 */[data-theme="dark"] #snow{  display: none;}/* 新年侧边栏 */#newYear {  color: white;  padding: 0 !important;}#newYear p,#newYear h3 {  font-weight: normal;  color: inherit;  margin: 0;}#newYear .item-headline {  display: none;}#newYear-main {  min-height: 160px;  padding: 1rem;  position: relative;  border-radius: 12px;  background-image: url(https://tuchuang.voooe.cn/images/2023/01/02/tunian.webp);  background-size: cover;  background-position: center;}#newYear-main * {  position: relative;  line-height: 1.3;}#newYear-main .newYear-time {  font-weight: bold;  text-align: center;}#newYear-main .time,#newYear-main .happyNewYear {  font-size: 3.5rem;  margin: 1rem 0;  display: block;}#newYear-main .day {  font-size: 5rem;}#newYear-main .day .unit {  font-size: 1rem;}#newYear-main .mask {  position: absolute;  left: 0;  top: 0;  height: 100%;  width: 100%;  background-color: rgba(0, 0, 0, .1);}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cat.js"/>
      <url>/js/cat.js</url>
      
        <content type="html"><![CDATA[if (document.body.clientWidth > 992) {    function getBasicInfo() {        /* 窗口高度 */        var ViewH = $(window).height();        /* document高度 */        var DocH = $("body")[0].scrollHeight;        /* 滚动的高度 */        var ScrollTop = $(window).scrollTop();        /* 可滚动的高度 */        var S_V = DocH - ViewH;        var Band_H = ScrollTop / (DocH - ViewH) * 100;        return {            ViewH: ViewH,            DocH: DocH,            ScrollTop: ScrollTop,            Band_H: Band_H,            S_V: S_V        }    };    function show(basicInfo) {        if (basicInfo.ScrollTop > 0.001) {            $(".neko").css('display', 'block');        } else {            $(".neko").css('display', 'none');        }    }    (function ($) {        $.fn.nekoScroll = function (option) {            var defaultSetting = {                top: '0',                scroWidth: 6 + 'px',                z_index: 9999,                zoom: 0.9,                borderRadius: 5 + 'px',                right: 60 + 'px',                // 这里可以换为你喜欢的图片，例如我就换为了雪人，但是要抠图                nekoImg: "https://bu.dusays.com/2022/07/20/62d812db74be9.png",                hoverMsg: "喵喵喵~",                color: "#6f42c1",                during: 500,                blog_body: "body",            };            var setting = $.extend(defaultSetting, option);            var getThis = this.prop("className") !== "" ? "." + this.prop("className") : this.prop("id") !== "" ? "#" +                this.prop("id") : this.prop("nodeName");            if ($(".neko").length == 0) {                this.after("<div class=\"neko\" id=" + setting.nekoname + " data-msg=\"" + setting.hoverMsg + "\"></div>");            }            let basicInfo = getBasicInfo();            $(getThis)                .css({                    'position': 'fixed',                    'width': setting.scroWidth,                    'top': setting.top,                    'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',                    'z-index': setting.z_index,                    'background-color': setting.bgcolor,                    "border-radius": setting.borderRadius,                    'right': setting.right,                    'background-image': 'url(' + setting.scImg + ')',                    'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',                    'background-size': 'contain'                });            $("#" + setting.nekoname)                .css({                    'position': 'fixed',                    'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',                    'z-index': setting.z_index * 10,                    'right': setting.right,                    'background-image': 'url(' + setting.nekoImg + ')',                });            show(getBasicInfo());            $(window)                .scroll(function () {                    let basicInfo = getBasicInfo();                    show(basicInfo);                    $(getThis)                        .css({                            'position': 'fixed',                            'width': setting.scroWidth,                            'top': setting.top,                            'height': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 + 'px',                            'z-index': setting.z_index,                            'background-color': setting.bgcolor,                            "border-radius": setting.borderRadius,                            'right': setting.right,                            'background-image': 'url(' + setting.scImg + ')',                            'background-image': '-webkit-linear-gradient(45deg, rgba(255, 255, 255, 0.1) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, 0.1) 50%, rgba(255, 255, 255, 0.1) 75%, transparent 75%, transparent)', 'border-radius': '2em',                            'background-size': 'contain'                        });                    $("#" + setting.nekoname)                        .css({                            'position': 'fixed',                            'top': basicInfo.Band_H * setting.zoom * basicInfo.ViewH * 0.01 - 50 + 'px',                            'z-index': setting.z_index * 10,                            'right': setting.right,                            'background-image': 'url(' + setting.nekoImg + ')',                        });                    if (basicInfo.ScrollTop == basicInfo.S_V) {                        $("#" + setting.nekoname)                            .addClass("showMsg")                    } else {                        $("#" + setting.nekoname)                            .removeClass("showMsg");                        $("#" + setting.nekoname)                            .attr("data-msg", setting.hoverMsg);                    }                });            this.click(function (e) {                btf.scrollToDest(0, 500)            });            $("#" + setting.nekoname)                .click(function () {                    btf.scrollToDest(0, 500)                });            return this;        }    })(jQuery);    $(document).ready(function () {        //部分自定义        $("#myscoll").nekoScroll({            bgcolor: 'rgb(0 0 0 / .5)', //背景颜色，没有绳子背景图片时有效            borderRadius: '2em',            zoom: 0.9        }        );        //自定义（去掉以下注释，并注释掉其他的查看效果）        /*        $("#myscoll").nekoScroll({            nekoname:'neko1', //nekoname，相当于id            nekoImg:'img/猫咪.png', //neko的背景图片            scImg:"img/绳1.png", //绳子的背景图片            bgcolor:'#1e90ff', //背景颜色，没有绳子背景图片时有效            zoom:0.9, //绳子长度的缩放值            hoverMsg:'你好~喵', //鼠标浮动到neko上方的对话框信息            right:'100px', //距离页面右边的距离            fontFamily:'楷体', //对话框字体            fontSize:'14px', //对话框字体的大小            color:'#1e90ff', //对话框字体颜色            scroWidth:'8px', //绳子的宽度            z_index:100, //不用解释了吧            during:1200, //从顶部到底部滑动的时长        });        */    })}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/coin.js"/>
      <url>/js/coin.js</url>
      
        <content type="html"><![CDATA[var tipButtons = document.querySelectorAll('.tip-button')function coinAudio() {    var coinAudio = document.getElementById("coinAudio");    if (coinAudio) {        coinAudio.play();//有音频时播放    }}// Loop through all buttons (allows for multiple buttons on page)tipButtons.forEach((button) => {    var coin = button.querySelector('.coin')    // The larger the number, the slower the animation    coin.maxMoveLoopCount = 90    button.addEventListener('click', () => {        if (/Android|webOS|BlackBerry/i.test(navigator.userAgent)) return true; //媒体选择        if (button.clicked) return        button.classList.add('clicked')        // Wait to start flipping th coin because of the button tilt animation        setTimeout(() => {            // Randomize the flipping speeds just for fun            coin.sideRotationCount = Math.floor(Math.random() * 5) * 90            coin.maxFlipAngle = (Math.floor(Math.random() * 4) + 3) * Math.PI            button.clicked = true            flipCoin()            coinAudio()        }, 50)    })    var flipCoin = () => {        coin.moveLoopCount = 0        flipCoinLoop()    }    var resetCoin = () => {        coin.style.setProperty('--coin-x-multiplier', 0)        coin.style.setProperty('--coin-scale-multiplier', 0)        coin.style.setProperty('--coin-rotation-multiplier', 0)        coin.style.setProperty('--shine-opacity-multiplier', 0.4)        coin.style.setProperty('--shine-bg-multiplier', '50%')        coin.style.setProperty('opacity', 1)        // Delay to give the reset animation some time before you can click again        setTimeout(() => {            button.clicked = false        }, 300)    }    var flipCoinLoop = () => {        coin.moveLoopCount++        var percentageCompleted = coin.moveLoopCount / coin.maxMoveLoopCount        coin.angle = -coin.maxFlipAngle * Math.pow((percentageCompleted - 1), 2) + coin.maxFlipAngle        // Calculate the scale and position of the coin moving through the air        coin.style.setProperty('--coin-y-multiplier', -11 * Math.pow(percentageCompleted * 2 - 1, 4) + 11)        coin.style.setProperty('--coin-x-multiplier', percentageCompleted)        coin.style.setProperty('--coin-scale-multiplier', percentageCompleted * 0.6)        coin.style.setProperty('--coin-rotation-multiplier', percentageCompleted * coin.sideRotationCount)        // Calculate the scale and position values for the different coin faces        // The math uses sin/cos wave functions to similate the circular motion of 3D spin        coin.style.setProperty('--front-scale-multiplier', Math.max(Math.cos(coin.angle), 0))        coin.style.setProperty('--front-y-multiplier', Math.sin(coin.angle))        coin.style.setProperty('--middle-scale-multiplier', Math.abs(Math.cos(coin.angle), 0))        coin.style.setProperty('--middle-y-multiplier', Math.cos((coin.angle + Math.PI / 2) % Math.PI))        coin.style.setProperty('--back-scale-multiplier', Math.max(Math.cos(coin.angle - Math.PI), 0))        coin.style.setProperty('--back-y-multiplier', Math.sin(coin.angle - Math.PI))        coin.style.setProperty('--shine-opacity-multiplier', 4 * Math.sin((coin.angle + Math.PI / 2) % Math.PI) - 3.2)        coin.style.setProperty('--shine-bg-multiplier', -40 * (Math.cos((coin.angle + Math.PI / 2) % Math.PI) - 0.5) + '%')        // Repeat animation loop        if (coin.moveLoopCount < coin.maxMoveLoopCount) {            if (coin.moveLoopCount === coin.maxMoveLoopCount - 6) button.classList.add('shrink-landing')            window.requestAnimationFrame(flipCoinLoop)        } else {            button.classList.add('coin-landed')            coin.style.setProperty('opacity', 0)            setTimeout(() => {                button.classList.remove('clicked', 'shrink-landing', 'coin-landed')                setTimeout(() => {                    resetCoin()                }, 300)            }, 1500)        }    }})]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/cursor.js"/>
      <url>/js/cursor.js</url>
      
        <content type="html"><![CDATA[var CURSOR;Math.lerp = (a, b, n) => (1 - n) * a + n * b;const getStyle = (el, attr) => {    try {        return window.getComputedStyle            ? window.getComputedStyle(el)[attr]            : el.currentStyle[attr];    } catch (e) {}    return "";};class Cursor {    constructor() {        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    move(left, top) {        this.cursor.style["left"] = `${left}px`;        this.cursor.style["top"] = `${top}px`;    }    create() {        if (!this.cursor) {            this.cursor = document.createElement("div");            this.cursor.id = "cursor";            this.cursor.classList.add("hidden");            document.body.append(this.cursor);        }        var el = document.getElementsByTagName('*');        for (let i = 0; i < el.length; i++)            if (getStyle(el[i], "cursor") == "pointer")                this.pt.push(el[i].outerHTML);        document.body.appendChild((this.scr = document.createElement("style")));        // 这里改变鼠标指针的颜色 由svg生成        this.scr.innerHTML = `* {cursor: url("data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 8 8' width='15px' height='15px'><circle cx='4' cy='4' r='4' opacity='1.0' fill='rgb(58, 190, 187)'/></svg>") 4 4, auto}`;    }    refresh() {        this.scr.remove();        this.cursor.classList.remove("hover");        this.cursor.classList.remove("active");        this.pos = {curr: null, prev: null};        this.pt = [];        this.create();        this.init();        this.render();    }    init() {        document.onmouseover  = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.add("hover");        document.onmouseout   = e => this.pt.includes(e.target.outerHTML) && this.cursor.classList.remove("hover");        document.onmousemove  = e => {(this.pos.curr == null) && this.move(e.clientX - 8, e.clientY - 8); this.pos.curr = {x: e.clientX - 8, y: e.clientY - 8}; this.cursor.classList.remove("hidden");};        document.onmouseenter = e => this.cursor.classList.remove("hidden");        document.onmouseleave = e => this.cursor.classList.add("hidden");        document.onmousedown  = e => this.cursor.classList.add("active");        document.onmouseup    = e => this.cursor.classList.remove("active");    }    render() {        if (this.pos.prev) {            this.pos.prev.x = Math.lerp(this.pos.prev.x, this.pos.curr.x, 0.15);            this.pos.prev.y = Math.lerp(this.pos.prev.y, this.pos.curr.y, 0.15);            this.move(this.pos.prev.x, this.pos.prev.y);        } else {            this.pos.prev = this.pos.curr;        }        requestAnimationFrame(() => this.render());    }}(() => {    CURSOR = new Cursor();    // 需要重新获取列表时，使用 CURSOR.refresh()})();]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/fps.js"/>
      <url>/js/fps.js</url>
      
        <content type="html"><![CDATA[if (window.localStorage.getItem("fpson") == undefined || window.localStorage.getItem("fpson") == "1") {    var rAF = function () {        return (            window.requestAnimationFrame ||            window.webkitRequestAnimationFrame ||            function (callback) {                window.setTimeout(callback, 1000 / 60);            }        );    }();    var frame = 0;    var allFrameCount = 0;    var lastTime = Date.now();    var lastFameTime = Date.now();    var loop = function () {        var now = Date.now();        var fs = (now - lastFameTime);        var fps = Math.round(1000 / fs);        lastFameTime = now;        // 不置 0，在动画的开头及结尾记录此值的差值算出 FPS        allFrameCount++;        frame++;        if (now > 1000 + lastTime) {            var fps = Math.round((frame * 1000) / (now - lastTime));            if (fps <= 5) {                var kd = `<span style="color:#bd0000">卡成ppt🤢</span>`            } else if (fps <= 15) {                var kd = `<span style="color:red">电竞级帧率😖</span>`            } else if (fps <= 25) {                var kd = `<span style="color:orange">有点难受😨</span>`            } else if (fps < 35) {                var kd = `<span style="color:#9338e6">不太流畅🙄</span>`            } else if (fps <= 45) {                var kd = `<span style="color:#08b7e4">还不错哦😁</span>`            } else {                var kd = `<span style="color:#39c5bb">十分流畅🤣</span>`            }            document.getElementById("fps").innerHTML = `FPS:${fps} ${kd}`;            frame = 0;            lastTime = now;        };        rAF(loop);    }    loop();} else {    document.getElementById("fps").style = "display:none!important"}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/kslink.js"/>
      <url>/js/kslink.js</url>
      
        <content type="html"><![CDATA[var leonus = {    linkCom: e => {        var t = document.querySelector(".el-textarea__inner");        "bf" == e ? (t.value = "```yml\n", t.value += "- name: \n  link: \n  avatar: \n  descr: \n  siteshot: ", t.value += "\n```", t.setSelectionRange(15, 15)) : (t.value = "站点名称：\n站点地址：\n头像链接：\n站点描述：\n站点截图：", t.setSelectionRange(5, 5)), t.focus()    },    owoBig: () => {        if (!document.getElementById("post-comment") || document.body.clientWidth < 768) return;        let e = 1,            t = "",            o = document.createElement("div"),            n = document.querySelector("body");        o.id = "owo-big", n.appendChild(o), new MutationObserver((l => {            for (let a = 0; a < l.length; a++) {                let i = l[a].addedNodes,                    s = "";                if (2 == i.length && "OwO-body" == i[1].className) s = i[1];                else {                    if (1 != i.length || "tk-comment" != i[0].className) continue;                    s = i[0]                }                s.onmouseover = l => {                    e && ("OwO-body" == s.className && "IMG" == l.target.tagName || "tk-owo-emotion" == l.target.className) && (e = 0, t = setTimeout((() => {                        let e = 3 * l.path[0].clientHeight,                            t = 3 * l.path[0].clientWidth,                            a = l.x - l.offsetX - (t - l.path[0].clientWidth) / 2,                            i = l.y - l.offsetY;                        a + t > n.clientWidth && (a -= a + t - n.clientWidth + 10), a < 0 && (a = 10), o.style.cssText = `display:flex; height:${e}px; width:${t}px; left:${a}px; top:${i}px;`, o.innerHTML = `<img src="${l.target.src}">`                    }), 300))                }, s.onmouseout = () => {                    o.style.display = "none", e = 1, clearTimeout(t)                }            }        })).observe(document.getElementById("post-comment"), {            subtree: !0,            childList: !0        })    },};]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/light.js"/>
      <url>/js/light.js</url>
      
        <content type="html"><![CDATA[// 霓虹灯效果// 颜色数组var arr = ["#39c5bb", "#f14747", "#f1a247", "#f1ee47", "#b347f1", "#1edbff", "#ed709b", "#5636ed"];// 颜色索引var idx = 0;// 切换颜色function changeColor() {    // 仅夜间模式才启用    if (document.getElementsByTagName('html')[0].getAttribute('data-theme') == 'dark') {        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = arr[idx] + " 0 0 15px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = arr[idx] + " 0 0 10px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = arr[idx] + " 0 0 5px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = arr[idx] + " 0 0 12px";            document.getElementsByClassName("author-info__description")[0].style.textShadow = arr[idx] + " 0 0 12px";        } catch {                    }        idx++;        if (idx == 8) {            idx = 0;        }    } else {        // 白天模式恢复默认        if (document.getElementById("site-name"))            document.getElementById("site-name").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-title"))            document.getElementById("site-title").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("site-subtitle"))            document.getElementById("site-subtitle").style.textShadow = "#1e1e1ee0 1px 1px 1px";        if (document.getElementById("post-info"))            document.getElementById("post-info").style.textShadow = "#1e1e1ee0 1px 1px 1px";        try {            document.getElementsByClassName("author-info__name")[0].style.textShadow = "";            document.getElementsByClassName("author-info__description")[0].style.textShadow = "";        } catch {                    }    }}// 开启计时器window.onload = setInterval(changeColor, 1200);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/newYear.js"/>
      <url>/js/newYear.js</url>
      
        <content type="html"><![CDATA[let newYearTimer = null;var newYear = () => {    clearTimeout(newYearTimer);    if (!document.querySelector('#newYear')) return;    // 新年时间戳 and 星期对象    let newYear = new Date('2023-01-22 00:00:00').getTime() / 1000,        week = { 0: '周日', 1: '周一', 2: '周二', 3: '周三', 4: '周四', 5: '周五', 6: '周六' }    time();    // 补零函数    function nol(h) { return h > 9 ? h : '0' + h; };    function time() {        // 现在 时间对象        let now = new Date();        // 右下角 今天        document.querySelector('#newYear .today').innerHTML = now.getFullYear() + '-' + (now.getMonth() + 1) + '-' + now.getDate() + ' ' + week[now.getDay()]        // 现在与新年相差秒数        let second = newYear - Math.round(now.getTime() / 1000);        // 小于0则表示已经过年        if (second < 0) {            document.querySelector('#newYear .title').innerHTML = 'Happy New Year!';            document.querySelector('#newYear .newYear-time').innerHTML = '<span class="happyNewYear">新年快乐</p>';        } else {            // 大于0则还未过年            document.querySelector('#newYear .title').innerHTML = '距离2023年春节：'            // 大于一天则直接渲染天数            if (second > 86400) {                document.querySelector('#newYear .newYear-time').innerHTML = `<span class="day">${Math.ceil(second / 86400)}<span class="unit">天</span></span>`            } else {                // 小于一天则使用时分秒计时。                let h = nol(parseInt(second / 3600));                second %= 3600;                let m = nol(parseInt(second / 60));                second %= 60;                let s = nol(second);                document.querySelector('#newYear .newYear-time').innerHTML = `<span class="time">${h}:${m}:${s}</span></span>`;                // 计时                newYearTimer = setTimeout(time, 1000);            }        }    }    // 元宝飘落    jQuery(document).ready(function ($) {        $('#newYear').wpSuperSnow({            flakes: ['https://tuchuang.voooe.cn/images/2023/01/02/yb1.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb2.webp', 'https://tuchuang.voooe.cn/images/2023/01/02/yb3.webp'],            totalFlakes: '100',            zIndex: '999999',            maxSize: '30',            maxDuration: '20',            useFlakeTrans: false        });    });}// Pjax适配：若没有开启Pjax这里直接是newYear()即可// 开了Pjax的用以下两句document.addEventListener('pjax:complete', newYear);document.addEventListener('DOMContentLoaded', newYear);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/runtime.js"/>
      <url>/js/runtime.js</url>
      
        <content type="html"><![CDATA[var now = new Date();function createtime() {  // 当前时间  now.setTime(now.getTime() + 1000);  var start = new Date("01/05/2023 20:00:00"); // 旅行者1号开始计算的时间  var dis = Math.trunc(23400000000 + ((now - start) / 1000) * 17); // 距离=秒数*速度 记住转换毫秒  var unit = (dis / 149600000).toFixed(6);  // 天文单位  var grt = new Date("08/09/2022 00:00:00");// 网站诞生时间  var days = (now - grt) / 1e3 / 60 / 60 / 24,    dnum = Math.floor(days),    hours = (now - grt) / 1e3 / 60 / 60 - 24 * dnum,    hnum = Math.floor(hours);  1 == String(hnum).length && (hnum = "0" + hnum);  var minutes = (now - grt) / 1e3 / 60 - 1440 * dnum - 60 * hnum,    mnum = Math.floor(minutes);  1 == String(mnum).length && (mnum = "0" + mnum);  var seconds = (now - grt) / 1e3 - 86400 * dnum - 3600 * hnum - 60 * mnum,    snum = Math.round(seconds);  1 == String(snum).length && (snum = "0" + snum);  let currentTimeHtml = "";  (currentTimeHtml =    hnum < 18 && hnum >= 9    ? `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-科研摸鱼中.svg' title='什么时候能够实现财富自由呀~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${dnum} 天 ${hnum} 小时 ${mnum} 分 ${snum} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${dis} 千米，约为 ${unit} 个天文单位 🚀</div>`    : `<img class='boardsign' src='https://sourcebucket.s3.ladydaily.com/badge/F小屋-下班休息啦.svg' title='下班了就该开开心心地玩耍~'><br> <div style="font-size:13px;font-weight:bold">本站居然运行了 ${dnum} 天 ${hnum} 小时 ${mnum} 分 ${snum} 秒 <i id="heartbeat" class='fas fa-heartbeat'></i> <br> 旅行者 1 号当前距离地球 ${dis} 千米，约为 ${unit} 个天文单位 🚀</div>`),    document.getElementById("workboard") &&    (document.getElementById("workboard").innerHTML = currentTimeHtml);}// 设置重复执行函数，周期1000mssetInterval(() => {  createtime();}, 1000);]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/snow.js"/>
      <url>/js/snow.js</url>
      
        <content type="html"><![CDATA[if ((navigator.userAgent.match(/(phone|pad|pod|iPhone|iPod|ios|iPad|Android|Mobile|BlackBerry|IEMobile|MQQBrowser|JUC|Fennec|wOSBrowser|BrowserNG|WebOS|Symbian|Windows Phone)/i))) {    // 移动端不显示} else {    // document.write('<canvas id="snow" style="position:fixed;top:0;left:0;width:100%;height:100%;z-index:-2;pointer-events:none"></canvas>');    window && (() => {        let e = {            flakeCount: 50, // 雪花数目            minDist: 150,   // 最小距离            color: "255, 255, 255", // 雪花颜色            size: 1.5,  // 雪花大小            speed: .5,  // 雪花速度            opacity: .7,    // 雪花透明度            stepsize: .5    // 步距        };        const t = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (e) {            window.setTimeout(e, 1e3 / 60)        }            ;        window.requestAnimationFrame = t;        const i = document.getElementById("snow"),            n = i.getContext("2d"),            o = e.flakeCount;        let a = -100,            d = -100,            s = [];        i.width = window.innerWidth,            i.height = window.innerHeight;        const h = () => {            n.clearRect(0, 0, i.width, i.height);            const r = e.minDist;            for (let t = 0; t < o; t++) {                let o = s[t];                const h = a,                    w = d,                    m = o.x,                    c = o.y,                    p = Math.sqrt((h - m) * (h - m) + (w - c) * (w - c));                if (p < r) {                    const e = (h - m) / p,                        t = (w - c) / p,                        i = r / (p * p) / 2;                    o.velX -= i * e,                        o.velY -= i * t                } else                    o.velX *= .98,                        o.velY < o.speed && o.speed - o.velY > .01 && (o.velY += .01 * (o.speed - o.velY)),                        o.velX += Math.cos(o.step += .05) * o.stepSize;                n.fillStyle = "rgba(" + e.color + ", " + o.opacity + ")",                    o.y += o.velY,                    o.x += o.velX,                    (o.y >= i.height || o.y <= 0) && l(o),                    (o.x >= i.width || o.x <= 0) && l(o),                    n.beginPath(),                    n.arc(o.x, o.y, o.size, 0, 2 * Math.PI),                    n.fill()            }            t(h)        }            , l = e => {                e.x = Math.floor(Math.random() * i.width),                    e.y = 0,                    e.size = 3 * Math.random() + 2,                    e.speed = 1 * Math.random() + .5,                    e.velY = e.speed,                    e.velX = 0,                    e.opacity = .5 * Math.random() + .3            }            ;        document.addEventListener("mousemove", (e => {            a = e.clientX,                d = e.clientY        }        )),            window.addEventListener("resize", (() => {                i.width = window.innerWidth,                    i.height = window.innerHeight            }            )),            (() => {                for (let t = 0; t < o; t++) {                    const t = Math.floor(Math.random() * i.width)                        , n = Math.floor(Math.random() * i.height)                        , o = 3 * Math.random() + e.size                        , a = 1 * Math.random() + e.speed                        , d = .5 * Math.random() + e.opacity;                    s.push({                        speed: a,                        velX: 0,                        velY: a,                        x: t,                        y: n,                        size: o,                        stepSize: Math.random() / 30 * e.stepsize,                        step: 0,                        angle: 180,                        opacity: d                    })                }                h()            }            )()    }    )();}]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/universe.js"/>
      <url>/js/universe.js</url>
      
        <content type="html"><![CDATA[function dark() {window.requestAnimationFrame=window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame;var n,e,i,h,t=.05,s=document.getElementById("universe"),o=!0,a="180,184,240",r="226,225,142",d="226,225,224",c=[];function f(){n=window.innerWidth,e=window.innerHeight,i=.216*n,s.setAttribute("width",n),s.setAttribute("height",e)}function u(){h.clearRect(0,0,n,e);for(var t=c.length,i=0;i<t;i++){var s=c[i];s.move(),s.fadeIn(),s.fadeOut(),s.draw()}}function y(){this.reset=function(){this.giant=m(3),this.comet=!this.giant&&!o&&m(10),this.x=l(0,n-10),this.y=l(0,e),this.r=l(1.1,2.6),this.dx=l(t,6*t)+(this.comet+1-1)*t*l(50,120)+2*t,this.dy=-l(t,6*t)-(this.comet+1-1)*t*l(50,120),this.fadingOut=null,this.fadingIn=!0,this.opacity=0,this.opacityTresh=l(.2,1-.4*(this.comet+1-1)),this.do=l(5e-4,.002)+.001*(this.comet+1-1)},this.fadeIn=function(){this.fadingIn&&(this.fadingIn=!(this.opacity>this.opacityTresh),this.opacity+=this.do)},this.fadeOut=function(){this.fadingOut&&(this.fadingOut=!(this.opacity<0),this.opacity-=this.do/2,(this.x>n||this.y<0)&&(this.fadingOut=!1,this.reset()))},this.draw=function(){if(h.beginPath(),this.giant)h.fillStyle="rgba("+a+","+this.opacity+")",h.arc(this.x,this.y,2,0,2*Math.PI,!1);else if(this.comet){h.fillStyle="rgba("+d+","+this.opacity+")",h.arc(this.x,this.y,1.5,0,2*Math.PI,!1);for(var t=0;t<30;t++)h.fillStyle="rgba("+d+","+(this.opacity-this.opacity/20*t)+")",h.rect(this.x-this.dx/4*t,this.y-this.dy/4*t-2,2,2),h.fill()}else h.fillStyle="rgba("+r+","+this.opacity+")",h.rect(this.x,this.y,this.r,this.r);h.closePath(),h.fill()},this.move=function(){this.x+=this.dx,this.y+=this.dy,!1===this.fadingOut&&this.reset(),(this.x>n-n/4||this.y<0)&&(this.fadingOut=!0)},setTimeout(function(){o=!1},50)}function m(t){return Math.floor(1e3*Math.random())+1<10*t}function l(t,i){return Math.random()*(i-t)+t}f(),window.addEventListener("resize",f,!1),function(){h=s.getContext("2d");for(var t=0;t<i;t++)c[t]=new y,c[t].reset();u()}(),function t(){document.getElementsByTagName('html')[0].getAttribute('data-theme')=='dark'&&u(),window.requestAnimationFrame(t)}()};dark()]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/title.js"/>
      <url>/js/title.js</url>
      
        <content type="html"><![CDATA[//动态标题var OriginTitile = document.title;var titleTime;document.addEventListener('visibilitychange', function () {  if (document.hidden) {    //离开当前页面时标签显示内容    document.title = '👀赶紧回来~';    clearTimeout(titleTime);  } else {    //返回当前页面时标签显示内容    document.title = '🐖抓到你啦～';    //两秒后变回正常标题    titleTime = setTimeout(function () {      document.title = OriginTitile;    }, 2000);  }});]]></content>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/js/emoji.js"/>
      <url>/js/emoji.js</url>
      
        <content type="html"><![CDATA[// 如果当前页有评论就执行函数if (document.getElementById('post-comment')) owoBig();// 表情放大function owoBig() {    let flag = 1, // 设置节流阀        owo_time = '', // 设置计时器        m = 3; // 设置放大倍数    // 创建盒子    let div = document.createElement('div'),        body = document.querySelector('body');    // 设置ID    div.id = 'owo-big';    // 插入盒子    body.appendChild(div)    // 构造observer    let observer = new MutationObserver(mutations => {        for (let i = 0; i < mutations.length; i++) {            let dom = mutations[i].addedNodes,                owo_body = '';            if (dom.length == 2 && dom[1].className == 'OwO-body') owo_body = dom[1];            // 如果需要在评论内容中启用此功能请解除下面的注释            // else if (dom.length == 1 && dom[0].className == 'tk-comment') owo_body = dom[0];            else continue;                        // 禁用右键（手机端长按会出现右键菜单，为了体验给禁用掉）            if (document.body.clientWidth <= 768) owo_body.addEventListener('contextmenu', e => e.preventDefault());            // 鼠标移入            owo_body.onmouseover = (e) => {                    if (flag && e.target.tagName == 'IMG') {                        flag = 0;                        // 移入300毫秒后显示盒子                        owo_time = setTimeout(() => {                            let height = e.path[0].clientHeight * m, // 盒子高                                width = e.path[0].clientWidth * m, // 盒子宽                                left = (e.x - e.offsetX) - (width - e.path[0].clientWidth) / 2, // 盒子与屏幕左边距离                                top = e.y - e.offsetY; // 盒子与屏幕顶部距离                            if ((left + width) > body.clientWidth) left -= ((left + width) - body.clientWidth + 10); // 右边缘检测，防止超出屏幕                            if (left < 0) left = 10; // 左边缘检测，防止超出屏幕                            // 设置盒子样式                            div.style.cssText = `display:flex; height:${height}px; width:${width}px; left:${left}px; top:${top}px;`;                            // 在盒子中插入图片                            div.innerHTML = `<img src="${e.target.src}">`                        }, 300);                    }                };            // 鼠标移出隐藏盒子            owo_body.onmouseout = () => { div.style.display = 'none', flag = 1, clearTimeout(owo_time); }        }    })    observer.observe(document.getElementById('post-comment'), { subtree: true, childList: true }) // 监听的 元素 和 配置项}]]></content>
      
    </entry>
    
    
  
</search>
